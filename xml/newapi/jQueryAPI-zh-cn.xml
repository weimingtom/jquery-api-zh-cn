<?xml version="1.0" encoding="UTF-8"?>
<api>
   <categories>
      <category name="Ajax" zh="Ajax">
         <category name="Global Ajax Event Handlers" zh="全局Ajax事件"/>
         <category name="Helper Functions" zh="辅助函数"/>
         <category name="Low-Level Interface" zh="底层接口"/>
         <category name="Shorthand Methods" zh="快捷方法"/>
      </category>
      <category name="Attributes" zh="属性"/>
      <category name="Core" zh="核心"/>
      <category name="CSS" zh="CSS"/>
      <category name="Data" zh="数据"/>
      <category name="Dimensions" zh="尺寸"/>
      <category name="Effects" zh="效果">
         <category name="Basics" zh="基本"/>
         <category name="Custom" zh="自定义"/>
         <category name="Fading" zh="渐变"/>
         <category name="Sliding" zh="滑动"/>
      </category>
      <category name="Events" zh="事件">
         <category name="Browser Events" zh="浏览器事件"/>
         <category name="Document Loading" zh="文档加载"/>
         <category name="Event Handler Attachment" zh="事件处理"/>
         <category name="Event Object" zh="事件对象"/>
         <category name="Form Events" zh="表单事件"/>
         <category name="Keyboard Events" zh="键盘事件"/>
         <category name="Mouse Events" zh="鼠标事件"/>
      </category>
      <category name="Forms" zh="表单"/>
      <category name="Manipulation" zh="操作">
         <category name="Class Attribute" zh="Class属性"/>
         <category name="Copying" zh="复制"/>
         <category name="DOM Insertion" zh="DOM插入"/>
         <category name="DOM Insertion, Around" zh="包裹"/>
         <category name="DOM Insertion, Inside" zh="内部插入"/>
         <category name="DOM Insertion, Outside" zh="外部插入"/>
         <category name="DOM Removal" zh="DOM删除"/>
         <category name="DOM Replacement" zh="DOM替换"/>
         <category name="General Attributes" zh="通用属性"/>
         <category name="Style Properties" zh="样式属性"/>
      </category>
      <category name="Miscellaneous" zh="杂项">
         <category name="Collection Manipulation" zh="集合操作"/>
         <category name="Data Storage" zh="数据存储"/>
         <category name="DOM Element Methods" zh="DOM元素方法"/>
         <category name="Setup Methods" zh="设置方法"/>
      </category>
      <category name="Offset" zh="偏移"/>
      <category name="Plugin Authoring" zh="插件编写"/>
      <category name="Properties" zh="属性">
         <category name="Properties of jQuery Object Instances" zh="jQuery对象实例属性"/>
         <category name="Properties of the Global jQuery Object" zh="全局jQuery对象属性"/>
      </category>
      <category name="Selectors" zh="选择器">
         <category name="Attribute" zh="属性"/>
         <category name="Basic" zh="基础"/>
         <category name="Basic Filter" zh="简单"/>
         <category name="Child Filter" zh="子元素"/>
         <category name="Content Filter" zh="内容"/>
         <category name="Form" zh="表单"/>
         <category name="Hierarchy" zh="层级"/>
         <category name="Visibility Filter" zh="可见性"/>
      </category>
      <category name="Traversing" zh="遍历">
         <category name="Filtering" zh="筛选"/>
         <category name="Miscellaneous Traversing" zh="其他遍历"/>
         <category name="Tree Traversal" zh="树遍历"/>
      </category>
      <category name="Utilities" zh="工具"/>
      <category name="Version" zh="版本">
         <category name="Version 1.0" zh="1.0 版"/>
         <category name="Version 1.0.4" zh="1.0.4 版"/>
         <category name="Version 1.1" zh="1.1 版"/>
         <category name="Version 1.1.2" zh="1.1.2 版"/>
         <category name="Version 1.1.3" zh="1.1.3 版"/>
         <category name="Version 1.1.4" zh="1.1.4 版"/>
         <category name="Version 1.2" zh="1.2 版"/>
         <category name="Version 1.2.3" zh="1.2.3 版"/>
         <category name="Version 1.2.6" zh="1.2.6 版"/>
         <category name="Version 1.3" zh="1.3 版"/>
         <category name="Version 1.4" zh="1.4 版"/>
         <category name="Version 1.4.1" zh="1.4.1 版"/>
         <category name="Version 1.4.2" zh="1.4.2 版"/>
      </category>
  </categories>
   <entries>
      <entry type="method" name="undelegate">
         <desc>Remove a handler from the event for all elements which match the current selector, now or in the future, based upon a specific set of root elements.</desc>
         <signature/>
         <signature>
            <argument name="selector">
               <desc>A selector which will be used to filter the event results.</desc>
            </argument>
            <argument name="eventType">
               <desc>A string containing a JavaScript event type, such as "click" or "keydown"</desc>
            </argument>
         </signature>
         <signature>
            <argument name="selector">
               <desc>A selector which will be used to filter the event results.</desc>
            </argument>
            <argument name="eventType">
               <desc>A string containing a JavaScript event type, such as "click" or "keydown"</desc>
            </argument>
            <argument name="handler">
               <desc>A function to execute at the time the event is triggered.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>Undelegate is a way of removing event handlers that have been bound using <a href="/delegate">.delegate()</a>. It works virtually identically to <a href="/die">.die()</a> with the addition of a selector filter argument (which is required for delegation to work).</p>
         </longdesc>
         <example>
            <desc>Can bind and unbind events to the colored button.</desc>
         </example>
         <example>
            <desc>To unbind all delegated events from all paragraphs, write:</desc>
         </example>
         <example>
            <desc>To unbind all delegated click events from all paragraphs, write:</desc>
         </example>
         <example>
            <desc>To undelegate just one previously bound handler, pass the function in as the third argument:</desc>
         </example>
      </entry>
      <entry type="method" name="delegate">
         <desc>Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements.</desc>
         <signature>
            <argument name="selector">
               <desc>A selector to filter the elements that trigger the event.</desc>
            </argument>
            <argument name="eventType">
               <desc>A string containing one or more space-separated JavaScript event types, such as "click" or "keydown," or custom event names.</desc>
            </argument>
            <argument name="handler">
               <desc>A function to execute at the time the event is triggered.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="selector">
               <desc>A selector to filter the elements that trigger the event.</desc>
            </argument>
            <argument name="eventType">
               <desc>A string containing one or more space-separated JavaScript event types, such as "click" or "keydown," or custom event names.</desc>
            </argument>
            <argument name="eventData">
               <desc>A map of data that will be passed to the event handler.</desc>
            </argument>
            <argument name="handler">
               <desc>A function to execute at the time the event is triggered.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>Delegate is an alternative to using the <a href="/live">.live()</a> method, allowing for each binding of event delegation to specific DOM elements. For example the following delegate code:</p>

            <pre>$("table").delegate("td", "hover", function(){
	$(this).toggleClass("hover");
});</pre>

            <p>Is equivalent to the following code written using <code>.live()</code>:</p>

            <pre>$("table").each(function(){
	$("td", this).live("hover", function(){
		$(this).toggleClass("hover");
	});
});</pre>

            <p>See also the <a href="/undelegate">.undelegate()</a> method for a way of removing event handlers added in <a href="/delegate">.delegate()</a>.</p>
         </longdesc>
         <example>
            <desc>Click a paragraph to add another. Note that .delegate() binds the click event to all paragraphs - even new ones.</desc>
         </example>
         <example>
            <desc>To display each paragraph's text in an alert box whenever it is clicked:</desc>
         </example>
         <example>
            <desc>To cancel a default action and prevent it from bubbling up, return false:</desc>
         </example>
         <example>
            <desc>To cancel only the default action by using the preventDefault method.</desc>
         </example>
         <example>
            <desc>Can bind custom events too.</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery.error">
         <desc>接受一个字符串，并抛出包含此字符串的异常。Takes a string and throws an exception containing it.</desc>
         <signature>
            <argument name="message">
               <desc>待发送的消息</desc>
            </argument>
         </signature>
         <longdesc>这个方法主要是让插件开发人员可以重载此方法，并以更好的方式显示错误，或者提供更多信息。
         </longdesc>
         <example>
            <desc>重载 jQuery.error 用于在 Firebug 中显示</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery.parseJSON">
         <desc>接受一个JSON字符串，并返回解析后的对象。</desc>
         <signature>
            <argument name="json">
               <desc>用于解析的 JSON 字符串。</desc>
            </argument>
         </signature>
         <longdesc>
            <p>传入一个错误的JSON字符串会抛出一个异常。比如下面这些错误的JSON字符串：</p>
            <ul>
               <li>
                  <code>{test: 1}</code> (test does not have double quotes around it).</li>
               <li>
                  <code>{'test': 1}</code> ('test' is using single quotes instead of double quotes).</li>
            </ul>
            <p>另外，如果你什么都不传入，或者传入一个空字符串、null或undefined，parseJSON都会返回 null 。如果浏览器原生实现了 <code>JSON.parse</code>， jQuery 则会使用它来解析字符串。更多关于JSON格式的细节请参考 <a href="http://json.org/">http://json.org/</a> 。
            </p>
         </longdesc>
         <example>
            <desc>解析一个JSON字符串。</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery.proxy">
         <desc>接受一个函数，返回一个新函数，并且这个新函数始终保持了特定的上下文语境。</desc>
         <signature>
            <argument name="function">
               <desc>将要改变上下文语境的函数。</desc>
            </argument>
            <argument name="context">
               <desc>函数的上下文语境(`this`)会被设置成这个object对象。</desc>
            </argument>
         </signature>
         <signature>
            <argument name="context">
               <desc>函数的上下文语境会被设置成这个object对象。</desc>
            </argument>
            <argument name="name">
               <desc>将要改变上下文语境的函数名(这个函数必须是前一个参数context对象的属性)。</desc>
            </argument>
         </signature>
         <longdesc><p>当有事件处理函数要附加到元素上，但他们的上下文语境实际是指向另一个对象时，这个方法最有用了。更妙的是，jQuery能够确保即便你绑定的函数是经过jQuery.proxy()处理过的函数，你依然用原先的函数来准确无误地取消绑定。</p>
         </longdesc>
         <example>
            <desc>增强函数的上下文语境</desc>
         </example>
      </entry>
      <entry type="method" name="focusout">
         <desc>为 "focusout" 事件绑定一个处理函数。</desc>
         <signature>
            <argument name="handler(eventObject)">
               <desc>每当事件触发时执行的函数。</desc>
            </argument>
         </signature>
         <longdesc>
            <p>这个方法是 <code>.bind('focusout', handler)</code> 的快捷方式。</p>
            <p><code>focusout</code> 事件会在元素（或者其内部的任何元素）失去焦点焦点时触发。这跟 <a href="/blur">blur</a> 事件的显著区别在于，它可以在父元素上检测子元素失去焦点的情况(换而言之，它支持事件冒泡)。</p>
            <p>这个事件通常会跟 <a href="/focusin">focusin</a> 事件一起使用。</p>
         </longdesc>
         <example>
            <desc>监视段落内部失去焦点的情况。请注意 <code>focusout</code> 计数和 <code>blur</code> 计数的差异。</desc>
         </example>
      </entry>
      <entry type="method" name="focusin">
         <desc>为 "focusin" 事件绑定一个处理函数。</desc>
         <signature>
            <argument name="handler(eventObject)">
               <desc>每当事件触发时执行的函数。</desc>
            </argument>
         </signature>
         <longdesc>。
            <p>这个方法是 <code>.bind('focusin', handler)</code>的快捷方式。</p>
            <p><code>focusin</code> 事件会在元素（或者其内部的任何元素）获得焦点焦点时触发。这跟 <a href="/focus">focus</a> 事件的显著区别在于，它可以在父元素上检测子元素获得焦点的情况(换而言之，它支持事件冒泡)。</p>
            <p>这个事件通常会跟 <a href="/focusout">focusout</a> 事件一起使用。</p>
         </longdesc>
         <example>
            <desc>监控页面上段落内获得焦点的情况。</desc>
         </example>
      </entry>
      <entry type="method" name="has">
         <desc>保留包含特定后代的元素，去掉那些不含有指定后代的元素。</desc>
         <signature>
            <argument name="selector">
               <desc>一个用于匹配元素的选择器字符串。</desc>
            </argument>
         </signature>
         <signature>
            <argument name="contained">
               <desc>用于匹配元素的DOM元素。</desc>
            </argument>
         </signature>
         <longdesc>.has()方法将会从给定的jQuery对象中重新创建一组匹配的对象。提供的选择器会一一测试原先那些对象的后代，含有匹配后代的对象将得以保留。
    <p>提供一个代表DOM元素集合的jQuery对象， <code>.has()</code> 方法以匹配元素的子集创建一个新的jQuery对象。提供的选择器会一一测试原先那些元素的后代，含有匹配后代的元素会保留在结果中。</p>
            <p>想想一个带有如下嵌套列表的页面：</p>
            <pre>
 &lt;ul&gt;
  &lt;li&gt;list item 1&lt;/li&gt;
  &lt;li&gt;list item 2
    &lt;ul&gt;
      &lt;li&gt;list item 2-a&lt;/li&gt;
      &lt;li&gt;list item 2-b&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;list item 3&lt;/li&gt;
  &lt;li&gt;list item 4&lt;/li&gt;
&lt;/ul&gt;
</pre>
            <p>我们可以用如下方式对列表项集合应用这个方法：</p>
            <pre>$('li').has('ul').css('background-color', 'red');</pre>
            <p>结果是 item 2 背景变成了红色，因为只有这个 <code>&lt;li&gt;</code> 含有 <code>&lt;ul&gt;</code> 后代。</p>

         </longdesc>
         <example>
            <desc>检查是否一个元素在另一个之内。</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery.contains">
         <desc>jQuery 1.4 新增。一个DOM节点是否包含另一个DOM节点。Check to see if a DOM node is within another DOM node.</desc>
         <signature>
            <argument name="container">
               <desc>The DOM element that may contain the other element.</desc>
            </argument>
            <argument name="contained">
               <desc>The DOM node that may be contained by the other element.</desc>
            </argument>
         </signature>
         <longdesc/>
         <example>
            <desc>Check if an element is inside another.</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery.noop">
         <desc>An empty function.</desc>
         <signature/>
         <longdesc>
            <p>You can use this empty function when you wish to pass around a function that will do nothing.</p>
            <p>This is useful for plugin authors who offer optional callbacks; in the case that no callback is given, something like <code>jQuery.noop</code> could execute.</p>
         </longdesc>
      </entry>
      <entry type="method" name="delay">
         <desc>设置一个延时来推迟执行队列中之后的项目。Set a timer to delay execution of subsequent items in the queue.</desc>
         <signature>
            <argument name="duration">
               <desc>An integer indicating the number of milliseconds to delay execution of the next item in the queue.</desc>
            </argument>
            <argument name="queueName">
               <desc>A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue.</desc>
            </argument>
         </signature>
         <longdesc>jQuery 1.4新增。用于将队列中的函数延时执行。他既可以推迟动画队列的执行，也可以用于自定义队列。<p>Added to jQuery in version 1.4, the <code>.delay()</code> method allows us to delay the execution of functions that follow it in the queue. It can be used with the standard effects queue or with a custom queue. </p>
            <p>Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings <code>'fast'</code> and <code>'slow'</code> can be supplied to indicate durations of 200 and 600 milliseconds, respectively.</p>
            <p>Using the standard effects queue, we can, for example, set an 800-millisecond delay between the <code>.slideUp()</code> and <code>.fadeIn()</code> of <code>&lt;div id="foo"&gt;</code>:</p>
            <pre>$('#foo').slideUp(300).delay(800).fadeIn(400);</pre>
            <p>When this statement is executed, the element slides up for 300 milliseconds and then pauses for 800 milliseconds before fading in for 400 milliseconds.</p>
            <p>
               <strong>jQuery.delay() is best for delaying between queued jQuery effects and such, and is not a replacement for JavaScript's native <a href="https://developer.mozilla.org/en/DOM/window.setTimeout">setTimeout</a> function, which may be more appropriate for certain use cases.</strong>
            </p>
         </longdesc>
         <example>
            <desc>Animate the hiding and showing of two divs, delaying the first before showing it.</desc>
         </example>
      </entry>
      <entry type="method" name="parentsUntil">
         <desc>查找当前元素的所有的父辈元素，直到遇到匹配的那个元素为止。Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector.</desc>
         <signature>
            <argument name="selector">
               <desc>A string containing a selector expression to indicate where to stop matching ancestor elements.</desc>
            </argument>
         </signature>
         <longdesc>如果提供的jQuery代表了一组DOM元素，.parentsUntil()方法也能让我们找遍所有元素的祖先元素，直到遇到了一个跟提供的参数匹配的元素的时候才会停下来。这个返回的jQuery对象里包含了下面所有找到的父辈元素，但不包括那个选择器匹配到的元素。
		
		<p>Given a jQuery object that represents a set of DOM elements, the <code>.parentsUntil()</code> method traverses through the ancestors of these elements until it reaches an element matched by the selector passed in the method's argument. The resulting jQuery object contains all of the ancestors up to but not including the one matched by the <code>.parentsUntil()</code> selector. Consider a page with a basic nested list as follows:</p>
            <pre>&lt;ul class="level-1"&gt;
  &lt;li class="item-i"&gt;I&lt;/li&gt;
  &lt;li class="item-ii"&gt;II
    &lt;ul class="level-2"&gt;
      &lt;li class="item-a"&gt;A&lt;/li&gt;
      &lt;li class="item-b"&gt;B
        &lt;ul class="level-3"&gt;
          &lt;li class="item-1"&gt;1&lt;/li&gt;
          &lt;li class="item-2"&gt;2&lt;/li&gt;
          &lt;li class="item-3"&gt;3&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li class="item-c"&gt;C&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li class="item-iii"&gt;III&lt;/li&gt;
&lt;/ul&gt;
</pre>  
            <p>If we begin at item A, we can find its ancestors up to but not including <code>&lt;ul class="level-1"&gt;</code> as follows:</p>
            <pre>$('li.item-a').parentsUntil('.level-1')
    .css('background-color', 'red');</pre>
            <p>The result of this call is a red background for the level-2 list and the item II. </p>
            <p>If the .parentsUntil() selector is not matched, or if no selector is supplied, the returned jQuery object contains all of the previous jQuery object's ancestors. For example, let's say we begin at item A again, but this time we use a selector that is not matched by any of its ancestors:</p>
            <pre>$('li.item-a').parentsUntil('.not-here')
    .css('background-color', 'red');</pre>
            <p>The result of this call is a red background-color style applied to the level-2 list, the item II, the level-1 list, the <code>&lt;body&gt;</code> element, and the <code>&lt;html&gt;</code> element.</p>
         </longdesc>
         <example>
            <desc>Find the ancestors of &lt;li class="item-a"&gt; up to &lt;ul class="level-1"&gt; and give them a red background color.</desc>
         </example>
      </entry>
      <entry type="method" name="prevUntil">
         <desc>查找当前元素之前所有的同辈元素，直到遇到匹配的那个元素为止。Get all preceding siblings of each element up to but not including the element matched by the selector.</desc>
         <signature>
            <argument name="selector">
               <desc>A string containing a selector expression to indicate where to stop matching preceding sibling elements.</desc>
            </argument>
         </signature>
         <longdesc>如果提供的jQuery代表了一组DOM元素，.prevUntil()方法也能让我们找遍所有元素所在的DOM树，直到遇到了一个跟提供的参数匹配的元素的时候才会停下来。这个新jQuery对象里包含了前面所有找到的同辈元素，但不包括那个选择器匹配到的元素。
		
		如果没有选择器匹配到，或者没有提供参数，那么排在前面的所有同辈元素都会被选中。这就跟用没有提供参数的 .prevAll()效果一样。<p>Given a jQuery object that represents a set of DOM elements, the <code>.prevUntil()</code> method allows us to search through the predecessors of these elements in the DOM tree, stopping when it reaches an element matched by the method's argument. The new jQuery object that is returned contains all previous siblings up to but not including the one matched by the <code>.prevUntil()</code> selector.</p>
            <p>If the selector is not matched or is not supplied, all previous siblings will be selected; in these cases it selects the same elements as the <code>.prevAll()</code> method does when no filter selector is provided.</p>
  
            <p>Consider a page with a simple definition list as follows:</p>
            <pre>
&lt;dl&gt;
  &lt;dt&gt;term 1&lt;/dt&gt;
  &lt;dd&gt;definition 1-a&lt;/dd&gt;
  &lt;dd&gt;definition 1-b&lt;/dd&gt;
  &lt;dd&gt;definition 1-c&lt;/dd&gt;
  &lt;dd&gt;definition 1-d&lt;/dd&gt;

  &lt;dt id="term-2"&gt;term 2&lt;/dt&gt;
  &lt;dd&gt;definition 2-a&lt;/dd&gt;
  &lt;dd&gt;definition 2-b&lt;/dd&gt;
  &lt;dd&gt;definition 2-c&lt;/dd&gt;

  &lt;dt&gt;term 3&lt;/dt&gt;
  &lt;dd&gt;definition 3-a&lt;/dd&gt;
  &lt;dd&gt;definition 3-b&lt;/dd&gt;
&lt;/dl&gt;
</pre>
              <p>If we begin at the second term, we can find the elements which come after it until a preceding <code>&lt;dt&gt;</code>.</p>
            <pre>$('#term-2').prevUntil('dt').css('background-color', 'red');</pre>
              <p>The result of this call is a red background behind definitions <code>1-a</code>, <code>1-b</code>, <code>1-c</code>, and <code>1-d</code>. </p>
         </longdesc>
         <example>
            <desc>Find the siblings that precede &lt;dt id="term-2"&gt; up to the preceding &lt;dt&gt; and give them a red background color.</desc>
         </example>
      </entry>
      <entry type="method" name="nextUntil">
         <desc>查找当前元素之后所有的同辈元素，直到遇到匹配的那个元素为止。Get all following siblings of each element up to but not including the element matched by the selector.</desc>
         <signature>
            <argument name="selector">
               <desc>A string containing a selector expression to indicate where to stop matching following sibling elements.</desc>
            </argument>
         </signature>
         <longdesc>如果提供的jQuery代表了一组DOM元素，.nextUntil()方法也能让我们找遍所有元素所在的DOM树，直到遇到了一个跟提供的参数匹配的元素的时候才会停下来。这个新jQuery对象里包含了下面所有找到的同辈元素，但不包括那个选择器匹配到的元素。
		
		如果没有选择器匹配到，或者没有提供参数，那么跟在后面的所有同辈元素都会被选中。这就跟用没有提供参数的 .nextAll()效果一样。<p>Given a jQuery object that represents a set of DOM elements, the <code>.nextUntil()</code> method allows us to search through the successors of these elements in the DOM tree, stopping when it reaches an element matched by the method's argument. The new jQuery object that is returned contains all following siblings up to but not including the one matched by the <code>.nextUntil()</code> selector.</p>
            <p>If the selector is not matched or is not supplied, all following siblings will be selected; in these cases it selects the same elements as the <code>.nextAll()</code> method does when no filter selector is provided.</p>
  
            <p>Consider a page with a simple definition list as follows:</p>
            <pre>
&lt;dl&gt;
  &lt;dt&gt;term 1&lt;/dt&gt;
  &lt;dd&gt;definition 1-a&lt;/dd&gt;
  &lt;dd&gt;definition 1-b&lt;/dd&gt;
  &lt;dd&gt;definition 1-c&lt;/dd&gt;
  &lt;dd&gt;definition 1-d&lt;/dd&gt;

  &lt;dt id="term-2"&gt;term 2&lt;/dt&gt;
  &lt;dd&gt;definition 2-a&lt;/dd&gt;
  &lt;dd&gt;definition 2-b&lt;/dd&gt;
  &lt;dd&gt;definition 2-c&lt;/dd&gt;

  &lt;dt&gt;term 3&lt;/dt&gt;
  &lt;dd&gt;definition 3-a&lt;/dd&gt;
  &lt;dd&gt;definition 3-b&lt;/dd&gt;
&lt;/dl&gt;
</pre>
              <p>If we begin at the second term, we can find the elements which come after it until a following <code>&lt;dt&gt;</code>.</p>
            <pre>$('#term-2').nextUntil('dt').css('background-color', 'red');</pre>
              <p>The result of this call is a red background behind definitions <code>2-a</code>, <code>2-b</code>, and <code>2-c</code>. </p>
         </longdesc>
         <example>
            <desc>Find the siblings that follow &lt;dt id="term-2"&gt; up to the next &lt;dt&gt; and give them a red background color.</desc>
         </example>
      </entry>
      <entry type="method" name="event.isImmediatePropagationStopped">
         <desc>  Returns whether event.stopImmediatePropagation() was ever called on this event object. </desc>
         <signature/>
         <longdesc> 
            <p>This property was introduced in <a href="http://www.w3.org/TR/2003/NOTE-DOM-Level-3-Events-20031107/events.html#Events-Event-isImmediatePropagationStopped">DOM level 3</a>.</p>  
         </longdesc>
         <example>
            <desc>Checks whether event.stopImmediatePropagation() was called.</desc>
         </example>
      </entry>
      <entry type="method" name="event.stopImmediatePropagation">
         <desc> Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree
  </desc>
         <signature/>
         <longdesc>
            <p>In addition to keeping any additional handlers on an element from being executed, this method also stops the bubbling by implicitly calling <code>event.stopPropagation()</code>. To simply prevent the event from bubbling to ancestor elements but allow other event handlers to execute on the same element, we can use <code>
                  <a href="http://api.jquery.com/event.stopPropagation">event.stopPropagation()</a>
               </code> instead.</p>
            <p>Use <code>
                  <a href="http://api.jquery.com/event.isImmediatePropagationStopped">event.isImmediatePropagationStopped()</a>
               </code> to know whether this method was ever called (on that event object).</p> 
         </longdesc>
         <example>
            <desc>Prevents other event handlers from being called.</desc>
         </example>
      </entry>
      <entry type="method" name="event.isPropagationStopped">
         <desc>  Returns whether <a href="/event.stopPropagation">event.stopPropagation()</a> was ever called on this event object. </desc>
         <signature/>
         <longdesc>
            <p>This event method is described in the <a href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-Event-isPropagationStopped">W3C DOM Level 3 specification</a>.</p>
         </longdesc>
         <example>
            <desc>Checks whether event.stopPropagation() was called</desc>
         </example>
      </entry>
      <entry type="method" name="event.stopPropagation">
         <desc>Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event.   </desc>
         <signature/>
         <longdesc>  
            <p>We can use <code>
                  <a href="/event.isPropagationStopped">event.isPropagationStopped()</a>
               </code> to determine if this method was ever called (on that event object). </p>
            <p>This method works for custom events triggered with <a href="/trigger">trigger()</a>, as well.</p>
            <p>Note that this will not prevent other handlers <em>on the same element</em> from running. </p> 
         </longdesc>
         <example>
            <desc>Kill the bubbling on the click event.</desc>
         </example>
      </entry>
      <entry type="method" name="event.isDefaultPrevented">
         <desc>Returns whether <a href="/event.preventDefault">event.preventDefault()</a> was ever called on this event object. </desc>
         <signature/>
         <longdesc>   </longdesc>
         <example>
            <desc>Checks whether event.preventDefault() was called.</desc>
         </example>
      </entry>
      <entry type="method" name="event.preventDefault">
         <desc> If this method is called, the default action of the event will not be triggered. </desc>
         <signature/>
         <longdesc> 
            <p>For example, clicked anchors will not take the browser to a new URL. We can use <code>event.isDefaultPrevented()</code> to determine if this method has been called by an event handler that was triggered by this event.</p>  
         </longdesc>
         <example>
            <desc>Cancel the default action (navigation) of the click.</desc>
         </example>
      </entry>
      <entry type="property" name="event.timeStamp">
         <desc> This attribute returns the number of milliseconds since January 1, 1970, when the event is triggered.   </desc>
         <signature/>
         <longdesc>It can be useful for profiling the performance of certain jQuery functions. </longdesc>
         <example>
            <desc>Display the time since the click handler last executed.</desc>
         </example>
      </entry>
      <entry type="property" name="event.result">
         <desc> This attribute contains the last value returned by an event handler that was triggered by this event, unless the value was <code>undefined</code>.  </desc>
         <signature/>
         <longdesc> It can be useful for getting previous return values of custom events.  </longdesc>
         <example>
            <desc>Alert previous handler's return value</desc>
         </example>
      </entry>
      <entry type="property" name="event.which">
         <desc> For key or button events, this attribute indicates the specific button or key that was pressed.  </desc>
         <signature/>
         <longdesc> 
            <p>
               <code>event.which</code> normalizes <code>event.keyCode</code> and <code>event.charCode</code>. It is recommended to watch <code>event.which</code> for keyboard key input. For more detail, read about <a href="https://developer.mozilla.org/en/DOM/event.charCode#Notes">event.charCode on the MDC</a>. </p> 
         </longdesc>
         <example>
            <desc>Log what key was depressed.</desc>
         </example>
      </entry>
      <entry type="property" name="event.pageY">
         <desc>The mouse position relative to the top edge of the document. </desc>
         <signature/>
         <longdesc>   </longdesc>
         <example>
            <desc>Show the mouse position relative to the left and top edges of the document (within this iframe).</desc>
         </example>
      </entry>
      <entry type="property" name="event.pageX">
         <desc>The mouse position relative to the left edge of the document. </desc>
         <signature/>
         <longdesc>   </longdesc>
         <example>
            <desc>Show the mouse position relative to the left and top edges of the document (within the iframe).</desc>
         </example>
      </entry>
      <entry type="property" name="event.currentTarget">
         <desc> The current DOM element within the event bubbling phase.  </desc>
         <signature/>
         <longdesc>
            <p>This property will always be equal to the <code>this</code> of the function.</p>  
         </longdesc>
         <example>
            <desc>Alert that currentTarget matches the `this` keyword.</desc>
         </example>
      </entry>
      <entry type="property" name="event.relatedTarget">
         <desc>  The other DOM element involved in the event, if any. </desc>
         <signature/>
         <longdesc>
            <p>For <code>mouseout</code>, indicates the element being entered; for <code>mousein</code>, indicates the element being exited. </p> 
         </longdesc>
         <example>
            <desc>On mouseout of anchors, alert the element type being entered.</desc>
         </example>
      </entry>
      <entry type="property" name="event.data">
         <desc> Contains the optional data passed to jQuery.fn.bind when the current executing handler was bound.  </desc>
         <signature/>
         <longdesc>   </longdesc>
         <example>
            <desc>The description of the example.</desc>
         </example>
      </entry>
      <entry type="property" name="event.target">
         <desc> The DOM element that initiated the event.  </desc>
         <signature/>
         <longdesc> 
            <p>This can be the element that registered for the event or a child of it.  It is often useful to compare <code>event.target</code> to <code>this</code> in order to determine if the event is being handled due to event bubbling. This property is very useful in event delegation, when events bubble.</p>
         </longdesc>
         <example>
            <desc>Display the tag's name on click</desc>
         </example>
         <example>
            <desc>Implements a simple event delegation: The click handler is added to an unordered list, and the children of its li children are hidden. Clicking one of the li children toggles (see toggle()) their children.</desc>
         </example>
      </entry>
      <entry type="property" name="event.type">
         <desc> Describes the nature of the event.  </desc>
         <signature/>
         <longdesc>   </longdesc>
         <example>
            <desc>On all anchor clicks, alert the event type.</desc>
         </example>
      </entry>
      <entry type="property" name="jQuery.fx.off">
         <desc>关闭页面上所有的动画。Globally disable all animations.</desc>
         <signature/>
         <longdesc>把这个属性设置为true可以立即关闭所有动画(所有效果会立即执行完毕)。有些情况下可能需要这样，比如：

* 你在配置比较低的电脑上使用jQuery。

* 你的一些用户由于动画效果而遇到了 &lt;a href="http://www.jdeegan.phlegethon.org/turn_off_animation.html"&gt;可访问性问题&lt;/a&gt;

当把这个属性设成false之后，可以重新开启所有动画。
    <p>When this property is set to <code>true</code>, all animation methods will immediately set elements to their final state when called, rather than displaying an effect. This may be desirable for a couple reasons:</p>
            <ul>
               <li>jQuery is being used on a low-resource device.</li>
               <li>Users are encountering accessibility problems with the animations (see the article <a href="http://www.jdeegan.phlegethon.org/turn_off_animation.html">Turn Off Animation</a> for more information).</li>
            </ul>
            <p>Animations can be turned back on by setting the property to <code>false</code>.</p>

         </longdesc>
         <example>
            <desc>Toggle animation on and off</desc>
         </example>
      </entry>
      <entry type="method" name="each">
         <desc>以每一个匹配的元素作为上下文来执行一个函数。Iterate over a jQuery object, executing a function for each matched element. </desc>
         <signature>
            <argument name="function(index, Element)">
               <desc>A function to execute for each matched element.</desc>
            </argument>
         </signature>
         <longdesc>意味着，每次执行传递进来的函数时，函数中的this关键字都指向一个不同的DOM元素（每次都是一个不同的匹配元素）。而且，在每次执行函数时，都会给函数传递一个表示作为执行环境的元素在匹配的元素集合中所处位置的数字值作为参数（从零开始的整型）。 返回 'false' 将停止循环 (就像在普通的循环中使用 'break')。返回 'true' 跳至下一个循环(就像在普通的循环中使用'continue')。
  <p>The <code>.each()</code> method is designed to make DOM looping constructs concise and less error-prone. When called it iterates over the DOM elements that are part of the jQuery object. Each time the callback runs, it is passed the current loop iteration, beginning from 0. More importantly, the callback is fired in the context of the current DOM element, so the keyword <code>this</code> refers to the element.</p>
            <p>Suppose we had a simple unordered list on the page:</p>
            <pre>&lt;ul&gt;
    &lt;li&gt;foo&lt;/li&gt;
    &lt;li&gt;bar&lt;/li&gt;
  &lt;/ul&gt;
  </pre>
            <p>We can select the list items and iterate across them:</p>
            <pre>$('li').each(function(index) {
    alert(index + ': ' + $(this).text());
  });
  </pre>
            <p>A message is thus alerted for each item in the list:</p>
            <p>
               <span class="output">0: foo</span>
               <br/>
               <span class="output">1: bar</span>
            </p>
            <p>We can stop the loop from within the callback function by returning <code>false</code>.</p>  
  
         </longdesc>
         <example>
            <desc>Iterates over three divs and sets their color property.</desc>
         </example>
         <example>
            <desc>If you want to have the jQuery object instead of the regular DOM element, use the $(this) function, for example:</desc>
         </example>
         <example>
            <desc>You can use 'return' to break out of each() loops early.</desc>
         </example>
      </entry>
      <entry type="method" name="pushStack">
         <desc>Add a collection of DOM elements onto the jQuery stack.</desc>
         <signature>
            <argument name="elements">
               <desc>An array of elements to push onto the stack and make into a new jQuery object.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="elements">
               <desc>An array of elements to push onto the stack and make into a new jQuery object.</desc>
            </argument>
            <argument name="name">
               <desc>The name of a jQuery method that generated the array of elements.</desc>
            </argument>
            <argument name="arguments">
               <desc>The arguments that were passed in to the jQuery method (for serialization).</desc>
            </argument>
         </signature>
         <longdesc/>
         <example>
            <desc>Add some elements onto the jQuery stack, then pop back off again.</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery.globalEval">
         <desc>Execute some JavaScript code globally.</desc>
         <signature>
            <argument name="code">
               <desc>The JavaScript code to execute.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>This method behaves differently from using a normal JavaScript <code>eval()</code> in that it's executed within the global context (which is important for loading external scripts dynamically).</p>
         </longdesc>
         <example>
            <desc>Execute a script in the global context.</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery.isXMLDoc">
         <desc>Check to see if a DOM node is within an XML document (or is an XML document).</desc>
         <signature>
            <argument name="node">
               <desc>The DOM node that will be checked to see if it's in an XML document.</desc>
            </argument>
         </signature>
         <longdesc/>
         <example>
            <desc>Check an object to see if it's in an XML document.</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery.removeData">
         <desc>Remove a previously-stored piece of data.</desc>
         <signature>
            <argument name="element">
               <desc>A DOM element from which to remove data.</desc>
            </argument>
            <argument name="name">
               <desc>A string naming the piece of data to remove.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>
               <strong>Note:</strong> This is a low-level method, you should probably use <code>
                  <a href="/removeData">.removeData()</a>
               </code> instead.</p>
	           <p>The <code>jQuery.removeData()</code> method allows us to remove values that were previously set using <code>
                  <a href="/jQuery.data">jQuery.data()</a>
               </code>. When called with the name of a key, <code>jQuery.removeData()</code> deletes that particular value; when called with no arguments, all values are removed.</p>
         </longdesc>
         <example>
            <desc>Set a data store for 2 names then remove one of them.</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery.data">
         <desc>在元素上存放数据,返回jQuery对象。 查询在元素上存放的数据Store arbitrary data associated with the specified element.</desc>
         <signature>
            <argument name="element">
               <desc>The DOM element to associate with the data.</desc>
            </argument>
            <argument name="key">
               <desc>A string naming the piece of data to set.</desc>
            </argument>
            <argument name="value">
               <desc>The new data value.</desc>
            </argument>
         </signature>
         <longdesc>注意：这是一个底层方法。你应当使用.data()来代替。如果不指定参数，则会返回元素上面存放的所有数据，以Object的形式返回。
		
注意：这是一个底层方法。你应当使用.data()来代替。<p>
               <strong>Note:</strong> This is a low-level method; you should probably use <code>
                  <a href="/data">.data()</a>
               </code> instead.</p>
	           <p>The <code>jQuery.data()</code> method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore from memory leaks. We can set several distinct values for a single element and retrieve them later:</p>
	           <pre>jQuery.data(document.body, 'foo', 52);
		jQuery.data(document.body, 'bar', 'test');</pre>
         </longdesc>
         <example>
            <desc>Store then retrieve a value from the div element.</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery.data">
         <desc>在元素上存放数据,返回jQuery对象。 查询在元素上存放的数据Returns value at named data store for the element, as set by <code>jQuery.data(element, name, value)</code>, or the full data store for the element.</desc>
         <signature>
            <argument name="element">
               <desc>The DOM element to query for the data.</desc>
            </argument>
            <argument name="key">
               <desc>Name of the data stored.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="element">
               <desc>The DOM element to query for the data.</desc>
            </argument>
         </signature>
         <longdesc>注意：这是一个底层方法。你应当使用.data()来代替。如果不指定参数，则会返回元素上面存放的所有数据，以Object的形式返回。
		
注意：这是一个底层方法。你应当使用.data()来代替。<p>
               <strong>Note:</strong> This is a low-level method; you should probably use <code>
                  <a href="/data">.data()</a>
               </code> instead.</p>
            <p>The <code>jQuery.data()</code> method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore from memory leaks. We can retrieve several distinct values for a single element one at a time, or as a set:</p>
            <pre>alert(jQuery.data( document.body, 'foo' ));
alert(jQuery.data( document.body ));</pre>
            <p>The above lines alert the data values that were set on the <code>body</code> element. If nothing was set on that element, an empty string is returned.</p>
            <p>Calling <code>jQuery.data(element)</code> retrieves all of the element's associated values as a JavaScript object. Note that jQuery itself uses this method to store data for internal use, such as event handlers, so do not assume that it contains only data that your own code has stored.</p>
         </longdesc>
         <example>
            <desc>Get the data named "blah" stored at for an element.</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery.dequeue">
         <desc>Execute the next function on the queue for the matched element.</desc>
         <signature>
            <argument name="element">
               <desc>A DOM element from which to remove and execute a queued function.</desc>
            </argument>
            <argument name="queueName">
               <desc>A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>
               <strong>Note:</strong> This is a low-level method, you should probably use <code>
                  <a href="/dequeue">.dequeue()</a>
               </code> instead.</p>
            <p>When <code>jQuery.dequeue()</code> is called, the next function on the queue is removed from the queue, and then executed. This function should in turn (directly or indirectly) cause <code>jQuery.dequeue()</code> to be called, so that the sequence can continue.</p>
         </longdesc>
         <example>
            <desc>Use dequeue to end a custom queue function which allows the queue to keep going.</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery.queue">
         <desc>Show the queue of functions to be executed on the matched element.</desc>
         <signature>
            <argument name="element">
               <desc>A DOM element to inspect for an attached queue.</desc>
            </argument>
            <argument name="queueName">
               <desc>A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>
               <strong>Note:</strong> This is a low-level method, you should probably use <code>
                  <a href="/queue">.queue()</a>
               </code> instead.</p>
         </longdesc>
         <example>
            <desc>Show the length of the queue.</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery.queue">
         <desc>Manipulate the queue of functions to be executed on the matched element.</desc>
         <signature>
            <argument name="element">
               <desc>A DOM element where the array of queued functions is attached.</desc>
            </argument>
            <argument name="queueName">
               <desc>A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue.</desc>
            </argument>
            <argument name="newQueue">
               <desc>An array of functions to replace the current queue contents.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="element">
               <desc>A DOM element on which to add a queued function.</desc>
            </argument>
            <argument name="queueName">
               <desc>A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue.</desc>
            </argument>
            <argument name="callback()">
               <desc>The new function to add to the queue.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>
               <strong>Note:</strong> This is a low-level method, you should probably use <code>
                  <a href="/queue">.queue()</a>
               </code> instead.</p>
	           <p>Every element can have one or more queues of functions attached to it by jQuery. In most applications, only one queue (called <code>fx</code>) is used. Queues allow a sequence of actions to be called on an element asynchronously, without halting program execution.</p>
	           <p>The <code>jQuery.queue()</code> method allows us to directly manipulate this queue of functions. Calling <code>jQuery.queue()</code> with a callback is particularly useful; it allows us to place a new function at the end of the queue.</p>
	           <p>Note that when adding a function with <code>jQuery.queue()</code>, we should ensure that <code>jQuery.dequeue()</code> is eventually called so that the next function in line executes.</p>
         </longdesc>
         <example>
            <desc>Queue a custom function.</desc>
         </example>
         <example>
            <desc>Set a queue array to delete the queue.</desc>
         </example>
      </entry>
      <entry type="method" name="clearQueue">
         <desc>jQuery 1.4 新增。清空对象上尚未执行的所有队列Remove from the queue all items that have not yet been run.</desc>
         <signature>
            <argument name="queueName">
               <desc>A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue.</desc>
            </argument>
         </signature>
         <longdesc>如果不带参数，则默认清空的是动画队列。这跟stop(true)类似，但stop()只能清空动画队列，而这个可以清空所有通过 .queue() 创建的队列。<p>When the <code>.clearQueue()</code> method is called, all functions on the queue that have not been executed are removed from the queue. When used without an argument, <code>.clearQueue()</code> removes the remaining functions from <code>fx</code>, the standard effects queue. In this way it is similar to <code>.stop(true)</code>. However,  while the <code>.stop()</code> method is meant to be used only with animations, <code>.clearQueue()</code> can also be used to remove any function that has been added to a generic jQuery queue with the <code>.queue()</code> method. </p>
         </longdesc>
         <example>
            <desc>Empty the queue.</desc>
         </example>
      </entry>
      <entry type="method" name="toArray">
         <desc>Retrieve all the DOM elements contained in the jQuery set, as an array.</desc>
         <signature/>
         <longdesc>
            <p>
               <code>.toArray()</code> returns all of the elements in the jQuery set:</p>
            <pre>alert($('li').toArray());</pre>
            <p>All of the matched DOM nodes are returned by this call, contained in a standard array:</p>
            <p>
               <span class="result">[&lt;li id="foo"&gt;, &lt;li id="bar"&gt;]</span>
            </p>
         </longdesc>
         <example>
            <desc>Selects all divs in the document and returns the DOM Elements as an Array, then uses the built-in reverse-method to reverse that array.</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery.isEmptyObject">
         <desc>jQuery 1.4 新增。测试对象是否是空对象（不包含任何属性）。Check to see if an object is empty (contains no properties).</desc>
         <signature>
            <argument name="object">
               <desc>The object that will be checked to see if it's empty.</desc>
            </argument>
         </signature>
         <longdesc>jQuery 1.4 中，这个方法既检测对象本身的属性，也检测从原型继承的属性（因此没有使用hasOwnProperty）。<p>As of jQuery 1.4 this method checks both properties on the object itself and properties inherited from prototypes (in that it doesn't use hasOwnProperty).</p>
         </longdesc>
         <example>
            <desc>Check an object to see if it's empty.</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery.isPlainObject">
         <desc>jQuery 1.4 新增。测试对象是否是纯粹的对象（通过 "{}" 或者 "new Object" 创建的）。Check to see if an object is a plain object (created using "{}" or "new Object").</desc>
         <signature>
            <argument name="object">
               <desc>The object that will be checked to see if it's a plain object.</desc>
            </argument>
         </signature>
         <longdesc/>
         <example>
            <desc>Check an object to see if it's a plain object.</desc>
         </example>
      </entry>
      <entry type="method" name="keydown">
         <desc>触发每一个匹配元素的keydown事件 在每一个匹配元素的keydown事件中绑定一个处理函数。Bind an event handler to the "keydown" JavaScript event, or trigger that event on an element.</desc>
         <signature>
            <argument name="handler(eventObject)">
               <desc>A function to execute each time the event is triggered.</desc>
            </argument>
         </signature>
         <signature/>
         <longdesc>这个函数会调用执行绑定到keydown事件的所有函数，包括浏览器的默认行为。可以通过在某个绑定的函数中返回false来防止触发浏览器的默认行为。keydown事件会在键盘按下时触发。keydown事件会在键盘按下时触发。
<p>This method is a shortcut for <code>.bind('keydown', handler)</code> in the first variation, and <code>.trigger('keydown')</code> in the second.</p>
            <p>The <code>keydown</code> event is sent to an element when the user first presses a key on the keyboard. It can be attached to any element, but the event is only sent to the element that has the focus. Focusable elements can vary between browsers, but form elements can always get focus so are reasonable candidates for this event type.</p>
            <p>For example, consider the HTML:</p>
            <pre>&lt;form&gt;
  &lt;input id="target" type="text" value="Hello there" /&gt;
&lt;/form&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;</pre>
            <p>The event handler can be bound to the input field:</p>
            <pre>$('#target').keydown(function() {
  alert('Handler for .keydown() called.');
});</pre>
            <p>Now when the insertion point is inside the field and a key is pressed, the alert is displayed:</p>
            <p>
               <span class="output">Handler for .keydown() called.</span>
            </p>
            <p>We can trigger the event manually when another element is clicked:</p>
            <pre>$('#other').click(function() {
  $('#target').keydown();
});</pre>
            <p>After this code executes, clicks on <span class="output">Trigger the handler</span> will also alert the message.</p>
            <p>If key presses anywhere need to be caught (for example, to implement global shortcut keys on a page), it is useful to attach this behavior to the <code>document</code> object. Because of event bubbling, all key presses will make their way up the DOM to the <code>document</code> object unless explicitly stopped.</p>
            <p>To determine which key was pressed, we can examine the <a href="http://api.jquery.com/category/events/event-object/">event object</a> that is passed to the handler function. While browsers use differing properties to store this information, jQuery normalizes the <code>.which</code> property so we can reliably use it to retrieve the key code. This code corresponds to a key on the keyboard, including codes for special keys such as arrows. For catching actual text entry, <code>.keypress()</code> may be a better choice.</p>
         </longdesc>
         <example>
            <desc>Show the event object for the keydown handler when a key is pressed in the input.</desc>
         </example>
      </entry>
      <entry type="method" name="index">
         <desc>搜索匹配的元素，并返回相应元素的索引值，从0开始计数。Search for a given element from among the matched elements.</desc>
         <signature/>
         <signature>
            <argument name="selector">
               <desc>A selector representing a jQuery collection in which to look for an element.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="element">
               <desc>The DOM element or first element within the jQuery object to look for.</desc>
            </argument>
         </signature>
         <longdesc>如果不给 .index() 方法传递参数，那么返回值就是这个jQuery对象集合中第一个元素相对于其同辈元素的位置。
		
			如果参数是一组DOM元素或者jQuery对象，那么返回值就是传递的元素相对于原先集合的位置。
		
		如果参数是一个选择器，那么返回值就是原先元素相对于选择器匹配元素中的位置。如果找不到匹配的元素，则返回-1。
		
		具体请参考示例。
		<h4>Return Values</h4>
            <p>If no argument is passed to the <code>.index()</code> method, the return value is an integer indicating the position of the first element within the jQuery object relative to its sibling elements.</p>
            <p>If <code>.index()</code> is called on a collection of elements and a DOM element or jQuery object is passed in, <code>.index()</code> returns an integer indicating the position of the passed element relative to the original collection.</p>
            <p>If a selector string is passed as an argument, <code>.index()</code> returns an integer indicating the position of the original element relative to the elements matched by the selector. If the element is not found, <code>.index()</code> will return -1.</p>
            <h4>Detail</h4>
            <p>The complementary operation to <code>.get()</code>, which accepts an index and returns a DOM node, <code>.index()</code> can take a DOM node and returns an index. Suppose we have a simple unordered list on the page:</p>
            <pre>
&lt;ul&gt;
  &lt;li id="foo"&gt;foo&lt;/li&gt;
  &lt;li id="bar"&gt;bar&lt;/li&gt;
  &lt;li id="baz"&gt;baz&lt;/li&gt;
&lt;/ul&gt;
</pre>
            <p>If we retrieve one of the three list items (for example, through a DOM function or as the context to an event handler), <code>.index()</code> can search for this list item within the set of matched elements:</p>
            <pre>
var listItem = document.getElementById('bar');
alert('Index: ' + $('li').index(listItem));
We get back the zero-based position of the list item:
</pre>
            <p>
               <span class="output">Index: 1</span>
            </p>
            <p>Similarly, if we retrieve a jQuery object consisting of one of the three list items, <code>.index()</code> will search for that list item:</p>
            <pre>
var listItem = $('#bar');
alert('Index: ' + $('li').index(listItem));
</pre>
            <p>We get back the zero-based position of the list item:</p>
            <p>
               <span class="output">Index: 1</span>
            </p>
            <p>Note that if the jQuery collection used as the <code>.index()</code> method's argument contains more than one element, the first element within the matched set of elements will be used.</p>
            <pre>
var listItems = $('li:gt(0)');
alert('Index: ' + $('li').index(listItems));
</pre>
            <p>We get back the zero-based position of the first list item within the matched set:</p>
            <p>
               <span class="output">Index: 1</span>
            </p>
            <p>If we use a string as the <code>.index()</code> method's argument, it is interpreted as a jQuery selector string. The first element among the object's matched elements which also matches this selector is located.</p>
            <pre>
var listItem = $('#bar');
alert('Index: ' + listItem.index('li'));
</pre>
            <p>We get back the zero-based position of the list item:</p>
            <p>
               <span class="output">Index: 1</span>
            </p>
            <p>If we omit the argument, <code>.index()</code> will return the position of the first element within the set of matched elements in relation to its siblings:</p>
            <pre>alert('Index: ' + $('#bar').index();</pre>
            <p>Again, we get back the zero-based position of the list item:</p>
            <p>
               <span class="output">Index: 1</span>
            </p>

         </longdesc>
         <example>
            <desc>On click, returns the index (based zero) of that div in the page.</desc>
         </example>
         <example>
            <desc>Returns the index for the element with ID bar.</desc>
         </example>
         <example>
            <desc>Returns the index for the first item in the jQuery collection.</desc>
         </example>
         <example>
            <desc>Returns the index for the element with ID bar in relation to all &lt;li&gt; elements.</desc>
         </example>
         <example>
            <desc>Returns the index for the element with ID bar in relation to its siblings.</desc>
         </example>
         <example>
            <desc>Returns -1, as there is no element with ID foobar.</desc>
         </example>
      </entry>
      <entry type="method" name="removeData">
         <desc>在元素上移除存放的数据Remove a previously-stored piece of data.</desc>
         <signature>
            <argument name="name">
               <desc>A string naming the piece of data to delete.</desc>
            </argument>
         </signature>
         <longdesc>与$(...).data(name, value)函数作用相反<p>The <code>.removeData()</code> method allows us to remove values that were previously set using <code>.data()</code>. When called with the name of a key, <code>.removeData()</code> deletes that particular value; when called with no arguments, all values are removed.</p>
         </longdesc>
         <example>
            <desc>Set a data store for 2 names then remove one of them.</desc>
         </example>
      </entry>
      <entry type="method" name="data">
         <desc>返回元素上储存的相应名字的数据，可以用data(name, value)来设定。 在元素上存放数据,返回jQuery对象。 在元素上存放一组数据，返回jQuery对象。Store arbitrary data associated with the matched elements.</desc>
         <signature>
            <argument name="key">
               <desc>A string naming the piece of data to set.</desc>
            </argument>
            <argument name="value">
               <desc>The new data value; it can be any Javascript type including Array or Object.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="obj">
               <desc>An object of key-value pairs of data to set.</desc>
            </argument>
         </signature>
         <longdesc>如果jQuery集合指向多个元素，那将只返回第一个元素的对应数据。

这个函数可以用于在一个元素上存取数据而避免了循环引用的风险。jQuery.data是1.2.3版的新功能。你可以在很多地方使用这个函数，另外jQuery UI里经常使用这个函数。

如果不带任何参数，则会把所有数据作为一个JavaScript对象来返回。如果jQuery集合指向多个元素，那将在所有元素上设置对应数据。

这个函数不用建立一个新的expando，就能在一个元素上存放任何格式的数据，而不仅仅是字符串。注意，如果使用这个方法之后，原先存放的所有数据都会被重写！因为这些数据，包括事件处理函数，都是绑定在元素上的。所以以一个obj作为参数使用 .data()方法时，请务必小心！<p>The <code>.data()</code> method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore from memory leaks.</p>
            <p> We can set several distinct values for a single element and retrieve them later:</p>
            <pre>
$('body').data('foo', 52);
$('body').data('bar', { myType: 'test', count: 40 });

$('body').data('foo'); // 52
$('body').data(); // {foo: 52, bar: { myType: 'test', count: 40 }}
</pre>
            <p>Setting an element's data object with <code>.data(obj)</code> replaces all data previously stored with that element. If you are using third-party plugins it may not be advisable to completely replace the element's data object, since plugins may have also set data. Until jQuery 1.4.2, jQuery itself used the <code>.data()</code> method to save information about events that have been bound to the element, using a data item named 'events'.</p>
            <pre>
$('body').data('foo', 52);
$('body').data({one: 1, two: 2});

$('body').data('foo'); // undefined
$('body').data(); // {one: 1, two: 2}
</pre>
            <p>Due to the way browsers interact with plugins and external code, the <code>.data()</code> method cannot be used on <code>&lt;object&gt;</code>, <code>&lt;applet&gt;</code> or <code>&lt;embed&gt;</code> elements.</p>
         </longdesc>
         <example>
            <desc>Store then retrieve a value from the div element.</desc>
         </example>
      </entry>
      <entry type="method" name="data">
         <desc>返回元素上储存的相应名字的数据，可以用data(name, value)来设定。 在元素上存放数据,返回jQuery对象。 在元素上存放一组数据，返回jQuery对象。Returns value at named data store for the element, as set by data(name, value).</desc>
         <signature>
            <argument name="key">
               <desc>Name of the data stored.</desc>
            </argument>
         </signature>
         <signature/>
         <longdesc>如果jQuery集合指向多个元素，那将只返回第一个元素的对应数据。

这个函数可以用于在一个元素上存取数据而避免了循环引用的风险。jQuery.data是1.2.3版的新功能。你可以在很多地方使用这个函数，另外jQuery UI里经常使用这个函数。

如果不带任何参数，则会把所有数据作为一个JavaScript对象来返回。如果jQuery集合指向多个元素，那将在所有元素上设置对应数据。

这个函数不用建立一个新的expando，就能在一个元素上存放任何格式的数据，而不仅仅是字符串。注意，如果使用这个方法之后，原先存放的所有数据都会被重写！因为这些数据，包括事件处理函数，都是绑定在元素上的。所以以一个obj作为参数使用 .data()方法时，请务必小心！
<p>The <code>.data()</code> method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore from memory leaks. We can retrieve several distinct values for a single element one at a time, or as a set:</p>
            <pre>
alert($('body').data('foo'));
alert($('body').data());
</pre>
            <p>The above lines alert the data values that were set on the <code>body</code> element. If nothing was set on that element, an empty string is returned:</p>
            <p>Calling <code>.data()</code> with no parameters retrieves all of the values as a JavaScript object. This object can be safely cached in a variable as long as a new object is not set with <code>.data(obj)</code>.</p>
         </longdesc>
         <example>
            <desc>Get the data named "blah" stored at for an element.</desc>
         </example>
      </entry>
      <entry type="method" name="get">
         <desc>取得所有匹配的 DOM 元素集合。 取得其中一个匹配的元素。 num表示取得第几个匹配的元素。Retrieve the DOM elements matched by the jQuery object.</desc>
         <signature>
            <argument name="index">
               <desc>A zero-based integer indicating which element to retrieve.</desc>
            </argument>
         </signature>
         <longdesc>这是取得所有匹配元素的一种向后兼容的方式（不同于jQuery对象，而实际上是元素数组）。

如果你想要直接操作 DOM 对象而不是 jQuery 对象，这个函数非常有用。这能够让你选择一个实际的DOM 元素并且对他直接操作，而不是通过 jQuery 函数。$(this).get(0)与$(this)[0]等价。<p>The <code>.get()</code> method grants us access to the DOM nodes underlying each jQuery object. Suppose we had a simple unordered list on the page:</p>
            <pre>
&lt;ul&gt;
  &lt;li id="foo"&gt;foo&lt;/li&gt;
  &lt;li id="bar"&gt;bar&lt;/li&gt;
&lt;/ul&gt;
</pre>
            <p>Without a parameter, <code>.get()</code> returns all of the elements:</p>
            <pre>alert($('li').get());</pre>
            <p>All of the matched DOM nodes are returned by this call, contained in a standard array:</p>
            <p>
               <span class="result">[&lt;li id="foo"&gt;, &lt;li id="bar"&gt;]</span>
            </p>
            <p>With an index specified, .get() will retrieve a single element:</p>
            <pre>($('li').get(0));</pre>
            <p>Since the index is zero-based, the first list item is returned:</p>
            <p>
               <span class="output">&lt;li id="foo"&gt;</span>
            </p>
            <p>Each jQuery object also masquerades as an array, so we can use the array dereferencing operator to get at the list item instead:</p>
            <pre>alert($('li')[0]);</pre>
            <p>However, this syntax lacks some of the additional capabilities of .get(), such as specifying a negative index:</p>
            <pre>alert($('li').get(-1));</pre>
            <p>A negative index is counted from the end of the matched set, so this example will return the last item in the list:</p>
            <p>
               <span class="output">&lt;li id="bar"&gt;</span>
            </p>
         </longdesc>
         <example>
            <desc>Selects all divs in the document and returns the DOM Elements as an Array, then uses the built-in reverse-method to reverse that array.</desc>
         </example>
         <example>
            <desc>Gives the tag name of the element clicked on.</desc>
         </example>
      </entry>
      <entry type="method" name="size">
         <desc>jQuery 对象中元素的个数。Return the number of DOM elements matched by the jQuery object.</desc>
         <signature/>
         <longdesc>这个函数的返回值与 jQuery 对象的'&lt;span title="Core/length"&gt;length&lt;/span&gt;' 属性一致。Suppose we had a simple unordered list on the page:
<pre>
&lt;ul&gt;
  &lt;li&gt;foo&lt;/li&gt;
  &lt;li&gt;bar&lt;/li&gt;
&lt;/ul&gt;
</pre>
            <p>We can determine the number of list items by calling <code>.size()</code>:</p>
            <pre>alert('Size: ' + $('li').size());</pre>
            <p>This will alert the count of items:</p>
            <p>
               <span class="output">Size: 2</span>
            </p>
            <p>
               <strong>You should use the <a href="/length/">.length</a> property instead, which is slightly faster.</strong>
            </p>
         </longdesc>
         <example>
            <desc>Count the divs. Click to add more.</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery.noConflict">
         <desc>运行这个函数将变量$的控制权让渡给第一个实现它的那个库。 将$和jQuery的控制权都交还给原来的库。用之前请考虑清楚!Relinquish jQuery's control of the <code>$</code> variable.</desc>
         <signature>
            <argument name="removeAll">
               <desc>A Boolean indicating whether to remove all jQuery variables from the global scope (including jQuery itself).</desc>
            </argument>
         </signature>
         <longdesc>这有助于确保jQuery不会与其他库的$对象发生冲突。

在运行这个函数后，就只能使用jQuery变量访问jQuery对象。例如，在要用到$("div p")的地方，就必须换成jQuery("div p")。

'''注意:'''这个函数必须在你导入jQuery文件之后，并且在导入另一个导致冲突的库'''之前'''使用。当然也应当在其他冲突的库被使用之前，除非jQuery是最后一个导入的。这是相对于简单的 '''noConflict''' 方法更极端的版本，因为这将完全重新定义jQuery。这通常用于一种极端的情况，比如你想要将jQuery嵌入一个高度冲突的环境。'''注意:'''调用此方法后极有可能导致插件失效。<p>Many JavaScript libraries use <code> $</code> as a function or variable name, just as jQuery does. In jQuery's case, <code> $</code> is just an alias for <code>jQuery</code>, so all functionality is available without using <code> $</code>. If we need to use another JavaScript library alongside jQuery, we can return control of <code> $</code> back to the other library with a call to <code>$.noConflict()</code>:</p>
            <pre>
&lt;script type="text/javascript" src="other_lib.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="jquery.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
  $.noConflict();
  // Code that uses other library's $ can follow here.
&lt;/script&gt;
</pre>
            <p>This technique is especially effective in conjunction with the .ready() method's ability to alias the jQuery object, as within callback passed to .ready() we can use $ if we wish without fear of conflicts later:</p>
            <pre>
&lt;script type="text/javascript" src="other_lib.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="jquery.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
  $.noConflict();
  jQuery(document).ready(function($) {
    // Code that uses jQuery's $ can follow here.
  });
  // Code that uses other library's $ can follow here.
&lt;/script&gt;
</pre>
            <p>If necessary, we can free up the <code> jQuery</code> name as well by passing <code>true</code> as an argument to the method. This is rarely necessary, and if we must do this (for example, if we need to use multiple versions of the <code>jQuery</code> library on the same page), we need to consider that most plug-ins rely on the presence of the jQuery variable and may not operate correctly in this situation.</p>
         </longdesc>
         <example>
            <desc>Maps the original object that was referenced by $ back to $.</desc>
         </example>
         <example>
            <desc>Reverts the $ alias and then creates and executes a function to provide the $ as a jQuery alias inside the functions scope. Inside the function the original $ object is not available. This works well for most plugins that don't rely on any other library.  

</desc>
         </example>
         <example>
            <desc>You can chain the jQuery.noConflict() with the shorthand ready for a compact code.
</desc>
         </example>
         <example>
            <desc>Creates a different alias instead of jQuery to use in the rest of the script.</desc>
         </example>
         <example>
            <desc>Completely move jQuery to a new namespace in another object.</desc>
         </example>
      </entry>
      <entry type="selector" name="selected">
         <desc>匹配所有选中的option元素Selects all elements that are selected.</desc>
         <signature/>
         <longdesc>
            <p>The <code>:selected</code> selector works for <code>&lt;option&gt;</code> elements. It does not work for checkboxes or radio inputs; use <code>:checked</code> for them.</p>
         </longdesc>
         <example>
            <desc>Attaches a change event to the select that gets the text for each selected option and writes them in the div.  It then triggers the event for the initial text draw.</desc>
         </example>
      </entry>
      <entry type="selector" name="checked">
         <desc>匹配所有选中的被选中元素(复选框、单选框等，不包括select中的option)Matches all elements that are checked.</desc>
         <signature/>
         <longdesc>
            <p>The <code>:checked</code> selector works for checkboxes and radio buttons. For select elements, use the <code>:selected</code> selector.</p>
         </longdesc>
         <example>
            <desc>Finds all input elements that are checked.</desc>
         </example>
      </entry>
      <entry type="selector" name="disabled">
         <desc>匹配所有不可用元素Selects all elements that are disabled.</desc>
         <signature/>
         <longdesc>
            <p>As with other pseudo-class selectors (those that begin with a ":") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ("*") is implied. In other words, the bare <code>$(':disabled')</code> is equivalent to <code>$('*:disabled')</code>, so <code>$('input:disabled')</code> should be used instead. </p>
         </longdesc>
         <example>
            <desc>Finds all input elements that are disabled.</desc>
         </example>
      </entry>
      <entry type="selector" name="enabled">
         <desc>匹配所有可用元素Selects all elements that are enabled.</desc>
         <signature/>
         <longdesc>
            <p>As with other pseudo-class selectors (those that begin with a ":") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ("*") is implied. In other words, the bare <code>$(':enabled')</code> is equivalent to <code>$('*:enabled')</code>, so <code>$('input:enabled')</code> should be used instead. </p>
         </longdesc>
         <example>
            <desc>Finds all input elements that are enabled.</desc>
         </example>
      </entry>
      <entry type="selector" name="file">
         <desc>匹配所有文件域Selects all elements of type file.</desc>
         <signature/>
         <longdesc>
            <p>As with other pseudo-class selectors (those that begin with a ":") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ("*") is implied. In other words, the bare <code>$(':file')</code> is equivalent to <code>$('*:file')</code>, so <code>$('input:file')</code> should be used instead. </p>
         </longdesc>
         <example>
            <desc>Finds all file inputs.</desc>
         </example>
      </entry>
      <entry type="selector" name="button">
         <desc>匹配所有按钮Selects all button elements and elements of type button.</desc>
         <signature/>
         <longdesc/>
         <example>
            <desc>Finds all button inputs.</desc>
         </example>
      </entry>
      <entry type="selector" name="reset">
         <desc>匹配所有重置按钮Selects all elements of type reset.</desc>
         <signature/>
         <longdesc/>
         <example>
            <desc>Finds all reset inputs.</desc>
         </example>
      </entry>
      <entry type="selector" name="image">
         <desc>匹配所有图像域Selects all elements of type image.</desc>
         <signature/>
         <longdesc/>
         <example>
            <desc>Finds all image inputs.</desc>
         </example>
      </entry>
      <entry type="selector" name="submit">
         <desc>匹配所有提交按钮Selects all elements of type submit.</desc>
         <signature/>
         <longdesc>
            <p>The <code>:submit</code> selector typically applies to button or input elements. Note that some browsers treat <code>&lt;button&gt;</code> element as <code>type="default"</code> implicitly while others (such as Internet Explorer) do not.  </p>
         </longdesc>
         <example>
            <desc>Finds all submit elements that are descendants of a td element.</desc>
         </example>
      </entry>
      <entry type="selector" name="checkbox">
         <desc>匹配所有复选框Selects all elements of type checkbox.</desc>
         <signature/>
         <longdesc>
            <p>
               <code>$(':checkbox')</code> is equivalent to <code>$('[type=checkbox]')</code>. As with other pseudo-class selectors (those that begin with a ":") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ("*") is implied. In other words, the bare <code>$(':checkbox')</code> is equivalent to <code>$('*:checkbox')</code>, so <code>$('input:checkbox')</code> should be used instead. </p>
         </longdesc>
         <example>
            <desc>Finds all checkbox inputs.</desc>
         </example>
      </entry>
      <entry type="selector" name="radio">
         <desc>匹配所有单选按钮Selects all  elements of type radio.</desc>
         <signature/>
         <longdesc>
            <p>
               <code>$(':radio')</code> is equivalent to <code>$('[type=radio]')</code>. As with other pseudo-class selectors (those that begin with a ":") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ("*") is implied. In other words, the bare <code>$(':radio')</code> is equivalent to <code>$('*:radio')</code>, so <code>$('input:radio')</code> should be used instead. </p>
            <p>To select a set of associated radio buttons, you might use: <code>$('input[name=gender]:radio')</code>
            </p>
         </longdesc>
         <example>
            <desc>Finds all radio inputs.</desc>
         </example>
      </entry>
      <entry type="selector" name="password">
         <desc>匹配所有密码框Selects all elements of type password.</desc>
         <signature/>
         <longdesc>
            <p>
               <code>$(':password')</code> is equivalent to <code>$('[type=password]')</code>. As with other pseudo-class selectors (those that begin with a ":") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ("*") is implied. In other words, the bare <code>$(':password')</code> is equivalent to <code>$('*:password')</code>, so <code>$('input:password')</code> should be used instead. </p>
         </longdesc>
         <example>
            <desc>Finds all password inputs.</desc>
         </example>
      </entry>
      <entry type="selector" name="text">
         <desc>匹配所有的单行文本框Selects all elements of type text.</desc>
         <signature/>
         <longdesc>
            <p>
               <code>$(':text')</code> is equivalent to <code>$('[type=text]')</code> and thus selects all <code>&lt;input type="text"&gt;</code> elements. As with other pseudo-class selectors (those that begin with a ":") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ("*") is implied. In other words, the bare <code>$(':text')</code> is equivalent to <code>$('*:text')</code>, so <code>$('input:text')</code> should be used instead. </p>
         </longdesc>
         <example>
            <desc>Finds all text inputs.</desc>
         </example>
      </entry>
      <entry type="selector" name="input">
         <desc>匹配所有 input, textarea, select 和 button 元素Selects all input, textarea, select and button elements.</desc>
         <signature/>
         <longdesc>
            <p>The <code>:input</code> selector basically selects all form controls.</p>
         </longdesc>
         <example>
            <desc>Finds all input elements.</desc>
         </example>
      </entry>
      <entry type="selector" name="only-child">
         <desc>Selects all elements that are the only child of their parent.</desc>
         <signature/>
         <longdesc>
            <p>If the parent has other child elements, nothing is matched.</p>
         </longdesc>
         <example>
            <desc>Finds the button with no siblings in each matched div and modifies look.</desc>
         </example>
      </entry>
      <entry type="selector" name="last-child">
         <desc>Selects all elements that are the last child of their parent.</desc>
         <signature/>
         <longdesc>
            <p>While <a href="/last-selector">:last</a> matches only a single element, <code>:last-child</code> can match more than one: one for each parent.</p>
         </longdesc>
         <example>
            <desc>Finds the last span in each matched div and adds some css plus a hover state.</desc>
         </example>
      </entry>
      <entry type="selector" name="first-child">
         <desc>Selects all elements that are the first child of their parent.</desc>
         <signature/>
         <longdesc>
            <p>While <a href="/first-selector">:first</a> matches only a single element, the <code>:first-child</code> selector can match more than one: one for each parent. This is equivalent to <code>:nth-child(1)</code>.</p>
         </longdesc>
         <example>
            <desc>Finds the first span in each matched div to underline and add a hover state.</desc>
         </example>
      </entry>
      <entry type="selector" name="nth-child">
         <desc>Selects all elements that are the nth-child of their parent.</desc>
         <signature>
            <argument name="index">
               <desc>The index of each child to match, starting with <code>1</code>, the string <code>even</code> or <code>odd</code>, or an equation ( eg. <code>:nth-child(even)</code>, <code>:nth-child(4n)</code> )</desc>
            </argument>
         </signature>
         <longdesc>
            <p>Because jQuery's implementation of <code>:nth-child(n)</code> is strictly derived from the CSS specification, the value of <code>n</code> is "1-indexed", meaning that the counting starts at 1. For all other selector expressions, however, jQuery follows JavaScript's "0-indexed" counting. Therefore, given a single <code>&lt;ul&gt;</code> containing two <code>&lt;li&gt;</code>s, <code>$('li:nth-child(1)')</code> selects the first <code>&lt;li&gt;</code> while  <code>$('li:eq(1)')</code> selects the second.</p>
                
            <p>The <code>:nth-child(n)</code> pseudo-class is easily confused with <code>:eq(n)</code>, even though the two can result in dramatically different matched elements. With <code>:nth-child(n)</code>, all children are counted, regardless of what they are, and the specified element is selected only if it matches the selector attached to the pseudo-class. With <code>:eq(n)</code> only the selector attached to the pseudo-class is counted, not limited to children of any other element, and the (n+1)th one (n is 0-based) is selected.</p> 

            <p>Further discussion of this unusual usage can be found in the <a href="http://www.w3.org/TR/css3-selectors/#nth-child-pseudo">W3C CSS specification</a>.</p>
                    </longdesc>
         <example>
            <desc>Finds the second li in each matched ul and notes it.</desc>
         </example>
         <example>
            <desc>This is a playground to see how the selector works with different strings.  Notice that this is different from the :even and :odd which have no regard for parent and just filter the list of elements to every other one.  The :nth-child, however, counts the index of the child to its particular parent.  In any case, it's easier to see than explain so...</desc>
         </example>
      </entry>
      <entry type="selector" name="attributeContainsPrefix">
         <desc>Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-).</desc>
         <signature>
            <argument name="attribute">
               <desc>An attribute name.</desc>
            </argument>
            <argument name="value">
               <desc>An attribute value. Quotes are optional.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>This selector was introduced into the CSS specification to handle language attributes.</p>
         </longdesc>
         <example>
            <desc>Finds all links with an hreflang attribute that is english.</desc>
         </example>
      </entry>
      <entry type="selector" name="attributeContainsWord">
         <desc>Selects elements that have the specified attribute with a value containing a given word, delimited by spaces.</desc>
         <signature>
            <argument name="attribute">
               <desc>An attribute name.</desc>
            </argument>
            <argument name="value">
               <desc>An attribute value. Quotes are optional.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>This selector matches the test string against each word in the attribute value, where a "word" is defined as a string delimited by whitespace. The selector matches if the test string is exactly equal to any of the words.</p> 
         </longdesc>
         <example>
            <desc>Finds all inputs with a name attribute that contains the word 'man' and sets the value with some text.</desc>
         </example>
      </entry>
      <entry type="selector" name="attributeMultiple">
         <desc>复合属性选择器，需要同时满足多个条件时使用。Matches elements that match all of the specified attribute filters.</desc>
         <signature>
            <argument name="attributeFilter1">
               <desc>An attribute filter.</desc>
            </argument>
            <argument name="attributeFilter2">
               <desc>Another attribute filter, reducing the selection even more</desc>
            </argument>
            <argument name="attributeFilterN">
               <desc>As many more attribute filters as necessary</desc>
            </argument>
         </signature>
         <longdesc/>
         <example>
            <desc>Finds all inputs that have an id attribute and whose name attribute ends with man and sets the value.</desc>
         </example>
      </entry>
      <entry type="selector" name="attributeContains">
         <desc>匹配给定的属性是以包含某些值的元素Selects elements that have the specified attribute with a value containing the a given substring.</desc>
         <signature>
            <argument name="attribute">
               <desc>An attribute name.</desc>
            </argument>
            <argument name="value">
               <desc>An attribute value. Quotes are optional.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>This is the most generous of the jQuery attribute selectors that match against a value. It will select an element if the selector's string appears anywhere within the element's attribute value. Compare this selector with the Attribute Contains Word selector (e.g. [attr~=word]), which is more appropriate in many cases.</p>
         </longdesc>
         <example>
            <desc>Finds all inputs with a name attribute that contains 'man' and sets the value with some text.</desc>
         </example>
      </entry>
      <entry type="selector" name="attributeEndsWith">
         <desc>匹配给定的属性是以某些值结尾的元素Selects elements that have the specified attribute with a value ending exactly with a given string.</desc>
         <signature>
            <argument name="attribute">
               <desc>An attribute name.</desc>
            </argument>
            <argument name="value">
               <desc>An attribute value. Quotes are optional.</desc>
            </argument>
         </signature>
         <longdesc/>
         <example>
            <desc>Finds all inputs with an attribute name that ends with 'letter' and puts text in them.</desc>
         </example>
      </entry>
      <entry type="selector" name="attributeStartsWith">
         <desc>匹配给定的属性是以某些值开始的元素Selects elements that have the specified attribute with a value beginning exactly with a given string.</desc>
         <signature>
            <argument name="attribute">
               <desc>An attribute name.</desc>
            </argument>
            <argument name="value">
               <desc>An attribute value. Quotes are optional.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>This selector can be useful for identifying elements in pages produced by server-side frameworks that produce HTML with systematic element IDs. However it will be slower than using a class selector so leverage classes, if you can, to group like elements.</p>
         </longdesc>
         <example>
            <desc>Finds all inputs with an attribute name that starts with 'news' and puts text in them.</desc>
         </example>
      </entry>
      <entry type="selector" name="attributeNotEqual">
         <desc>匹配所有不含有指定的属性，或者属性不等于特定值的元素。Select elements that either don't have the specified attribute, or do have the specified attribute but not with a certain value.</desc>
         <signature>
            <argument name="attribute">
               <desc>An attribute name.</desc>
            </argument>
            <argument name="value">
               <desc>An attribute value. Quotes are optional.</desc>
            </argument>
         </signature>
         <longdesc>此选择器等价于:not([attr=value])&lt;br&gt;要匹配含有特定属性但不等于特定值的元素，请使用[attr]:not([attr=value])<p>This selector is equivalent to <code>:not([attr=value])</code>.</p> 
         </longdesc>
         <example>
            <desc>Finds all inputs that don't have the name 'newsletter' and appends text to the span next to it.</desc>
         </example>
      </entry>
      <entry type="selector" name="attributeEquals">
         <desc>匹配给定的属性是某个特定值的元素Selects elements that have the specified attribute with a value exactly equal to a certain value.</desc>
         <signature>
            <argument name="attribute">
               <desc>An attribute name.</desc>
            </argument>
            <argument name="value">
               <desc>An attribute value. Quotes are optional.</desc>
            </argument>
         </signature>
         <longdesc/>
         <example>
            <desc>Finds all inputs with name 'newsletter' and changes the text of the span next to it.</desc>
         </example>
      </entry>
      <entry type="selector" name="attributeHas">
         <desc>匹配包含给定属性的元素。注意，在jQuery 1.3中，前导的@符号已经被废除！如果想要兼容最新版本，只需要简单去掉@符号即可。Selects elements that have the specified attribute, with any value. </desc>
         <signature>
            <argument name="attribute">
               <desc>An attribute name.</desc>
            </argument>
         </signature>
         <longdesc/>
         <example>
            <desc>Bind a single click that adds the div id to its text.</desc>
         </example>
      </entry>
      <entry type="selector" name="visible">
         <desc>匹配所有的可见元素Selects all elements that are visible.</desc>
         <signature/>
         <longdesc> 
            <p>Elements can be considered hidden for several reasons:</p>
            <ul>
               <li>They have a CSS <code>display</code> value of <code>none</code>.</li>
               <li>They are form elements with <code>type="hidden"</code>.</li>
               <li>Their width and height are explicitly set to 0.</li>
               <li>An ancestor element is hidden, so the element is not shown on the page.</li>
            </ul>
            <p>Elements with <code>visibility: hidden</code> or <code>opacity: 0</code> are considered to be visible, since they still consume space in the layout. During animations that hide an element, the element is considered to be visible until the end of the animation. During animations to show an element, the element is considered to be visible at the start at the animation.</p>
            <p>How <code>:visible</code> is calculated was changed in jQuery 1.3.2. The <a href="http://docs.jquery.com/Release:jQuery_1.3.2#:visible.2F:hidden_Overhauled">release notes</a> outline the changes in more detail.</p>
         </longdesc>
         <example>
            <desc>Make all visible divs turn yellow on click.</desc>
         </example>
      </entry>
      <entry type="selector" name="hidden">
         <desc>匹配所有的不可见元素，input 元素的 type 属性为 "hidden" 的话也会被匹配到 匹配所有不可见元素，或者type为hidden的元素Selects all elements that are hidden.</desc>
         <signature/>
         <longdesc>
                    <p>Elements can be considered hidden for several reasons:</p>
            <ul>
               <li>They have a CSS <code>display</code> value of <code>none</code>.</li>
               <li>They are form elements with <code>type="hidden"</code>.</li>
               <li>Their width and height are explicitly set to 0.</li>
               <li>An ancestor element is hidden, so the element is not shown on the page.</li>
            </ul>
            <p>Elements with <code>visibility: hidden</code> or <code>opacity: 0</code> are considered to be visible, since they still consume space in the layout. During animations that hide an element, the element is considered to be visible until the end of the animation. During animations to show an element, the element is considered to be visible at the start at the animation.</p>
            <p>How <code>:hidden</code> is determined was changed in jQuery 1.3.2. An element is assumed to be hidden if it or any of its parents consumes no space in the document. CSS visibility isn't taken into account (therefore <code>$(elem).css('visibility','hidden').is(':hidden') == false</code>). The <a href="http://docs.jquery.com/Release:jQuery_1.3.2#:visible.2F:hidden_Overhauled">release notes</a> outline the changes in more detail.</p>
         </longdesc>
         <example>
            <desc>Shows all hidden divs and counts hidden inputs.</desc>
         </example>
      </entry>
      <entry type="selector" name="parent">
         <desc>匹配含有子元素或者文本的元素Select all elements that are the parent of another element, including text nodes.</desc>
         <signature/>
         <longdesc>
            <p>This is the inverse of <code>:empty</code>. </p>
            <p>One important thing to note regarding the use of <code>:parent</code> (and <code>:empty</code>) is that child elements include text nodes.</p>
            <p>The W3C recommends that the <code>&lt;p&gt;</code> element have at least one child node, even if that child is merely text (see <a href="http://www.w3.org/TR/html401/struct/text.html#edef-P">http://www.w3.org/TR/html401/struct/text.html#edef-P</a>). Some other elements, on the other hand, are empty (i.e. have no children) by definition:<code> &lt;input&gt;</code>, <code>&lt;img&gt;</code>, <code>&lt;br&gt;</code>, and <code>&lt;hr&gt;</code>, for example.</p>
    
         </longdesc>
         <example>
            <desc>Finds all tds with children, including text.</desc>
         </example>
      </entry>
      <entry type="selector" name="has">
         <desc>匹配含有选择器所匹配的元素的元素Selects elements which contain at least one element that matches the specified selector.</desc>
         <signature/>
         <longdesc>
            <p>The expression <code>$('div:has(p)')</code> matches a <code>&lt;div&gt;</code> if a <code>&lt;p&gt;</code> exists anywhere among its descendants, not just as a direct child.</p> 
         </longdesc>
         <example>
            <desc>Adds the class "test" to all divs that have a paragraph inside of them.</desc>
         </example>
      </entry>
      <entry type="selector" name="empty">
         <desc>匹配所有不包含子元素或者文本的空元素Select all elements that have no children (including text nodes).</desc>
         <signature/>
         <longdesc>
            <p>This is the inverse of <code>:parent</code>. </p>
            <p>One important thing to note with :empty (and :parent) is that child elements include text nodes.</p>
            <p>The W3C recommends that the <code>&lt;p&gt;</code> element have at least one child node, even if that child is merely text (see http://www.w3.org/TR/html401/struct/text.html#edef-P). Some other elements, on the other hand, are empty (i.e. have no children) by definition: &lt;input&gt;, &lt;img&gt;, &lt;br&gt;, and &lt;hr&gt;, for example.</p>
         </longdesc>
         <example>
            <desc>Finds all elements that are empty - they don't have child elements or text.</desc>
         </example>
      </entry>
      <entry type="selector" name="contains">
         <desc>匹配包含给定文本的元素Select all elements that contain the specified text.</desc>
         <signature/>
         <longdesc>
            <p>The matching text can appear directly within the selected element, in any of that element's descendants, or a combination thereof. As with attribute value selectors, text inside the parentheses of <code>:contains()</code> can be written as bare words or surrounded by quotation marks. The text must have matching case to be selected.</p>
         </longdesc>
         <example>
            <desc>Finds all divs containing "John" and underlines them.</desc>
         </example>
      </entry>
      <entry type="selector" name="animated">
         <desc>匹配所有正在执行动画效果的元素Select all elements that are in the progress of an animation at the time the selector is run.</desc>
         <signature/>
         <longdesc/>
         <example>
            <desc>Change the color of any div that is animated.</desc>
         </example>
      </entry>
      <entry type="selector" name="header">
         <desc>匹配如 h1, h2, h3之类的标题元素Selects all elements that are headers, like h1, h2, h3 and so on.</desc>
         <signature/>
         <longdesc/>
         <example>
            <desc>Adds a background and text color to all the headers on the page.</desc>
         </example>
      </entry>
      <entry type="selector" name="lt">
         <desc>匹配所有小于给定索引值的元素Select all elements at an index less than <code>index</code> within the matched set.</desc>
         <signature>
            <argument name="index">
               <desc>Zero-based index.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>
               <strong>index-related selectors</strong>
            </p>
            <p>The index-related selectors (including this "less than" selector) filter the set of elements that have matched the expressions that precede them. They narrow the set down based on the order of the elements within this matched set. For example, if elements are first selected with a class selector (<code>.myclass</code>) and four elements are returned, these elements are given indices 0 through 3 for the purposes of these selectors.</p>
            <p>Note that since JavaScript arrays use <em>0-based indexing</em>, these selectors reflect that fact. This is why <code>$('.myclass:lt(1)')</code> selects the first element in the document with the class <code>myclass</code>, rather than selecting no elements. In contrast, <code>:nth-child(n)</code> uses <em>1-based indexing</em> to conform to the CSS specification.</p>
         </longdesc>
         <example>
            <desc>Finds TDs less than the one with the 4th index (TD#4).</desc>
         </example>
      </entry>
      <entry type="selector" name="gt">
         <desc>匹配所有大于给定索引值的元素Select all elements at an index greater than <code>index</code> within the matched set.</desc>
         <signature/>
         <longdesc>
            <p>
               <strong>index-related selectors</strong>
            </p>
                  <p>The index-related selector expressions (including this "greater than" selector) filter the set of elements that have matched the expressions that precede them. They narrow the set down based on the order of the elements within this matched set. For example, if elements are first selected with a class selector (<code>.myclass</code>) and four elements are returned, these elements are given indices 0 through 3 for the purposes of these selectors.</p>
                <p>Note that since JavaScript arrays use <em>0-based indexing</em>, these selectors reflect that fact. This is why <code>$('.myclass:gt(1)')</code> selects elements after the second element in the document with the class <code>myclass</code>, rather than after the first. In contrast, <code>:nth-child(n)</code> uses <em>1-based indexing</em> to conform to the CSS specification.</p>
                </longdesc>
         <example>
            <desc>Finds TD #5 and higher. Reminder: the indexing starts at 0.</desc>
         </example>
      </entry>
      <entry type="selector" name="eq">
         <desc>匹配一个给定索引值的元素Select the element at index <code>n</code> within the matched set.</desc>
         <signature>
            <argument name="index">
               <desc>Zero-based index of the element to match.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>The index-related selectors (<code>:eq()</code>, <code>:lt()</code>, <code>:gt()</code>, <code>:even</code>, <code>:odd</code>) filter the set of elements that have matched the expressions that precede them. They narrow the set down based on the order of the elements within this matched set. For example, if elements are first selected with a class selector (<code>.myclass</code>) and four elements are returned, these elements are given indices <code>0</code> through <code>3</code> for the purposes of these selectors.</p>
            <p>Note that since JavaScript arrays use <em>0-based indexing</em>, these selectors reflect that fact. This is why <code>$('.myclass:eq(1)')</code> selects the second element in the document with the class myclass, rather than the first. In contrast, <code>:nth-child(n)</code> uses <em>1-based indexing</em> to conform to the CSS specification.</p>
         </longdesc>
         <example>
            <desc>Finds the third td.</desc>
         </example>
      </entry>
      <entry type="selector" name="odd">
         <desc>匹配所有索引值为奇数的元素，从 0 开始计数Selects odd elements, zero-indexed.  See also <a href="/Selectors/even">even</a>.</desc>
         <signature/>
         <longdesc>
            <p>In particular, note that the <em>0-based indexing</em> means that, counter-intuitively, <code>:odd</code> selects the second element, fourth element, and so on within the matched set.</p>
         </longdesc>
         <example>
            <desc>Finds odd table rows, matching the second, fourth and so on (index 1, 3, 5 etc.).</desc>
         </example>
      </entry>
      <entry type="selector" name="even">
         <desc>匹配所有索引值为偶数的元素，从 0 开始计数Selects even elements, zero-indexed.  See also <a href="/Selectors/odd">odd</a>.</desc>
         <signature/>
         <longdesc>
            <p>In particular, note that the <em>0-based indexing</em> means that, counter-intuitively, <code>:even</code> selects the first element, third element, and so on within the matched set.</p>
         </longdesc>
         <example>
            <desc>Finds even table rows, matching the first, third and so on (index 0, 2, 4 etc.).</desc>
         </example>
      </entry>
      <entry type="selector" name="not">
         <desc>去除所有与给定选择器匹配的元素Selects all elements that do not match the given selector.</desc>
         <signature>
            <argument name="selector">
               <desc>A selector with which to filter by.</desc>
            </argument>
         </signature>
         <longdesc>在jQuery 1.3中，已经支持复杂选择器了（例如:not(div a) 和 :not(div,a)）<p>All selectors are accepted inside <code>:not()</code>,  for example: <code>:not(div a)</code> and <code>:not(div,a)</code>.</p>
         </longdesc>
         <example>
            <desc>Finds all inputs that are not checked and highlights the next sibling span.  Notice there is no change when clicking the checkboxes since no click events have been linked.</desc>
         </example>
      </entry>
      <entry type="selector" name="last">
         <desc>匹配找到的最后一个元素Selects the last matched element.</desc>
         <signature/>
         <longdesc>
            <p>Note that <code>:last</code> selects a single element by filtering  the current jQuery collection and matching the last element within it.</p>
         </longdesc>
         <example>
            <desc>Finds the last table row.</desc>
         </example>
      </entry>
      <entry type="selector" name="first">
         <desc>匹配找到的第一个元素Selects the first matched element.</desc>
         <signature/>
         <longdesc>
            <p>The <code>:first</code> pseudo-class is equivalent to <code>:eq(0)</code>. It could also be written as <code>:lt(1)</code>. While this matches only a single element, <a href="first-child-selector">:first-child</a> can match more than one: One for each parent.</p>
         </longdesc>
         <example>
            <desc>Finds the first table row.</desc>
         </example>
      </entry>
      <entry type="selector" name="next siblings">
         <desc>Selects all sibling elements that follow after the "prev" element, have the same parent, and match the filtering "siblings" selector.</desc>
         <signature>
            <argument name="prev">
               <desc>Any valid selector.</desc>
            </argument>
            <argument name="siblings">
               <desc>A selector to filter elements that are the following siblings of the first selector.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>The notable difference between (<code>prev + next</code>) and (<code>prev ~ siblings</code>) is their respective reach. While the former reaches only to the immediately following sibling element, the latter extends that reach to all following sibling elements.</p>
         </longdesc>
         <example>
            <desc>Finds all divs that are siblings after the element with #prev as its id.  Notice the span isn't selected since it is not a div and the "niece" isn't selected since it is a child of a sibling, not an actual sibling.</desc>
         </example>
      </entry>
      <entry type="selector" name="next adjacent">
         <desc>Selects all next elements matching "next" that are immediately preceded by a sibling "prev".</desc>
         <signature>
            <argument name="prev">
               <desc>Any valid selector.</desc>
            </argument>
            <argument name="next">
               <desc>A selector to match the element that is next to the first selector.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>One important point to consider with both the next adjacent sibling selector (<code>prev + next</code>) and the general sibling selector (<code>prev ~ siblings</code>) is that the elements on either side of the combinator must share the same parent.</p>
         </longdesc>
         <example>
            <desc>Finds all inputs that are next to a label.</desc>
         </example>
      </entry>
      <entry type="selector" name="child">
         <desc>在给定的父元素下匹配所有的子元素Selects all direct child elements specified by "child" of elements specified by "parent".</desc>
         <signature>
            <argument name="parent">
               <desc>Any valid selector.</desc>
            </argument>
            <argument name="child">
               <desc>A selector to filter the child elements.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>As a CSS selector, the child combinator is supported by all modern web browsers including Safari, Firefox, Opera, Chrome, and Internet Explorer 7 and above, but notably not by Internet Explorer versions 6 and below. However, in jQuery, this selector (along with all others) works across all supported browsers, including IE6.</p>
            <p>The child combinator (E <strong>&gt;</strong> F) can be thought of as a more specific form of the descendant combinator (E F) in that it selects only first-level descendants.</p>
         </longdesc>
         <example>
            <desc>Places a border around all list items that are children of &lt;ul class="topnav"&gt; .</desc>
         </example>
      </entry>
      <entry type="selector" name="descendant">
         <desc>在给定的祖先元素下匹配所有的后代元素Selects all elements that are descendants of a given ancestor.</desc>
         <signature>
            <argument name="ancestor">
               <desc>Any valid selector.</desc>
            </argument>
            <argument name="descendant">
               <desc>A selector to filter the descendant elements.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>A descendant of an element could be a child, grandchild, great-grandchild, and so on, of that element.</p>
         </longdesc>
         <example>
            <desc>Finds all input descendants of forms.</desc>
         </example>
      </entry>
      <entry type="selector" name="multiple">
         <desc>将每一个选择器匹配到的元素合并后一起返回。Selects the combined results of all the specified selectors.</desc>
         <signature>
            <argument name="selector1">
               <desc>Any valid selector.</desc>
            </argument>
            <argument name="selector2">
               <desc>Another valid selector.</desc>
            </argument>
            <argument name="selectorN">
               <desc>As many more valid selectors as you like.</desc>
            </argument>
         </signature>
         <longdesc>你可以指定任意多个选择器，并将匹配到的元素合并到一个结果内。<p>You can specify any number of selectors to combine into a single result.  This multiple expression combinator is an efficient way to select disparate elements. The order of the DOM elements in the returned jQuery object may not be identical, as they will be in document order. An alternative to this combinator is the .<a href="/add">add()</a> method.</p>
         </longdesc>
         <example>
            <desc>Finds the elements that match any of these three selectors.</desc>
         </example>
         <example>
            <desc>Show the order in the jQuery object.</desc>
         </example>
      </entry>
      <entry type="selector" name="all">
         <desc>匹配所有元素Selects all elements.</desc>
         <signature/>
         <longdesc>多用于结合上下文来搜索。<p>Caution: The all, or universal, selector is extremely slow, except when used by itself.</p> 
         </longdesc>
         <example>
            <desc>Finds every element (including head, body, etc) in the document.</desc>
         </example>
         <example>
            <desc>A common way to select all elements is to find within document.body so elements like head, script, etc are left out.</desc>
         </example>
      </entry>
      <entry type="selector" name="class">
         <desc>根据给定的类匹配元素。Selects all elements with the given class. </desc>
         <signature>
            <argument name="class">
               <desc>A class to search for. An element can have multiple classes; only one of them must match.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>For class selectors, jQuery uses JavaScript's native <code>getElementsByClassName()</code> function if the browser supports it.</p>
                
         </longdesc>
         <example>
            <desc>Finds the element with the class "myClass".</desc>
         </example>
         <example>
            <desc>Finds the element with both "myclass" and "otherclass" classes.</desc>
         </example>
      </entry>
      <entry type="selector" name="element">
         <desc>根据给定的元素名匹配所有元素Selects all elements with the given tag name.</desc>
         <signature>
            <argument name="element">
               <desc>An element to search for. Refers to the tagName of DOM nodes.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>JavaScript's <code>getElementsByTagName()</code> function is called to return the appropriate elements when this expression is used.</p> 
         </longdesc>
         <example>
            <desc>Finds every DIV element.</desc>
         </example>
      </entry>
      <entry type="selector" name="id">
         <desc>根据给定的ID匹配一个元素。Selects a single element with the given id attribute. </desc>
         <signature>
            <argument name="id">
               <desc>An ID to search for, specified via the id attribute of an element.</desc>
            </argument>
         </signature>
         <longdesc>如果选择器中包含特殊字符，可以用两个斜杠转义。参见示例。
                   <p>For id selectors, jQuery uses the JavaScript function <code>document.getElementById()</code>, which is extremely efficient. When another selector is attached to the id selector, such as <code>h2#pageTitle</code>, jQuery performs an additional check before identifying the element as a match.</p>
                   <blockquote>
               <p>As always, remember that as a developer, your time is typically the most valuable resource. Do not focus on optimization of selector speed unless it is clear that performance needs to be improved.</p>
            </blockquote>
                   <p>Each <code>id</code> value must be used only once within a document. If more than one element has been assigned the same ID, queries that use that ID will only select the first matched element in the DOM. This behavior should not be relied on, however; a document with more than one element using the same ID is invalid.</p>
                <p>If the id contains characters like periods or colons you have to <a href="http://docs.jquery.com/Frequently_Asked_Questions#How_do_I_select_an_element_by_an_ID_that_has_characters_used_in_CSS_notation.3F">escape those characters with backslashes</a>.</p>
                </longdesc>
         <example>
            <desc>Finds the element with the id "myDiv".</desc>
         </example>
         <example>
            <desc>Finds the element with the id "myID.entry[1]".  See how certain characters must be escaped with backslashes.</desc>
         </example>
      </entry>
      <entry type="method" name="scroll">
         <desc>在每一个匹配元素的scroll事件中绑定一个处理函数。Bind an event handler to the "scroll" JavaScript event, or trigger that event on an element.</desc>
         <signature>
            <argument name="handler(eventObject)">
               <desc>A function to execute each time the event is triggered.</desc>
            </argument>
         </signature>
         <signature/>
         <longdesc>当滚动条发生变化时触发
<p>This method is a shortcut for <code>.bind('scroll', handler)</code> in the first variation, and <code>.trigger('scroll')</code> in the second.</p>
            <p>The <code>scroll</code> event is sent to an element when the user scrolls to a different place in the element. It applies to <code>window</code> objects, but also to scrollable frames and elements with the <code>overflow </code>CSS property set to <code>scroll</code> (or <code>auto</code> when the element's explicit height is less than the height of its contents).</p>
            <p>For example, consider the HTML:</p>
            <pre>&lt;div id="target" style="overflow: scroll; width: 200px; height: 100px;"&gt;
  Lorem ipsum dolor sit amet, consectetur adipisicing elit,
  sed do eiusmod tempor incididunt ut labore et dolore magna
  aliqua. Ut enim ad minim veniam, quis nostrud exercitation
  ullamco laboris nisi ut aliquip ex ea commodo consequat.
  Duis aute irure dolor in reprehenderit in voluptate velit
  esse cillum dolore eu fugiat nulla pariatur. Excepteur
  sint occaecat cupidatat non proident, sunt in culpa qui
  officia deserunt mollit anim id est laborum.
&lt;/div&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;
&lt;div id="log"&gt;&lt;/div&gt;</pre>
            <p>The style definition is present to make the target element small enough to be scrollable:</p>
 
            <p class="image">
               <img src="/images/0042_05_11.png" alt=""/>
            </p>
            <p>The <code>scroll</code> event handler can be bound to this element:</p>
            <pre>$('#target').scroll(function() {
  $('#log').append('&lt;div&gt;Handler for .scroll() called.&lt;/div&gt;');
});</pre>
            <p>Now when the user scrolls the text up or down, one or more messages are appended to <code>&lt;div id="log"&gt;&lt;/div&gt;</code>:</p>
            <p>
               <span class="output">Handler for .scroll() called.</span>
            </p>
            <p>We can trigger the event manually when another element is clicked:</p>
            <pre>$('#other').click(function() {
  $('#target').scroll();
});</pre>
            <p>After this code executes, clicks on <span class="output">Trigger the handler</span> will also append the message.</p>
            <p>A <code>scroll</code> event is sent whenever the element's scroll position changes, regardless of the cause. A mouse click or drag on the scroll bar, dragging inside the element, pressing the arrow keys, or using the mouse's scroll wheel could cause this event.</p>
         </longdesc>
         <example>
            <desc>To do something when your page is scrolled:</desc>
         </example>
      </entry>
      <entry type="method" name="resize">
         <desc>在每一个匹配元素的resize事件中绑定一个处理函数。Bind an event handler to the "resize" JavaScript event, or trigger that event on an element.</desc>
         <signature>
            <argument name="handler(eventObject)">
               <desc>A function to execute each time the event is triggered.</desc>
            </argument>
         </signature>
         <signature/>
         <longdesc>当文档窗口改变大小时触发
<p>This method is a shortcut for <code>.bind('resize', handler)</code> in the first variation, and <code>.trigger('resize')</code> in the second.</p>
            <p>The <code>resize</code> event is sent to the <code>window</code> element when the size of the browser window changes:</p>
            <pre>$(window).resize(function() {
  $('#log').append('&lt;div&gt;Handler for .resize() called.&lt;/div&gt;');
});
</pre>
            <p>Now whenever the browser window's size is changed, the message is appended to &lt;div id="log"&gt; one or more times, depending on the browser.</p>
            <p>Code in a <code>resize</code> handler should never rely on the number of times the handler is called. Depending on implementation, <code>resize</code> events can be sent continuously as the resizing is in progress (the typical behavior in Internet Explorer and WebKit-based browsers such as Safari and Chrome), or only once at the end of the resize operation (the typical behavior in Firefox).</p>
         </longdesc>
         <example>
            <desc>To see the window width while (or after) it is resized, try:</desc>
         </example>
      </entry>
      <entry type="method" name="dequeue">
         <desc>从队列最前端移除一个队列函数，并执行他。Execute the next function on the queue for the matched elements.</desc>
         <signature>
            <argument name="queueName">
               <desc>A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>When <code>.dequeue()</code> is called, the next function on the queue is removed from the queue, and then executed. This function should in turn (directly or indirectly) cause <code>.dequeue()</code> to be called, so that the sequence can continue.</p>
         </longdesc>
         <example>
            <desc>Use dequeue to end a custom queue function which allows the queue to keep going.</desc>
         </example>
      </entry>
      <entry type="method" name="queue">
         <desc>返回指向第一个匹配元素的队列(将是一个函数数组) 在匹配的元素的队列最后添加一个函数 将匹配元素的队列用新的一个队列来代替(函数数组).Show the queue of functions to be executed on the matched elements.</desc>
         <signature>
            <argument name="queueName">
               <desc>A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue.</desc>
            </argument>
         </signature>
         <longdesc/>
         <example>
            <desc>Show the length of the queue.</desc>
         </example>
      </entry>
      <entry type="method" name="queue">
         <desc>返回指向第一个匹配元素的队列(将是一个函数数组) 在匹配的元素的队列最后添加一个函数 将匹配元素的队列用新的一个队列来代替(函数数组).Manipulate the queue of functions to be executed on the matched elements.</desc>
         <signature>
            <argument name="queueName">
               <desc>A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue.</desc>
            </argument>
            <argument name="newQueue">
               <desc>An array of functions to replace the current queue contents.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="queueName">
               <desc>A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue.</desc>
            </argument>
            <argument name="callback( next )">
               <desc>The new function to add to the queue, with a function to call that will dequeue the next item.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>Every element can have one to many queues of functions attached to it by jQuery. In most applications, only one queue (called <code>fx</code>) is used. Queues allow a sequence of actions to be called on an element asynchronously, without halting program execution. The typical example of this is calling multiple animation methods on an element. For example:</p>
				        <pre>$('#foo').slideUp().fadeIn();</pre>
				        <p>When this statement is executed, the element begins its sliding animation immediately, but the fading transition is placed on the <code>fx</code> queue to be called only once the sliding transition is complete.</p>
				        <p>The <code>.queue()</code> method allows us to directly manipulate this queue of functions. Calling <code>.queue()</code> with a callback is particularly useful; it allows us to place a new function at the end of the queue.</p>
				        <p>This feature is similar to providing a callback function with an animation method, but does not require the callback to be given at the time the animation is performed.</p>
            <pre>$('#foo').slideUp();
$('#foo').queue(function() {
  alert('Animation complete.');
  $(this).dequeue();
});</pre>
            <p>This is equivalent to:</p>
            <pre>$('#foo').slideUp(function() {
  alert('Animation complete.');
});</pre>
            <p>Note that when adding a function with <code>.queue()</code>, we should ensure that <code>.dequeue()</code> is eventually called so that the next function in line executes.</p>
            <p>In jQuery 1.4 the function that's called is passed in another function, as the first argument, that when called automatically dequeues the next item and keeps the queue moving. You would use it like so:</p>
            <pre>$("#test").queue(function(next) {
    // Do some stuff...
    next();
});</pre>
         </longdesc>
         <example>
            <desc>Queue a custom function.</desc>
         </example>
         <example>
            <desc>Set a queue array to delete the queue.</desc>
         </example>
      </entry>
      <entry type="method" name="keyup">
         <desc>触发每一个匹配元素的keyup事件 在每一个匹配元素的keyup事件中绑定一个处理函数。Bind an event handler to the "keyup" JavaScript event, or trigger that event on an element.</desc>
         <signature>
            <argument name="handler(eventObject)">
               <desc>A function to execute each time the event is triggered.</desc>
            </argument>
         </signature>
         <signature/>
         <longdesc>这个函数会调用执行绑定到keyup事件的所有函数，包括浏览器的默认行为。可以通过在某个绑定的函数中返回false来防止触发浏览器的默认行为。keyup事件会在按键释放时触发。keyup 事件会在键盘按下时触发。
<p>This method is a shortcut for <code>.bind('keyup', handler)</code> in the first variation, and <code>.trigger('keyup')</code> in the second.</p>
            <p>The <code>keyup</code> event is sent to an element when the user releases a key on the keyboard. It can be attached to any element, but the event is only sent to the element that has the focus. Focusable elements can vary between browsers, but form elements can always get focus so are reasonable candidates for this event type.</p>
            <p>For example, consider the HTML:</p>
            <pre>&lt;form&gt;
  &lt;input id="target" type="text" value="Hello there" /&gt;
&lt;/form&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;</pre>
            <p>The event handler can be bound to the input field:</p>
            <pre>$('#target').keyup(function() {
  alert('Handler for .keyup() called.');
});
</pre>
            <p>Now when the insertion point is inside the field and a key is pressed and released, the alert is displayed:</p>
            <p>
               <span class="output">Handler for .keyup() called.</span>
            </p>
            <p>We can trigger the event manually when another element is clicked:</p>
            <pre>$('#other').click(function() {
  $('#target').keyup();
});</pre>
            <p>After this code executes, clicks on <span class="output">Trigger the handler</span> will also alert the message.</p>
            <p>If key presses anywhere need to be caught (for example, to implement global shortcut keys on a page), it is useful to attach this behavior to the <code>document</code> object. Because of event bubbling, all key presses will make their way up the DOM to the <code>document</code> object unless explicitly stopped.</p>
            <p>To determine which key was pressed, we can examine the event object that is passed to the handler function. While browsers use differing attributes to store this information, jQuery normalizes the <code>.which</code> attribute so we can reliably use it to retrieve the key code. This code corresponds to a key on the keyboard, including codes for special keys such as arrows. For catching actual text entry, <code>.keypress()</code> may be a better choice.</p>
         </longdesc>
         <example>
            <desc>Show the event object for the keyup handler when a key is released in the input.</desc>
         </example>
      </entry>
      <entry type="method" name="keypress">
         <desc>触发每一个匹配元素的keypress事件 在每一个匹配元素的keypress事件中绑定一个处理函数。Bind an event handler to the "keypress" JavaScript event, or trigger that event on an element.</desc>
         <signature>
            <argument name="handler(eventObject)">
               <desc>A function to execute each time the event is triggered.</desc>
            </argument>
         </signature>
         <signature/>
         <longdesc>T这个函数会调用执行绑定到keydown事件的所有函数，包括浏览器的默认行为。可以通过在某个绑定的函数中返回false来防止触发浏览器的默认行为。keydown事件会在键盘按下时触发keypress事件会在敲击按键时触发。 敲击按键的定义为按下并抬起同一个按键。这几个事件发生的顺序是:keydown

keypress

keyup
<p>This method is a shortcut for <code>.bind('keypress', handler)</code> in the first variation, and <code>.trigger('keypress')</code> in the second.</p>
            <p>The <code>keypress</code> event is sent to an element when the browser registers keyboard input. This is similar to the <code>keydown</code> event, except in the case of key repeats. If the user presses and holds a key, a <code>keydown </code>event is triggered once, but separate <code>keypress</code> events are triggered for each inserted character. In addition, modifier keys (such as Shift) cause <code>keydown</code> events but not <code>keypress</code> events.</p>
            <p>A <code>keypress</code> event handler can be attached to any element, but the event is only sent to the element that has the focus. Focusable elements can vary between browsers, but form elements can always get focus so are reasonable candidates for this event type.</p>
            <p>For example, consider the HTML:</p>
            <pre>&lt;form&gt;
	&lt;fieldset&gt;
  	&lt;input id="target" type="text" value="Hello there" /&gt;
	&lt;/fieldset&gt;
&lt;/form&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;</pre>
            <p>The event handler can be bound to the input field:</p>
            <pre>$('#target').keypress(function() {
  alert('Handler for .keypress() called.');
});</pre>
            <p>Now when the insertion point is inside the field and a key is pressed, the alert is displayed:</p>
            <p>
               <span class="output">Handler for .keypress() called.</span>
            </p>
            <p>The message repeats if the key is held down. We can trigger the event manually when another element is clicked:</p>
            <pre>$('#other').click(function() {
  $('#target').keypress();
});</pre>
            <p>After this code executes, clicks on <span class="output">Trigger the handler</span> will also alert the message.</p>
            <p>If key presses anywhere need to be caught (for example, to implement global shortcut keys on a page), it is useful to attach this behavior to the <code>document</code> object. Because of event bubbling, all key presses will make their way up the DOM to the <code>document</code> object unless explicitly stopped.</p>
            <p>To determine which character was entered, we can examine the event object that is passed to the handler function. While browsers use differing attributes to store this information, jQuery normalizes the <code>.which</code> attribute so we can reliably use it to retrieve the character code.</p>
            <p>Note that <code>keydown</code> and <code>keyup</code> provide a code indicating which key is pressed, while <code>keypress</code> indicates which character was entered. For example, a lowercase "a" will be reported as 65 by <code>keydown</code> and <code>keyup</code>, but as 97 by <code>keypress</code>. An uppercase "A" is reported as 65 by all events. Because of this distinction, when catching special keystrokes such as arrow keys, <code>.keydown()</code> or <code>.keyup()</code> is a better choice.</p>
         </longdesc>
         <example>
            <desc>Show the event object for the keypress handler when a key is pressed in the input.</desc>
         </example>
      </entry>
      <entry type="method" name="submit">
         <desc>触发每一个匹配元素的submit事件。 在每一个匹配元素的submit事件中绑定一个处理函数。Bind an event handler to the "submit" JavaScript event, or trigger that event on an element.</desc>
         <signature>
            <argument name="handler(eventObject)">
               <desc>A function to execute each time the event is triggered.</desc>
            </argument>
         </signature>
         <signature/>
         <longdesc>这个函数会调用执行绑定到submit事件的所有函数，包括浏览器的默认行为。可以通过在某个绑定的函数中返回false来防止触发浏览器的默认行为。submit事件将会在表单提交时触发
<p>This method is a shortcut for <code>.bind('submit', handler)</code> in the first variation, and <code>.trigger('submit')</code> in the second.</p>
            <p>The <code>submit</code> event is sent to an element when the user is attempting to submit a form. It can only be attached to <code>&lt;form&gt;</code> elements. Forms can be submitted either by clicking an explicit <code>&lt;input type="submit"&gt;</code>, <code>&lt;input type="image"&gt;</code>, or <code>&lt;button type="submit"&gt;</code>, or by pressing <kbd>Enter</kbd> when certain form element has focus.</p>
            <blockquote>
               <p>Depending on the browser, the Enter key may only cause a form submission if the form has exactly one text field, or only when there is a submit button present. The interface should not rely on a particular behavior for this key unless the issue is forced by observing the keypress event for presses of the Enter key.</p>
            </blockquote>
            <p>For example, consider the HTML:</p>
            <pre>&lt;form id="target" action="destination.html"&gt;
  &lt;input type="text" value="Hello there" /&gt;
  &lt;input type="submit" value="Go" /&gt;
&lt;/form&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;</pre>
            <p>The event handler can be bound to the form:</p>
            <pre>$('#target').submit(function() {
  alert('Handler for .submit() called.');
  return false;
});</pre>
            <p>Now when the form is submitted, the message is alerted. This happens prior to the actual submission, so we can cancel the submit action by calling <code>.preventDefault()</code> on the event object or by returning <code>false</code> from our handler. We can trigger the event manually when another element is clicked:</p>
            <pre>$('#other').click(function() {
  $('#target').submit();
});</pre>
            <p>After this code executes, clicks on <span class="output">Trigger the handler</span> will also display the message. In addition, the default <code>submit</code> action on the form will be fired, so the form will be submitted.</p>
            <p>The JavaScript <code>submit</code> event does not bubble in Internet Explorer. However, scripts that rely on event delegation with the <code>submit</code> event will work consistently across browsers as of jQuery 1.4, which has normalized the event's behavior. </p>

         </longdesc>
         <example>
            <desc>If you'd like to prevent forms from being submitted unless a flag variable is set, try:</desc>
         </example>
         <example>
            <desc>If you'd like to prevent forms from being submitted unless a flag variable is set, try:</desc>
         </example>
         <example>
            <desc>To trigger the submit event on the first form on the page, try:</desc>
         </example>
      </entry>
      <entry type="method" name="select">
         <desc>触发每一个匹配元素的select事件 在每一个匹配元素的select事件中绑定一个处理函数。Bind an event handler to the "select" JavaScript event, or trigger that event on an element.</desc>
         <signature>
            <argument name="handler(eventObject)">
               <desc>A function to execute each time the event is triggered.</desc>
            </argument>
         </signature>
         <signature/>
         <longdesc>这个函数会调用执行绑定到select事件的所有函数，包括浏览器的默认行为。可以通过在某个绑定的函数中返回false来防止触发浏览器的默认行为。当用户在文本框(包括input和textarea)中选中某段文本时会触发select事件。
<p>This method is a shortcut for <code>.bind('select', handler)</code> in the first variation, and <code>.trigger('select')</code> in the second.</p>
            <p>The <code>select</code> event is sent to an element when the user makes a text selection inside it. This event is limited to <code>&lt;input type="text"&gt;</code> fields and <code>&lt;textarea&gt;</code> boxes.</p>
            <p>For example, consider the HTML:</p>
            <pre>&lt;form&gt;
  &lt;input id="target" type="text" value="Hello there" /&gt;
&lt;/form&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;</pre>
            <p>The event handler can be bound to the text input:</p>
            <pre>$('#target').select(function() {
  alert('Handler for .select() called.');
});</pre>
            <p>Now when any portion of the text is selected, the alert is displayed. Merely setting the location of the insertion point will not trigger the event. We can trigger the event manually when another element is clicked:</p>
            <pre>$('#other').click(function() {
  $('#target').select();
});</pre>
            <p>After this code executes, clicks on the Trigger button will also alert the message:</p>
            <p>
               <span class="output">Handler for .select() called.</span>
            </p>
            <p>In addition, the default <code>select</code> action on the field will be fired, so the entire text field will be selected.</p>
            <blockquote>
               <p>The method for retrieving the current selected text differs from one browser to another. A number of jQuery plug-ins offer cross-platform solutions.</p>
            </blockquote>
         </longdesc>
         <example>
            <desc>To do something when text in input boxes is selected:</desc>
         </example>
         <example>
            <desc>To trigger the select event on all input elements, try:</desc>
         </example>
      </entry>
      <entry type="method" name="change">
         <desc>触发每个匹配元素的change事件 在每一个匹配元素的change事件中绑定一个处理函数。Bind an event handler to the "change" JavaScript event, or trigger that event on an element.</desc>
         <signature>
            <argument name="handler(eventObject)">
               <desc>A function to execute each time the event is triggered.</desc>
            </argument>
         </signature>
         <signature/>
         <longdesc>这个函数会调用执行绑定到change事件的所有函数，包括浏览器的默认行为。可以通过在某个绑定的函数中返回false来防止触发浏览器的默认行为。change事件会在元素失去焦点的时候触发，也会当其值在获得焦点后改变时触发。change事件会在元素失去焦点的时候触发，也会当其值在获得焦点后改变时触发。
<p>This method is a shortcut for <code>.bind('change', handler)</code> in the first variation, and <code>.trigger('change')</code> in the second.</p>
            <p>The <code>change</code> event is sent to an element when its value changes. This event is limited to <code>&lt;input&gt;</code> elements, <code>&lt;textarea&gt;</code> boxes and <code>&lt;select&gt;</code> elements. For select boxes, checkboxes, and radio buttons, the event is fired immediately when the user makes a selection with the mouse, but for the other element types the event is deferred until the element loses focus.</p>
            <p>For example, consider the HTML:</p>
            <pre>&lt;form&gt;
  &lt;input class="target" type="text" value="Field 1" /&gt;
  &lt;select class="target"&gt;
    &lt;option value="option1" selected="selected"&gt;Option 1&lt;/option&gt;
    &lt;option value="option2"&gt;Option 2&lt;/option&gt;
  &lt;/select&gt;
&lt;/form&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;</pre>
            <p>The event handler can be bound to the text input and the select box:</p>
            <pre>$('.target').change(function() {
  alert('Handler for .change() called.');
});</pre>
            <p>Now when the second option is selected from the dropdown, the alert is displayed. It is also displayed if we change the text in the field and then click away. If the field loses focus without the contents having changed, though, the event is not triggered. We can trigger the event manually when another element is clicked:</p>
            <pre>$('#other').click(function() {
  $('.target').change();
});</pre>
            <p>After this code executes, clicks on <span class="output">Trigger the handler</span> will also alert the message. The message will be displayed twice, because the handler has been bound to the <code>change</code> event on both of the form elements.</p>
            <p>As of jQuery 1.4 the <code>change</code> event now bubbles, and works identically to all other browsers, in Internet Explorer.</p>
         </longdesc>
         <example>
            <desc>Attaches a change event to the select that gets the text for each selected option and writes them in the div.  It then triggers the event for the initial text draw.</desc>
         </example>
         <example>
            <desc>To add a validity test to all text input elements:</desc>
         </example>
      </entry>
      <entry type="method" name="blur">
         <desc>触发每一个匹配元素的blur事件。 在每一个匹配元素的blur事件中绑定一个处理函数。Bind an event handler to the "blur" JavaScript event, or trigger that event on an element.</desc>
         <signature>
            <argument name="handler(eventObject)">
               <desc>A function to execute each time the event is triggered.</desc>
            </argument>
         </signature>
         <signature/>
         <longdesc>这个函数会调用执行绑定到blur事件的所有函数，包括浏览器的默认行为。可以通过返回false来防止触发浏览器的默认行为。blur事件会在元素失去焦点的时候触发，既可以是鼠标行为，也可以是按tab键离开的blur事件会在元素失去焦点的时候触发，既可以是鼠标行为，也可以是按tab键离开的
<p>This method is a shortcut for <code>.bind('blur', handler)</code> in the first variation, and <code>.trigger('blur')</code> in the second.</p>
            <p>The <code>blur</code> event is sent to an element when it loses focus. Originally, this event was only applicable to form elements, such as <code>&lt;input&gt;</code>. In recent browsers, the domain of the event has been extended to include all element types. An element can lose focus via keyboard commands, such as the Tab key, or by mouse clicks elsewhere on the page.</p>
            <p>For example, consider the HTML:</p>
            <pre>&lt;form&gt;
  &lt;input id="target" type="text" value="Field 1" /&gt;
  &lt;input type="text" value="Field 2" /&gt;
&lt;/form&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;
The event handler can be bound to the first input field:
$('#target').blur(function() {
  alert('Handler for .blur() called.');
});</pre>
            <p>Now if the first field has the focus and we click elsewhere, or tab away from it, the alert is displayed:</p>
            <p>
               <span class="output">Handler for .blur() called.</span>
            </p>
            <p>We can trigger the event when another element is clicked:</p>
            <pre>$('#other').click(function() {
  $('#target').blur();
});</pre>
            <p>After this code executes, clicks on <span class="output">Trigger the handler</span> will also alert the message.</p>
            <p>The <code>blur</code> event does not bubble in Internet Explorer. Therefore, scripts that rely on event delegation with the <code>blur</code> event will not work consistently across browsers.</p>
         </longdesc>
         <example>
            <desc>To trigger the blur event on all paragraphs:</desc>
         </example>
      </entry>
      <entry type="method" name="focus">
         <desc>触发每一个匹配元素的focus事件。 在每一个匹配元素的focus事件中绑定一个处理函数。Bind an event handler to the "focus" JavaScript event, or trigger that event on an element.</desc>
         <signature>
            <argument name="handler(eventObject)">
               <desc>A function to execute each time the event is triggered.</desc>
            </argument>
         </signature>
         <signature/>
         <longdesc>这将触发所有绑定的focus函数，注意，某些对象不支持focus方法。focus事件可以通过鼠标点击或者键盘上的TAB导航触发
<ul>
               <li>This method is a shortcut for <code>.bind('focus', handler)</code> in the first variation, and <code>.trigger('focus')</code> in the second.</li>
               <li>The <code>focus</code> event is sent to an element when it gains focus. This event is implicitly applicable to a limited set of elements, such as  form elements (<code>&lt;input&gt;</code>, <code>&lt;select&gt;</code>, etc.) and links (<code>&lt;a href&gt;</code>). In recent browser versions, the event can be extended to include all element types by explicitly setting the element's <code>tabindex</code> property. An element can gain focus via keyboard commands, such as the Tab key, or by mouse clicks on the element.</li>
               <li>Elements with focus are usually highlighted in some way by the browser, for example with a dotted line surrounding the element. The focus is used to determine which element is the first to receive keyboard-related events.</li>
            </ul>
            <p>For example, consider the HTML:</p>
            <pre>&lt;form&gt;
  &lt;input id="target" type="text" value="Field 1" /&gt;
  &lt;input type="text" value="Field 2" /&gt;
&lt;/form&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;
</pre>
            <p>The event handler can be bound to the first input field:</p>
            <pre>$('#target').focus(function() {
  alert('Handler for .focus() called.');
});</pre>
            <p>Now if we click on the first field, or tab to it from another field, the alert is displayed:</p>
            <p>
               <span class="output">Handler for .focus() called.</span>
            </p>
            <p>We can trigger the event when another element is clicked:</p>
            <pre>$('#other').click(function() {
  $('#target').focus();
});</pre>
            <p>After this code executes, clicks on <span class="output">Trigger the handler</span> will also alert the message.</p>
            <p>The <code>focus</code> event does not bubble in Internet Explorer. Therefore, scripts that rely on event delegation with the <code>focus</code> event will not work consistently across browsers.</p>
            <blockquote>
               <p>Triggering the focus on hidden elements causes an error in Internet Explorer. Take care to only call <code>.focus()</code> without parameters on elements that are visible.</p>
            </blockquote>
         </longdesc>
         <example>
            <desc>Fire focus.</desc>
         </example>
         <example>
            <desc>To stop people from writing in text input boxes, try:</desc>
         </example>
         <example>
            <desc>To focus on a login input box with id 'login' on page startup, try:</desc>
         </example>
      </entry>
      <entry type="method" name="mousemove">
         <desc>在每一个匹配元素的mousemove事件中绑定一个处理函数。Bind an event handler to the "mousemove" JavaScript event, or trigger that event on an element.</desc>
         <signature>
            <argument name="handler(eventObject)">
               <desc>A function to execute each time the event is triggered.</desc>
            </argument>
         </signature>
         <signature/>
         <longdesc>mousemove 事件通过鼠标在元素上移动来触发。事件处理函数会被传递一个变量——事件对象，其.clientX 和 .clientY 属性代表鼠标的坐标
<p>This method is a shortcut for <code>.bind('mousemove', handler)</code> in the first variation, and <code>.trigger('mousemove')</code> in the second.</p>
            <p>The <code>mousemove</code> event is sent to an element when the mouse pointer moves inside the element. Any HTML element can receive this event.</p>
            <p>For example, consider the HTML:</p>
            <pre>&lt;div id="target"&gt;
  Move here
&lt;/div&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;
&lt;div id="log"&gt;&lt;/div&gt;</pre>
 
            <p class="image">
               <img src="/images/0042_05_10.png" alt=""/>
            </p>
            <p>The event handler can be bound to the target:</p>
            <pre>$('#target').mousemove(function(event) {
  var msg = 'Handler for .mousemove() called at ' + event.pageX + ', ' + event.pageY;
  $('#log').append('&lt;div&gt; + msg + '&lt;/div&gt;');
});</pre>
            <p>Now when the mouse pointer moves within the target button, the messages are appended to &lt;div id="log"&gt;:</p>
            <p>
               <span class="output">Handler for .mousemove() called at (399, 48)</span>
               <br/>
               <span class="output">Handler for .mousemove() called at (398, 46)</span>
               <br/>
               <span class="output">Handler for .mousemove() called at (397, 44)</span>
               <br/>
               <span class="output">Handler for .mousemove() called at (396, 42)</span>
               <br/>
            </p>
            <p>We can also trigger the event when the second button is clicked:</p>
            <pre>$('#other').click(function() {
  $('#target').mousemove();
});</pre>
            <p>After this code executes, clicks on the Trigger button will also append the message:</p>
            <p>
               <span class="output">Handler for .mousemove() called at (undefined, undefined)</span>
            </p>
            <p>When tracking mouse movement, we usually need to know the actual position of the mouse pointer. The event object that is passed to the handler contains some information about the mouse coordinates. Properties such as <code>.clientX</code>, <code>.offsetX</code>, and <code>.pageX</code> are available, but support for them differs between browsers. Fortunately, jQuery normalizes the <code>.pageX</code> and <code>.pageY</code> attributes so that they can be used in all browsers. These attributes provide the X and Y coordinates of the mouse pointer relative to the top-left corner of the page, as illustrated in the example output above.</p>
            <p>We need to remember that the <code>mousemove</code> event is triggered whenever the mouse pointer moves, even for a pixel. This means that hundreds of events can be generated over a very small amount of time. If the handler has to do any significant processing, or if multiple handlers for the event exist, this can be a serious performance drain on the browser. It is important, therefore, to optimize <code>mousemove </code>handlers as much as possible, and to unbind them as soon as they are no longer needed.</p>
            <p>A common pattern is to bind the <code>mousemove</code> handler from within a <code>mousedown</code> hander, and to unbind it from a corresponding <code>mouseup</code> handler. If implementing this sequence of events, remember that the <code>mouseup</code> event might be sent to a different HTML element than the <code>mousemove</code> event was. To account for this, the <code>mouseup</code> handler should typically be bound to an element high up in the DOM tree, such as <code>&lt;body&gt;</code>.</p>
         </longdesc>
         <example>
            <desc>Show the mouse coordinates when the mouse is moved over the yellow div.  Coordinates are relative to the window, which in this case is the iframe.</desc>
         </example>
      </entry>
      <entry type="method" name="hover">
         <desc>一个模仿悬停事件（鼠标移动到一个对象上面及移出这个对象）的方法。这是一个自定义的方法，它为频繁使用的任务提供了一种“保持在其中”的状态。Bind two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements.</desc>
         <signature>
            <argument name="handlerIn(eventObject)">
               <desc>A function to execute when the mouse pointer enters the element.</desc>
            </argument>
            <argument name="handlerOut(eventObject)">
               <desc>A function to execute when the mouse pointer leaves the element.</desc>
            </argument>
         </signature>
         <longdesc>当鼠标移动到一个匹配的元素上面时，会触发指定的第一个函数。当鼠标移出这个元素时，会触发指定的第二个函数。而且，会伴随着对鼠标是否仍然处在特定元素中的检测（例如，处在div中的图像），如果是，则会继续保持“悬停”状态，而不触发移出事件（修正了使用mouseout事件的一个常见错误）。
<p>The <code>.hover()</code> method binds handlers for both <code>mouseenter</code> and <code>mouseleave</code> events. We can use it to simply apply behavior to an element during the time the mouse is within the element.</p>
            <p>Calling <code>$(selector).hover(handlerIn, handlerOut)</code> is shorthand for:</p>
            <pre>$(selector).mouseenter(handlerIn).mouseleave(handlerOut);</pre>
            <p>See the discussions for <code>
                  <a href="/mouseenter">.mouseenter()</a>
               </code> and <code>
                  <a href="/mouseleave">.mouseleave()</a>
               </code> for more details.</p>
         </longdesc>
         <example>
            <desc>To add a special style to list items that are being hovered over, try:</desc>
         </example>
         <example>
            <desc>To add a special style to table cells that are being hovered over, try:</desc>
         </example>
         <example>
            <desc>To unbind the above example use:</desc>
         </example>
      </entry>
      <entry type="method" name="hover">
         <desc>一个模仿悬停事件（鼠标移动到一个对象上面及移出这个对象）的方法。这是一个自定义的方法，它为频繁使用的任务提供了一种“保持在其中”的状态。Bind a single handler to the matched elements, to be executed when the mouse pointer enters or leaves the elements.</desc>
         <signature>
            <argument name="handlerInOut(eventObject)">
               <desc>A function to execute when the mouse pointer enters or leaves the element.</desc>
            </argument>
         </signature>
         <longdesc>当鼠标移动到一个匹配的元素上面时，会触发指定的第一个函数。当鼠标移出这个元素时，会触发指定的第二个函数。而且，会伴随着对鼠标是否仍然处在特定元素中的检测（例如，处在div中的图像），如果是，则会继续保持“悬停”状态，而不触发移出事件（修正了使用mouseout事件的一个常见错误）。
<p>The <code>.hover()</code> method, when passed a single function, will execute that handler for both <code>mouseenter</code> and <code>mouseleave</code> events.   This allows the user to use jQuery's various toggle methods within the handler.</p>
            <p>Calling <code>$(selector).hover(handlerInOut)</code> is shorthand for:</p>
            <pre>$(selector).bind("mouseenter mouseleave",handlerInOut);</pre>
            <p>See the discussions for <code>
                  <a href="/mouseenter">.mouseenter()</a>
               </code> and <code>
                  <a href="/mouseleave">.mouseleave()</a>
               </code> for more details.</p>
         </longdesc>
         <example>
            <desc>Slide the next sibling LI up or down on hover, and toggle a class.</desc>
         </example>
      </entry>
      <entry type="method" name="mouseleave">
         <desc>Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element.</desc>
         <signature>
            <argument name="handler(eventObject)">
               <desc>A function to execute each time the event is triggered.</desc>
            </argument>
         </signature>
         <signature/>
         <longdesc>
            <p>This method is a shortcut for <code>.bind('mouseleave', handler)</code> in the first variation, and <code>.trigger('mouseleave')</code> in the second.</p>
            <p>The <code>mouseleave</code> JavaScript event is proprietary to Internet Explorer. Because of the event's general utility, jQuery simulates this event so that it can be used regardless of browser. This event is sent to an element when the mouse pointer leaves the element. Any HTML element can receive this event.</p>
            <p>For example, consider the HTML:</p>
            <pre>&lt;div id="outer"&gt;
  Outer
  &lt;div id="inner"&gt;
    Inner
  &lt;/div&gt;
&lt;/div&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;
&lt;div id="log"&gt;&lt;/div&gt;</pre> 
            <p class="image">
               <img src="/images/0042_05_09.png" alt=""/>
            </p>
            <p>The event handler can be bound to any element:</p>
            <pre>$('#outer').mouseleave(function() {
  $('#log').append('&lt;div&gt;Handler for .mouseleave() called.&lt;/div&gt;');
});</pre>
            <p>Now when the mouse pointer moves out of the <span class="output">Outer</span> 
               <code>&lt;div&gt;</code>, the message is appended to <code>&lt;div id="log"&gt;</code>. We can also trigger the event when another element is clicked:</p>
            <pre>$('#other').click(function() {
  $('#outer').mouseleave();
});</pre>
            <p>After this code executes, clicks on <span class="output">Trigger the handler</span> will also append the message.</p>
            <p>The <code>mouseleave</code> event differs from <code>mouseout</code> in the way it handles event bubbling. If <code>mouseout</code> were used in this example, then when the mouse pointer moved out of the <span class="output">Inner</span> element, the handler would be triggered. This is usually undesirable behavior. The <code>mouseleave</code> event, on the other hand, only triggers its handler when the mouse leaves the element it is bound to, not a descendant. So in this example, the handler is triggered when the mouse leaves the <span class="output">Outer</span> element, but not the <span class="output">Inner</span> element.</p>
         </longdesc>
         <example>
            <desc>Show number of times mouseout and mouseleave events are triggered.
<code>mouseout</code> fires when the pointer moves out of child element as well, while <code>mouseleave</code> fires only when the pointer moves out of the bound element.</desc>
         </example>
      </entry>
      <entry type="method" name="mouseenter">
         <desc>Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element.</desc>
         <signature>
            <argument name="handler(eventObject)">
               <desc>A function to execute each time the event is triggered.</desc>
            </argument>
         </signature>
         <signature/>
         <longdesc>
            <p>This method is a shortcut for <code>.bind('mouseenter', handler)</code> in the first variation, and <code>.trigger('mouseenter')</code> in the second.</p>
            <p>The <code>mouseenter</code> JavaScript event is proprietary to Internet Explorer. Because of the event's general utility, jQuery simulates this event so that it can be used regardless of browser. This event sent to an element when the mouse pointer enters the element. Any HTML element can receive this event.</p>
            <p>For example, consider the HTML:</p>
            <pre>&lt;div id="outer"&gt;
  Outer
  &lt;div id="inner"&gt;
    Inner
  &lt;/div&gt;
&lt;/div&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;
&lt;div id="log"&gt;&lt;/div&gt;</pre>
 
            <p class="image">
               <img src="/images/0042_05_08.png" alt=""/>
            </p>
            <p>The event handler can be bound to any element:</p>
            <pre>$('#outer').mouseenter(function() {
  $('#log').append('&lt;div&gt;Handler for .mouseenter() called.&lt;/div&gt;');
});</pre>
            <p>Now when the mouse pointer moves over the <span class="output">Outer</span> 
               <code>&lt;div&gt;</code>, the message is appended to <code>&lt;div id="log"&gt;</code>. We can also trigger the event when another element is clicked:</p>
            <pre>$('#other').click(function() {
  $('#outer').mouseenter();
});</pre>
            <p>After this code executes, clicks on <span class="output">Trigger the handler</span> will also append the message.</p>
            <p>The <code>mouseenter</code> event differs from <code>mouseover</code> in the way it handles event bubbling. If <code>mouseover</code> were used in this example, then when the mouse pointer moved over the <span class="output">Inner</span> element, the handler would be triggered. This is usually undesirable behavior. The <code>mouseenter</code> event, on the other hand, only triggers its handler when the mouse enters the element it is bound to, not a descendant. So in this example, the handler is triggered when the mouse enters the <span class="output">Outer</span> element, but not the <span class="output">Inner</span> element.</p>
         </longdesc>
         <example>
            <desc>Show texts when mouseenter and mouseout event triggering.
<code>mouseover</code> fires when the pointer moves into the child element as well, while <code>mouseenter</code> fires only when the pointer moves into the bound element.</desc>
         </example>
      </entry>
      <entry type="method" name="mouseout">
         <desc>在每一个匹配元素的mouseout事件中绑定一个处理函数。Bind an event handler to the "mouseout" JavaScript event, or trigger that event on an element.</desc>
         <signature>
            <argument name="handler(eventObject)">
               <desc>A function to execute each time the event is triggered.</desc>
            </argument>
         </signature>
         <signature/>
         <longdesc>mouseout事件在鼠标从元素上离开后会触发
<p>This method is a shortcut for <code>.bind('mouseout', handler)</code> in the first variation, and <code>.trigger('mouseout')</code> in the second.</p>
            <p>The <code>mouseout</code> event is sent to an element when the mouse pointer leaves the element. Any HTML element can receive this event.</p>
            <p>For example, consider the HTML:</p>
            <pre>&lt;div id="outer"&gt;
  Outer
  &lt;div id="inner"&gt;
    Inner
  &lt;/div&gt;
&lt;/div&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;
&lt;div id="log"&gt;&lt;/div&gt;</pre> 
            <p class="image">
               <img src="/images/0042_05_07.png" alt=""/>
            </p>
            <p>The event handler can be bound to any element:</p>
            <pre>$('#outer').mouseout(function() {
  $('#log').append('Handler for .mouseout() called.');
});</pre>
            <p>Now when the mouse pointer moves out of the <span class="output">Outer</span> 
               <code>&lt;div&gt;</code>, the message is appended to <code>&lt;div id="log"&gt;</code>. We can also trigger the event when another element is clicked:</p>
            <pre>$('#other').click(function() {
  $('#outer').mouseout();
});</pre>
            <p>After this code executes, clicks on <span class="output">Trigger the handler</span> will also append the message.</p>
            <p>This event type can cause many headaches due to event bubbling. For instance, when the mouse pointer moves out of the <span class="output">Inner</span> element in this example, a <code>mouseout</code> event will be sent to that, then trickle up to <span class="output">Outer</span>. This can trigger the bound <code>mouseout</code> handler at inopportune times. See the discussion for <code>.<a href="/mouseleave">mouseleave</a>()</code> for a useful alternative.</p>
         </longdesc>
         <example>
            <desc>Show the number of times mouseout and mouseleave events are triggered.
<code>mouseout</code> fires when the pointer moves out of the child element as well, while <code>mouseleave</code> fires only when the pointer moves out of the bound element.</desc>
         </example>
      </entry>
      <entry type="method" name="mouseover">
         <desc>在每一个匹配元素的mouseover事件中绑定一个处理函数。Bind an event handler to the "mouseover" JavaScript event, or trigger that event on an element.</desc>
         <signature>
            <argument name="handler(eventObject)">
               <desc>A function to execute each time the event is triggered.</desc>
            </argument>
         </signature>
         <signature/>
         <longdesc>mouseover事件会在鼠标移入对象时触发
<p>This method is a shortcut for <code>.bind('mouseover', handler)</code> in the first variation, and <code>.trigger('mouseover')</code> in the second.</p>
            <p>The <code>mouseover</code> event is sent to an element when the mouse pointer enters the element. Any HTML element can receive this event.</p>
            <p>For example, consider the HTML:</p>
            <pre>&lt;div id="outer"&gt;
  Outer
  &lt;div id="inner"&gt;
    Inner
  &lt;/div&gt;
&lt;/div&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;
&lt;div id="log"&gt;&lt;/div&gt;</pre>
 
            <p class="image">
               <img src="/images/0042_05_06.png" alt=""/>
            </p>
            <p>The event handler can be bound to any element:</p>
            <pre>$('#outer').mouseover(function() {
  $('#log').append('&lt;div&gt;Handler for .mouseover() called.&lt;/div&gt;');
});</pre>
            <p>Now when the mouse pointer moves over the <span class="output">Outer</span> 
               <code>&lt;div&gt;</code>, the message is appended to <code>&lt;div id="log"&gt;</code>. We can also trigger the event when another element is clicked:</p>
            <pre>$('#other').click(function() {
  $('#outer').mouseover();
});</pre>
            <p>After this code executes, clicks on <span class="output">Trigger the handler</span> will also append the message.</p>
            <p>This event type can cause many headaches due to event bubbling. For instance, when the mouse pointer moves over the <span class="output">Inner</span> element in this example, a <code>mouseover</code> event will be sent to that, then trickle up to <span class="output">Outer</span>. This can trigger our bound <code>mouseover</code> handler at inopportune times. See the discussion for <code>.mouseenter()</code> for a useful alternative.</p>
         </longdesc>
         <example>
            <desc>Show the number of times mouseover and mouseenter events are triggered.
<code>mouseover</code> fires when the pointer moves into the child element as well, while <code>mouseenter</code> fires only when the pointer moves into the bound element.</desc>
         </example>
      </entry>
      <entry type="method" name="dblclick">
         <desc>触发每一个匹配元素的dblclick事件。 在每一个匹配元素的dblclick事件中绑定一个处理函数。Bind an event handler to the "dblclick" JavaScript event, or trigger that event on an element.</desc>
         <signature>
            <argument name="handler(eventObject)">
               <desc>A function to execute each time the event is triggered.</desc>
            </argument>
         </signature>
         <signature/>
         <longdesc>这个函数会调用执行绑定到dblclick事件的所有函数，包括浏览器的默认行为。可以通过在某个绑定的函数中返回false来防止触发浏览器的默认行为。dblclick事件会在元素的同一点双击时触发。的那个在某个元素上双击的时候就会触发dblclick事件
<p>This method is a shortcut for <code>.bind('dblclick', handler)</code> in the first variation, and <code>.trigger('dblclick')</code> in the second.
The <code>dblclick</code> event is sent to an element when the element is double-clicked. Any HTML element can receive this event.
For example, consider the HTML:</p>
            <pre>&lt;div id="target"&gt;
  Double-click here
&lt;/div&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;</pre>
 
            <p class="image">
               <img src="/images/0042_05_04.png" alt=""/>
            </p>
            <p>The event handler can be bound to any <code>&lt;div&gt;</code>:</p>
            <pre>$('#target').dblclick(function() {
  alert('Handler for .dblclick() called.');
});</pre>
            <p>Now if we double-click on this element, the alert is displayed:</p>
            <p>
               <span class="output">Handler for .dblclick() called.</span>
            </p>
            <p>We can also trigger the event when a different element is clicked:</p>
            <pre>$('#other').click(function() {
  $('#target').dblclick();
});</pre>
            <p>After this code executes, (single) clicks on <span class="output">Trigger the handler</span> will also alert the message.</p>
            <p>The <code>dblclick</code> event is only triggered after this exact series of events:</p>
            <ul>
               <li>The mouse button is depressed while the pointer is inside the element.</li>
               <li>The mouse button is released while the pointer is inside the element.</li>
               <li>The mouse button is depressed again while the pointer is inside the element, within a time window that is system-dependent.</li>
               <li>The mouse button is released while the pointer is inside the element.</li>
            </ul>
            <p>It is inadvisable to bind handlers to both the <code>click</code> and <code>dblclick</code> events for the same element. The sequence of events triggered varies from browser to browser, with some receiving two <code>click</code> events and others only one. If an interface that reacts differently to single- and double-clicks cannot be avoided, then the <code>dblclick</code> event should be simulated within the <code>click</code> handler. We can achieve this by saving a timestamp in the handler, and then comparing the current time to the saved timestamp on subsequent clicks. If the difference is small enough, we can treat the click as a double-click.
</p>
         </longdesc>
         <example>
            <desc>To bind a "Hello World!" alert box the dblclick event on every paragraph on the page:</desc>
         </example>
         <example>
            <desc>Double click to toggle background color.</desc>
         </example>
      </entry>
      <entry type="method" name="click">
         <desc>触发每一个匹配元素的click事件。 在每一个匹配元素的click事件中绑定一个处理函数。Bind an event handler to the "click" JavaScript event, or trigger that event on an element.</desc>
         <signature>
            <argument name="handler(eventObject)">
               <desc>A function to execute each time the event is triggered.</desc>
            </argument>
         </signature>
         <signature/>
         <longdesc>这个函数会调用执行绑定到click事件的所有函数。点击事件会在你的指针设备的按钮在元素上单击时触发。单击的定义是在屏幕的同一点触发了mousedown和mouseup.几个事件触发的顺序是：mousedownmouseupclick
<p>This method is a shortcut for <code>.bind('click', handler)</code> in the first variation, and <code>.trigger('click')</code> in the second.</p>
            <p>The <code>click</code> event is sent to an element when the mouse pointer is over the element, and the mouse button is pressed and released. Any HTML element can receive this event.</p>
            <pre>For example, consider the HTML:
&lt;div id="target"&gt;
  Click here
&lt;/div&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;</pre>
 
            <p class="image">
               <img src="/images/0042_05_03.png" alt=""/>
            </p>
            <p>The event handler can be bound to any <code>&lt;div&gt;</code>:</p>
            <pre>$('#target').click(function() {
  alert('Handler for .click() called.');
});</pre>
            <p>Now if we click on this element, the alert is displayed:</p>
            <p>
               <span class="output">Handler for .click() called.</span>
            </p>
            <p>We can also trigger the event when a different element is clicked:</p>
            <pre>$('#other').click(function() {
  $('#target').click();
});</pre>
            <p>After this code executes, clicks on <span class="output">Trigger the handler</span> will also alert the message.</p>
            <p>The <code>click</code> event is only triggered after this exact series of events:</p>
            <ul>
               <li>The mouse button is depressed while the pointer is inside the element.</li>
               <li>The mouse button is released while the pointer is inside the element.</li>
            </ul>
            <p>This is usually the desired sequence before taking an action. If this is not required, the <code>mousedown</code> or <code>mouseup</code> event may be more suitable.</p>
         </longdesc>
         <example>
            <desc>To hide paragraphs on a page when they are clicked:</desc>
         </example>
         <example>
            <desc>To trigger the click event on all of the paragraphs on the page:</desc>
         </example>
      </entry>
      <entry type="method" name="mouseup">
         <desc>在每一个匹配元素的mouseup事件中绑定一个处理函数。Bind an event handler to the "mouseup" JavaScript event, or trigger that event on an element.</desc>
         <signature>
            <argument name="handler(eventObject)">
               <desc>A function to execute each time the event is triggered.</desc>
            </argument>
         </signature>
         <signature/>
         <longdesc>mouseup事件会在鼠标点击对象释放时
<p>This method is a shortcut for <code>.bind('mouseup', handler)</code> in the first variation, and <code>.trigger('mouseup')</code> in the second.</p>
            <p>The <code>mouseup</code> event is sent to an element when the mouse pointer is over the element, and the mouse button is released. Any HTML element can receive this event.</p>
            <p>For example, consider the HTML:</p>
            <pre>&lt;div id="target"&gt;
  Click here
&lt;/div&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;
</pre> 
            <p class="image">
               <img src="/images/0042_05_02.png" alt=""/>
            </p>
            <p>The event handler can be bound to any <code>&lt;div&gt;</code>:</p>
            <pre>$('#target').mouseup(function() {
  alert('Handler for .mouseup() called.');
});
</pre>
            <p>Now if we click on this element, the alert is displayed:</p>
            <p>
               <span class="output">Handler for .mouseup() called.</span>
            </p>
            <p>We can also trigger the event when a different element is clicked:</p>
            <pre>$('#other').click(function() {
  $('#target').mouseup();
});</pre>
            <p>After this code executes, clicks on <span class="output">Trigger the handler</span> will also alert the message.</p>
            <p>If the user clicks outside an element, drags onto it, and releases the button, this is still counted as a <code>mouseup</code> event. This sequence of actions is not treated as a button press in most user interfaces, so it is usually better to use the <code>click</code> event unless we know that the <code>mouseup</code> event is preferable for a particular situation.</p>
         </longdesc>
         <example>
            <desc>Show texts when mouseup and mousedown event triggering.</desc>
         </example>
      </entry>
      <entry type="method" name="mousedown">
         <desc>在每一个匹配元素的mousedown事件中绑定一个处理函数。Bind an event handler to the "mousedown" JavaScript event, or trigger that event on an element.</desc>
         <signature>
            <argument name="handler(eventObject)">
               <desc>A function to execute each time the event is triggered.</desc>
            </argument>
         </signature>
         <signature/>
         <longdesc>mousedown事件在鼠标在元素上点击后会触发
<p>This method is a shortcut for <code>.bind('mousedown', handler)</code> in the first variation, and <code>.trigger('mousedown')</code> in the second.</p>
            <p>The <code>mousedown</code> event is sent to an element when the mouse pointer is over the element, and the mouse button is pressed. Any HTML element can receive this event.</p>
            <p>For example, consider the HTML:</p>
            <pre>&lt;div id="target"&gt;
  Click here
&lt;/div&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;</pre>
 
            <p class="image">
               <img src="/images/0042_05_01.png" alt=""/>
            </p>
            <p>The event handler can be bound to any <code>&lt;div&gt;</code>:</p>
            <pre>$('#target').mousedown(function() {
  alert('Handler for .mousedown() called.');
});</pre>
            <p>Now if we click on this element, the alert is displayed:</p>
            <p>
               <span class="output">Handler for .mousedown() called.</span>
            </p>
            <p>We can also trigger the event when a different element is clicked:</p>
            <pre>$('#other').click(function() {
  $('#target').mousedown();
});</pre>
            <p>After this code executes, clicks on <span class="output">Trigger the handler</span> will also alert the message.</p>
            <p>The <code>mousedown</code> event is sent when any mouse button is clicked. To act only on specific buttons, we can use the event object's <code>which </code>property. Not all browsers support this property (Internet Explorer uses button instead), but jQuery normalizes the property so that it is safe to use in any browser. The value of <code>which</code> will be 1 for the left button, 2 for the middle button, or 3 for the right button.</p>
            <p>This event is primarily useful for ensuring that the primary button was used to begin a drag operation; if ignored, strange results can occur when the user attempts to use a context menu. While the middle and right buttons can be detected with these properties, this is not reliable. In Opera and Safari, for example, right mouse button clicks are not detectable by default.</p>
            <p>If the user clicks on an element, drags away from it, and releases the button, this is still counted as a <code>mousedown</code> event. This sequence of actions is treated as a "canceling" of the button press in most user interfaces, so it is usually better to use the <code>click</code> event unless we know that the <code>mousedown</code> event is preferable for a particular situation.</p>

         </longdesc>
         <example>
            <desc>Show texts when mouseup and mousedown event triggering.</desc>
         </example>
      </entry>
      <entry type="method" name="error">
         <desc>触发每一个匹配元素的error事件。 在每一个匹配元素的error事件中绑定一个处理函数。Bind an event handler to the "error" JavaScript event.</desc>
         <signature>
            <argument name="handler(eventObject)">
               <desc>A function to execute when the event is triggered.</desc>
            </argument>
         </signature>
         <longdesc>这个函数会调用所有绑定到error事件上的函数，包括在对应元素上的浏览器默认行为。可以通过在某个绑定的函数中返回false来防止触发浏览器的默认行为。error事件通常可以在元素由于点击或者tab导航失去焦点时触发。对于error事件，没有一个公众的标准。在大多数浏览器中，当页面的JavaScript发生错误时，window对象会触发error事件;当图像的src属性无效时，比如文件不存在或者图像数据错误时，也会触发图像对象的error事件。

如果异常是由window对象抛出，事件处理函数将会被传入三个参数：

1. 描述事件的信息 ("varName is not defined", "missing operator in expression", 等等.),

2. 包含错误的文档的完整URL

3. 异常发生的行数 如果事件处理函数返回true，则表示事件已经被处理，浏览器将认为没有异常。

更多相关信息: 

&lt;a href="http://msdn2.microsoft.com/en-us/library/ms536930.aspx"&gt;msdn - onerror Event&lt;/a&gt;

&lt;a href="http://developer.mozilla.org/en/docs/DOM:window.onerror"&gt;Gecko DOM Reference - onerror Event&lt;/a&gt;

&lt;a href="http://developer.mozilla.org/en/docs/DOM:event"&gt;Gecko DOM Reference - Event object&lt;/a&gt;

&lt;a href="http://en.wikipedia.org/wiki/DOM_Events"&gt;Wikipedia: DOM Events&lt;/a&gt;
<p>This method is a shortcut for <code>.bind('error', handler)</code>.</p>
            <p>The <code>error</code> event is sent to elements, such as images, that are referenced by a document and loaded by the browser. It is called if the element was not loaded correctly.</p>
            <p>For example, consider a page with a simple image:</p>
            <pre>&lt;img src="missing.png" alt="Book" id="book" /&gt;</pre>
            <p>The event handler can be bound to the image:</p>
            <pre>$('#book').error(function() {
  alert('Handler for .error() called.')
});
</pre>
            <p>If the image cannot be loaded (for example, because it is not present at the supplied URL), the alert  is displayed:</p>
            <p>
               <span class="output">Handler for .error() called.</span>
            </p>
            <blockquote>
               <p>This event may not be correctly fired when the page is served locally. Since <code>error</code> relies on normal HTTP status codes, it will generally not be triggered if the URL uses the <code>file:</code> protocol.</p>
            </blockquote>
            <p>Note: A jQuery error event handler should not be attached to the window object. The browser fires the window's error event when a script error occurs. However, the window error event receives different arguments and has different return value requirements than conventional event handlers.
</p>
         </longdesc>
         <example>
            <desc>To hide JavaScript errors from the user, you can try:</desc>
         </example>
         <example>
            <desc>To hide the "broken image" icons for your IE users, you can try:</desc>
         </example>
      </entry>
      <entry type="method" name="unload">
         <desc>在每一个匹配元素的unload事件中绑定一个处理函数。Bind an event handler to the "unload" JavaScript event.</desc>
         <signature>
            <argument name="handler(eventObject)">
               <desc>A function to execute when the event is triggered.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>This method is a shortcut for <code>.bind('unload', handler)</code>.</p>
            <p>The <code>unload</code> event is sent to the <code>window</code> element when the user navigates away from the page. This could mean one of many things. The user could have clicked on a link to leave the page, or typed in a new URL in the address bar. The forward and back buttons will trigger the event. Closing the browser window will cause the event to be triggered. Even a page reload will first create an <code>unload</code> event.</p>
            <blockquote>
               <p>The exact handling of the <code>unload</code> event has varied from version to version of browsers. For example, some versions of Firefox trigger the event when a link is followed, but not when the window is closed. In practical usage, behavior should be tested on all supported browsers, and contrasted with the proprietary <code>beforeunload</code> event.</p>
            </blockquote>
            <p>Any <code>unload</code> event handler should be bound to the <code>window</code> object:</p>
            <pre>$(window).unload(function() {
  alert('Handler for .unload() called.');
});
</pre>
            <p>After this code executes, the alert will be displayed whenever the browser leaves the current page.
It is not possible to cancel the <code>unload</code> event with <code>.preventDefault()</code>. This event is available so that scripts can perform cleanup when the user leaves the page.
</p>
         </longdesc>
         <example>
            <desc>To display an alert when a page is unloaded:</desc>
         </example>
      </entry>
      <entry type="method" name="load">
         <desc>在每一个匹配元素的load事件中绑定一个处理函数。 载入远程 HTML 文件代码并插入至 DOM 中。Bind an event handler to the "load" JavaScript event.</desc>
         <signature>
            <argument name="handler(eventObject)">
               <desc>A function to execute when the event is triggered.</desc>
            </argument>
         </signature>
         <longdesc>如果绑定给window对象，则会在所有内容加载后触发，包括窗口，框架，对象和图像。如果绑定在元素上，则当元素的内容加载完毕后触发。

'''注意:'''只有当在这个元素完全加载完之前绑定load的处理函数,才会在他加载完后触发。如果之后再绑定就永远不会触发了。所以'''不要'''在$(document).ready()里绑定load事件，因为jQuery会在所有DOM加载完成后再绑定load事件。默认使用 GET 方式 - 传递附加参数时自动转换为 POST 方式。jQuery 1.2 中，可以指定选择符，来筛选载入的 HTML 文档，DOM 中将仅插入筛选出的 HTML 代码。语法形如 "url #some &gt; selector"。请查看示例。
  <p>This method is a shortcut for <code>.bind('load', handler)</code>.</p>
            <p>The <code>load</code> event is sent to an element when it and all sub-elements have been completely loaded. This event can be sent to any element associated with a URL: images, scripts, frames, iframes, and the <code>window</code> object.</p>
            <blockquote>
               <p>It is possible that the load event will not be triggered if the image is loaded from the browser cache. To account for this possibility, we can use a special load event that fires immediately if the image is ready. <code>event.special.load</code> is currently <a href="http://github.com/peol/jquery.imgloaded/raw/master/ahpi.imgload.js">available as a plugin</a>. </p>
            </blockquote>
            <p>For example, consider a page with a simple image:</p>
            <pre>&lt;img src="book.png" alt="Book" id="book" /&gt;</pre>
            <p>The event handler can be bound to the image:</p>
            <pre>$('#book').load(function() {
  // Handler for .load() called.
});</pre>
            <p>As soon as the image has been loaded, the handler is called.</p>
            <p>In general, it is not necessary to wait for all images to be fully loaded. If code can be executed earlier, it is usually best to place it in a handler sent to the <code>.ready()</code> method.
</p>
            <blockquote>
               <p>The Ajax module also has a method named <code>
                     <a href="/load">.load()</a>
                  </code>. Which one is fired depends on the set of arguments passed.</p>
            </blockquote>
         </longdesc>
         <example>
            <desc>Run a function when the page is fully loaded including graphics.</desc>
         </example>
         <example>
            <desc>Add the class bigImg to all images with height greater then 100 upon each image load.</desc>
         </example>
      </entry>
      <entry type="method" name="ready">
         <desc>当DOM载入就绪可以查询及操纵时绑定一个要执行的函数。Specify a function to execute when the DOM is fully loaded.</desc>
         <signature>
            <argument name="handler">
               <desc>A function to execute after the DOM is ready.</desc>
            </argument>
         </signature>
         <longdesc>这是事件模块中最重要的一个函数，因为它可以极大地提高web应用程序的响应速度。

简单地说，这个方法纯粹是对向window.load事件注册事件的替代方法。通过使用这个方法，可以在DOM载入就绪能够读取并操纵时立即调用你所绑定的函数，而99.99%的JavaScript函数都需要在那一刻执行。

有一个参数－－对jQuery函数的引用－－会传递到这个ready事件处理函数中。可以给这个参数任意起一个名字，并因此可以不再担心命名冲突而放心地使用$别名。

请确保在 &lt;body&gt; 元素的onload事件中没有注册函数，否则不会触发$(document).ready()事件。

可以在同一个页面中无限次地使用$(document).ready()事件。其中注册的函数会按照（代码中的）先后顺序依次执行。
<p>While JavaScript provides the <code>load</code> event for executing code when a page is rendered, this event does not get triggered until all assets such as images have been completely received. In most cases, the script can be run as soon as the DOM hierarchy has been fully constructed. The handler passed to <code>.ready()</code> is guaranteed to be executed after the DOM is ready, so this is usually the best place to attach all other event handlers and run other jQuery code.  When using scripts that rely on the value of CSS style properties, it's important to reference external stylesheets or embed style elements before referencing the scripts.</p>
            <p>In cases where code relies on loaded assets (for example, if the dimensions of an image are required), the code should be placed in a handler for the <code>load</code> event instead.</p>

            <blockquote>
               <p>The <code>.ready()</code> method is generally incompatible with the <code>&lt;body onload=""&gt;</code> attribute. If <code>load</code> must be used, either do not use <code>.ready()</code> or use jQuery's <code>.load()</code> method to attach <code>load</code> event handlers to the window or to more specific items, like images.
</p>
            </blockquote>
            <p>All three of the following syntaxes are equivalent:</p>
            <ul>
               <li>
                  <code>$(document).ready(handler)</code>
               </li>
               <li>
                  <code>$().ready(handler)</code> (this is not recommended)</li>
               <li>
                  <code>$(handler)</code>
               </li>
            </ul>
            <p>There is also <code>$(document).bind("ready", handler)</code>. This behaves similarly to the ready method but with one exception: If the ready event has already fired and you try to <code>.bind("ready")</code> the bound handler will not be executed.</p>
            <p>The <code>.ready()</code> method can only be called on a jQuery object matching the current document, so the selector can be omitted.</p>
            <p>The <code>.ready()</code> method is typically used with an anonymous function:</p>
            <pre>$(document).ready(function() {
  // Handler for .ready() called.
});</pre>
            <p>If <code>.ready()</code> is called after the DOM has been initialized, the new handler passed in will be executed immediately.</p>
            <h4>Aliasing the jQuery Namespace</h4>
            <p>When using another JavaScript library, we may wish to call <code>
                  <a href="/jQuery.noConflict">$.noConflict()</a>
               </code> to avoid namespace difficulties. When this function is called, the <code>$</code> shortcut is no longer available, forcing us to write <code>jQuery</code> each time we would normally write <code>$</code>. However, the handler passed to the <code>.ready()</code> method can take an argument, which is passed the global <code>jQuery</code> object. This means we can rename the object within the context of our <code>.ready()</code> handler without affecting other code:</p>
            <pre>jQuery(document).ready(function($) {
  // Code using $ as usual goes here.
});</pre>
         </longdesc>
         <example>
            <desc>Display a message when the DOM is loaded.</desc>
         </example>
      </entry>
      <entry type="method" name="die">
         <desc>jQuery 1.3新增。此方法与live正好完全相反。Remove all event handlers previously attached using <code>.live()</code> from the elements.</desc>
         <signature/>
         <longdesc>如果不带参数，则所有绑定的live事件都会被移除。

你可以解除用live注册的自定义事件。

如果提供了type参数，那么会移除对应的live事件。

如果也指定了第二个参数function,则只移出指定的事件处理函数。
<p>Any handler that has been attached with <code>.live()</code> can be removed with <code>.die()</code>. This method is analogous to calling <code>.unbind()</code> with no arguments, which is used to remove all handlers attached with <code>.bind()</code>.
See the discussions of <code>.live()</code> and <code>.unbind()</code> for further details.</p>
         </longdesc>
      </entry>
      <entry type="method" name="die">
         <desc>jQuery 1.3新增。此方法与live正好完全相反。Remove an event handler previously attached using <code>.live()</code> from the elements.</desc>
         <signature>
            <argument name="eventType">
               <desc>A string containing a JavaScript event type, such as <code>click</code> or <code>keydown</code>.</desc>
            </argument>
            <argument name="handler">
               <desc>The function that is to be no longer executed.</desc>
            </argument>
         </signature>
         <longdesc>如果不带参数，则所有绑定的live事件都会被移除。

你可以解除用live注册的自定义事件。

如果提供了type参数，那么会移除对应的live事件。

如果也指定了第二个参数function,则只移出指定的事件处理函数。
<p>Any handler that has been attached with <code>.live()</code> can be removed with <code>.die()</code>. This method is analogous to <code>.unbind()</code>, which is used to remove handlers attached with <code>.bind()</code>.
See the discussions of <code>.live()</code> and <code>.unbind()</code> for further details.</p>
         </longdesc>
         <example>
            <desc>Can bind and unbind events to the colored button.</desc>
         </example>
         <example>
            <desc>To unbind all live events from all paragraphs, write:</desc>
         </example>
         <example>
            <desc>To unbind all live click events from all paragraphs, write:</desc>
         </example>
         <example>
            <desc>To unbind just one previously bound handler, pass the function in as the second argument:</desc>
         </example>
      </entry>
      <entry type="property" name="jQuery.browser">
         <desc>在jQuery 1.3中不建议使用。浏览器内核标识。依据 navigator.userAgent 判断。<strong>We recommend against using this property, please try to use feature detection instead (see jQuery.support).</strong> Contains flags for the useragent, read from navigator.userAgent. While jQuery.browser will not be removed from future versions of jQuery, every effort to use jQuery.support and proper feature detection should be made.</desc>
         <signature/>
         <longdesc>可用值:  safari 

 opera 

 msie 

 mozilla  此属性在 DOM 树加载完成前即有效，可用于为特定浏览器设置 ready 事件。 

浏览器对象检测技术与此属性共同使用可提供可靠的浏览器检测支持。
                   <p>The <code>$.browser</code> property allows us to detect which web browser is accessing the page, as reported by the browser itself. It contains flags for each of the four most prevalent browser classes (Internet Explorer, Mozilla, Webkit, and Opera) as well as version information.</p>
                   
            <p>Available flags are:</p>
            <ul>
               <li>webkit (as of jQuery 1.4)</li>
               <li>safari (deprecated)</li>
               <li>opera</li>
               <li>msie</li>
               <li>mozilla</li>
            </ul>

            <p>This property is available immediately. It is therefore safe to use it to determine whether or not to call <code>$(document).ready()</code>.
The <code>$.browser</code> property is deprecated in jQuery 1.3, but there are no immediate plans to remove it.</p>

            <p>Because <code>$.browser</code> uses <code>navigator.userAgent</code> to determine the platform, it is vulnerable to spoofing by the user or misrepresentation by the browser itself. It is always best to avoid browser-specific code entirely where possible. The <code>$.support</code> property is available for detection of support for particular features rather than relying on <code>$.browser</code>.</p>
         </longdesc>
         <example>
            <desc>Show the browser info.</desc>
         </example>
         <example>
            <desc>Returns true if the current useragent is some version of Microsoft's Internet Explorer.</desc>
         </example>
         <example>
            <desc>Alerts "this is webkit!" only for webkit browsers</desc>
         </example>
         <example>
            <desc>Alerts "Do stuff for firefox 3" only for firefox 3 browsers.</desc>
         </example>
         <example>
            <desc>Set a CSS property to specific browser.</desc>
         </example>
      </entry>
      <entry type="property" name="jQuery.browser.version">
         <desc>在jQuery 1.3中不建议使用。浏览器渲染引擎版本号。The version number of the rendering engine for the user's browser.</desc>
         <signature/>
         <longdesc>典型结果:  Internet Explorer: 6.0, 7.0 

 Mozilla/Firefox/Flock/Camino: 1.7.12, 1.8.1.3 

 Opera: 9.20 

 Safari/Webkit: 312.8, 418.9
    <p>Here are some typical results:</p>
            <ul>
               <li>Internet Explorer: 6.0, 7.0</li>
               <li>Mozilla/Firefox/Flock/Camino: 1.7.12, 1.8.1.3, 1.9</li>
               <li>Opera: 9.20</li>
               <li>Safari/Webkit: 312.8, 418.9</li>
            </ul>
            <p>Note that IE8 claims to be 7 in Compatibility View.</p>
         </longdesc>
         <example>
            <desc>Returns the browser version.</desc>
         </example>
         <example>
            <desc>Alerts the version of IE that is being used</desc>
         </example>
         <example>
            <desc>Often you only care about the "major number," the whole number. This can be accomplished with JavaScript's built-in parseInt() function:</desc>
         </example>
      </entry>
      <entry type="method" name="live">
         <desc>jQuery 给所有匹配的元素附加一个事件处理函数，即使这个元素是以后再添加进来的也有效。Attach a handler to the event for all elements which match the current selector, now or in the future.</desc>
         <signature>
            <argument name="eventType">
               <desc>A string containing a JavaScript event type, such as "click" or "keydown." As of jQuery 1.4 the string can contain multiple, space-separated event types or custom event names, as well.</desc>
            </argument>
            <argument name="handler">
               <desc>A function to execute at the time the event is triggered.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="eventType">
               <desc>A string containing a JavaScript event type, such as "click" or "keydown." As of jQuery 1.4 the string can contain multiple, space-separated event types or custom event names, as well.</desc>
            </argument>
            <argument name="eventData">
               <desc>A map of data that will be passed to the event handler.</desc>
            </argument>
            <argument name="handler">
               <desc>A function to execute at the time the event is triggered.</desc>
            </argument>
         </signature>
         <longdesc>这个方法是基本是的 .bind() 方法的一个变体。使用 .bind() 时，选择器匹配的元素会附加一个事件处理函数，而以后再添加的元素则不会有。为此需要再使用一次 .bind() 才行。比如说

&lt;pre&gt;&amp;lt;body&amp;gt;
  &amp;lt;div class="clickme"&amp;gt;Click here&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/pre&gt;

可以给这个元素绑定一个简单的click事件：

&lt;pre&gt;$('.clickme').bind('click', function() {
  alert("Bound handler called.");
});
&lt;/pre&gt;

当点击了元素，就会弹出一个警告框。然后，想象一下这之后有另一个元素添加进来了。

&lt;pre&gt;$('body').append('&amp;lt;div class="clickme"&amp;gt;Another target&amp;lt;/div&amp;gt;');&lt;/pre&gt;

尽管这个新的元素也能够匹配选择器 ".clickme" ，但是由于这个元素是在调用 .bind() 之后添加的，所以点击这个元素不会有任何效果。

.live() 就提供了对应这种情况的方法。如果我们是这样绑定click事件的：

&lt;pre&gt;$('.clickme').live('click', function() {
  alert("Live handler called."); 
});&lt;/pre&gt;

然后再添加一个新元素：

&lt;pre&gt;$('body').append('&amp;lt;div class="clickme"&amp;gt;Another target&amp;lt;/div&amp;gt;');&lt;/pre&gt;

然后再点击新增的元素，他依然能够触发事件处理函数。

'''事件委托'''

.live() 方法能对一个还没有添加进DOM的元素有效，是由于使用了事件委托：绑定在祖先元素上的事件处理函数可以对在后代上触发的事件作出回应。传递给 .live() 的事件处理函数不会绑定在元素上，而是把他作为一个特殊的事件处理函数，绑定在 DOM 树的根节点上。在我们的例子中，当点击新的元素后，会依次发生下列步骤：

  &lt;ol&gt;
    &lt;li&gt;生成一个click事件传递给 &amp;lt;div&amp;gt; 来处理 &lt;/li&gt;
    &lt;li&gt;由于没有事件处理函数直接绑定在 &amp;lt;div&amp;gt; 上，所以事件冒泡到DOM树上&lt;/li&gt;
    &lt;li&gt;事件不断冒泡一直到DOM树的根节点，默认情况下上面绑定了这个特殊的事件处理函数。&lt;/li&gt;
    &lt;li&gt;执行由 .live() 绑定的特殊的 click 事件处理函数。&lt;/li&gt;
    &lt;li&gt;这个事件处理函数首先检测事件对象的 target 来确定是不是需要继续。这个测试是通过检测 $(event.target).closest('.clickme') 能否找到匹配的元素来实现的。&lt;/li&gt;
    &lt;li&gt;如果找到了匹配的元素，那么调用原始的事件处理函数。&lt;/li&gt;
  &lt;/ol&gt;

由于只有在事件发生时才会在上面的第五步里做测试，因此在任何时候添加的元素都能够响应这个事件。

'''附加说明'''

.live() 虽然很有用，但由于其特殊的实现方式，所以不能简单的在任何情况下替换 .bind()。主要的不同有：

&lt;ul&gt;
	&lt;li&gt;在jQuery 1.4中，.live()方法支持自定义事件，也支持所有的 JavaScript 事件。在jQuery 1.4.1中，甚至也支持 focus 和 blue 事件了（映射到更合适，并且可以冒泡的focusin和focusout上）。另外，在jQuery 1.4.1中，也能支持hover（映射到"mouseenter mouseleave"）。然而在jQuery 1.3.x中，只支持支持的JavaScript事件和自定义事件：click, dblclick, keydown, keypress, keyup, mousedown, mousemove, mouseout, mouseover, 和 mouseup.&lt;/li&gt;
	&lt;li&gt;.live() 并不完全支持通过DOM遍历的方法找到的元素。取而代之的是，应当总是在一个选择器后面直接使用 .live() 方法，正如前面例子里提到的。&lt;/li&gt;
	&lt;li&gt;当一个事件处理函数用 .live() 绑定后，要停止执行其他的事件处理函数，那么这个函数必须返回 false。 仅仅调用 .stopPropagation() 无法实现这个目的。&lt;/li&gt;
&lt;/ul&gt;

参考 .bind() 方法可以获得更多关于事件绑定的信息。

在jQuery 1.4.1中，你可以一次绑定多个事件给 .live() ，跟 .bind() 提供的功能类似。

在jQuery 1.4 中，data参数可以用于把附加信息传递给事件处理函数。一个很好的用处是应付由闭包导致的问题。可以参考 .bind() 的讨论来获得更多信息。


  <p>This method is a variation on the basic <code>.bind()</code> method for attaching event handlers to elements. When <code>.bind()</code> is called, the elements that the jQuery object refers to get the handler attached; elements that get introduced later do not, so they would require another <code>.bind()</code> call. For instance, consider the HTML:</p>
            <pre>&lt;body&gt;
  &lt;div class="clickme"&gt;
    Click here
  &lt;/div&gt;
&lt;/body&gt;
</pre>
            <p>We can bind a simple click handler to this element:</p>
            <pre>$('.clickme').bind('click', function() {
  // Bound handler called.
});
</pre>
            <p>When the element is clicked, the handler is called. However, suppose that after this, another element is added:
  </p>
            <pre>$('body').append('&lt;div class="clickme"&gt;Another target&lt;/div&gt;');</pre>
            <p>This new element also matches the selector <code>.clickme</code>, but since it was added after the call to <code>.bind()</code>, clicks on it will do nothing.</p>
            <p>The <code>.live()</code> method provides an alternative to this behavior. If we bind a click handler to the target element using this method:</p>
            <pre>$('.clickme').live('click', function() {
  // Live handler called.
});</pre>
            <p>And then later add a new element:</p>
            <pre>$('body').append('&lt;div class="clickme"&gt;Another target&lt;/div&gt;');</pre>
            <p>Then clicks on the new element will also trigger the handler.</p>
            <h4 id="event-delegation">Event Delegation</h4>
            <p>The <code>.live()</code> method is able to affect elements that have not yet been added to the DOM through the use of event delegation: a handler bound to an ancestor element is responsible for events that are triggered on its descendants. The handler passed to <code>.live()</code> is never bound to an element; instead, <code>.live()</code> binds a special handler to the root of the DOM tree. In our example, when the new element is clicked, the following steps occur:</p>
            <ol>
               <li>A click event is generated and passed to the <code>&lt;div&gt;</code> for handling.</li>
               <li>No handler is directly bound to the <code>&lt;div&gt;</code>, so the event bubbles up the DOM tree.</li>
               <li>The event bubbles up until it reaches the root of the tree, which is where <code>.live()</code> binds its special handlers by default. <br/>
                  <em>* As of jQuery 1.4, event bubbling can optionally stop at a DOM element "context".</em>
               </li>
               <li>The special <code>click</code> handler bound by <code>.live()</code> executes.</li>
               <li>This handler tests the <code>target</code> of the event object to see whether it should continue. This test is performed by checking if <code>$(event.target).closest('.clickme')</code> is able to locate a matching element.</li>
               <li>If a matching element is found, the original handler is called on it.</li>
            </ol>
            <p>Because the test in step 5 is not performed until the event occurs, elements can be added at any time and still respond to events.</p>
            <p>See the discussion for <code>
                  <a href="/bind">.bind()</a>
               </code> for more information on event binding.</p>
            <h4 id="multiple-events">Multiple Events</h4>
            <p>As of jQuery 1.4.1 <code>.live()</code> can accept multiple, space-separated events, similar to the functionality provided in <a href="/bind">.bind()</a>. For example, we can "live bind" the <code>mouseover</code> and <code>mouseout</code> events at the same time like so: </p>
            <pre>$('.hoverme').live('mouseover mouseout', function(event) {
  if (event.type == 'mouseover') {
    // do something on mouseover
  } else {
    // do something on mouseout
  }
});</pre>
            <h4 id="event-data">Event Data</h4>
            <p>As of jQuery 1.4, the optional <code>eventData</code> parameter allows us to pass additional information to the handler. One handy use of this parameter is to work around issues caused by closures. See the <code>.bind()</code> method's "<a href="/bind/#passing-event-data">Passing Event Data</a>" discussion for more information.</p>
            <h4 id="event-context">Event Context</h4>
            <p>As of jQuery 1.4, live events can be bound to a DOM element "context" rather than to the default document root. To set this context, we use the <a href="http://api.jquery.com/jquery/#selector-context">
                  <code>jQuery()</code> function's second argument</a>, passing in a single DOM element (as opposed to a jQuery collection or a selector).</p>
            <pre>$('div.clickme', $('#container')[0]).live('click', function() {
  // Live handler called.
});</pre>
            <p>The live handler in this example is called only when <code>&lt;div class="clickme"&gt;</code> is a descendant of an element with an ID of "container."</p>
            <h4 id="caveats">Caveats</h4>
            <p>The <code>.live()</code> technique is useful, but due to its special approach cannot be simply substituted for <code>.bind()</code> in all cases. Specific differences include:</p>
            <ul>
               <li>DOM traversal methods are not fully supported for finding elements to send to <code>.live()</code>. Rather, the <code>.live()</code> method should always be called directly after a selector, as in the example above.</li>
               <li>To stop further handlers from executing after one bound using <code>.live()</code>, the handler must return <code>false</code>. Calling <code>.stopPropagation()</code> will not accomplish this.</li>
               <li>In <b>jQuery 1.3.x</b> only the following JavaScript events (in addition to custom events) could be bound with <code>.live()</code>: <code>click</code>, <code>dblclick</code>, <code>keydown</code>, <code>keypress</code>, <code>keyup</code>, <code>mousedown</code>, <code>mousemove</code>, <code>mouseout</code>, <code>mouseover</code>, and <code>mouseup</code>.</li>
            </ul>
            <blockquote>
               <ul>
                  <li>As of <b>jQuery 1.4</b> the <code>.live()</code> method supports custom events as well as all JavaScript events. As of <b>jQuery 1.4.1</b> even <code>focus</code> and <code>blur</code> work with live (mapping to the more appropriate, bubbling, events <code>focusin</code> and <code>focusout</code>).</li>
                  <li>As of <b>jQuery 1.4.1</b> the <code>hover</code> event can be specified (mapping to "<code>mouseenter mouseleave</code>").</li>
               </ul>
            </blockquote>
         </longdesc>
         <example>
            <desc>Click a paragraph to add another. Note that .live() binds the click event to all paragraphs - even new ones.</desc>
         </example>
         <example>
            <desc>To display each paragraph's text in an alert box whenever it is clicked:</desc>
         </example>
         <example>
            <desc>To cancel a default action and prevent it from bubbling up, return false:</desc>
         </example>
         <example>
            <desc>To cancel only the default action by using the preventDefault method.</desc>
         </example>
         <example>
            <desc>Can bind custom events too.</desc>
         </example>
      </entry>
      <entry type="method" name="triggerHandler">
         <desc>这个特别的方法将会触发指定的事件类型上所有绑定的处理函数。但不会执行浏览器默认动作，也不会产生事件冒泡。Execute all handlers attached to an element for an event.</desc>
         <signature>
            <argument name="eventType">
               <desc>A string containing a JavaScript event type, such as <code>click</code> or <code>submit</code>.</desc>
            </argument>
            <argument name="extraParameters">
               <desc>An array of additional parameters to pass along to the event handler.</desc>
            </argument>
         </signature>
         <longdesc>这个方法的行为表现与trigger类似，但有以下三个主要区别： 
		
* 第一，他不会触发浏览器默认事件。

* 第二，只触发jQuery对象集合中第一个元素的事件处理函数。

* 第三，这个方法的返回的是事件处理函数的返回值，而不是据有可链性的jQuery对象。此外，如果最开始的jQuery对象集合为空，则这个方法返回 undefined 。
    <p>The <code>.triggerHandler()</code> method behaves similarly to <code>.trigger()</code>, with the following exceptions:</p>
            <ul>
               <li>The <code>.triggerHandler()</code> method does not cause the default behavior of an event to occur (such as a form submission).</li>
               <li>While <code>.trigger()</code> will operate on all elements matched by the jQuery object, <code>.triggerHandler()</code> only affects the first matched element.</li>
               <li>Events created with <code>.triggerHandler()</code> do not bubble up the DOM hierarchy; if they are not handled by the target element directly, they do nothing.</li>
               <li>Instead of returning the jQuery object (to allow chaining), <code>.triggerHandler()</code> returns whatever value was returned by the last handler it caused to be executed. If no handlers are triggered, it returns <code>undefined</code>
               </li>
            </ul>
            <p>For more information on this method, see the discussion for <code>
                  <a href="/trigger">.trigger()</a>
               </code>.</p>
         </longdesc>
         <example>
            <desc>If you called .triggerHandler() on a focus event - the browser's default focus action would not be triggered, only the event handlers bound to the focus event.</desc>
         </example>
      </entry>
      <entry type="method" name="trigger">
         <desc>在每一个匹配的元素上触发某类事件。Execute all handlers and behaviors attached to the matched elements for the given event type.</desc>
         <signature>
            <argument name="eventType">
               <desc>A string containing a JavaScript event type, such as <code>click</code> or <code>submit</code>.</desc>
            </argument>
            <argument name="extraParameters">
               <desc>An array of additional parameters to pass along to the event handler.</desc>
            </argument>
         </signature>
         <longdesc>这个函数也会导致浏览器同名的默认行为的执行。比如，如果用trigger()触发一个'submit'，则同样会导致浏览器提交表单。如果要阻止这种默认行为，应返回false。

你也可以触发由bind()注册的自定义事件而不限于浏览器默认事件。

事件处理函数会收到一个修复的(规范化的)事件对象，但这个对象没有特定浏览器才有的属性，比如keyCode。

jQuery也支持 &lt;a href="http://docs.jquery.com/Namespaced_Events"&gt;命名空间事件&lt;/a&gt;。这允许你触发或者解除绑定一组特定的事件处理函数，而无需一一个指定。你可以在事件类型后面加上感叹号 ! 来只触发那些没有命名空间的事件处理函数。

'''jQuery 1.3中新增：'''

所有触发的事件现在会冒泡到DOM树上了。举例来说，如果你在一个段落p上触发一个事件，他首先会在这个元素上触发，其次到父元素，在到父元素的父元素，直到触发到document对象。这个事件对象有一个 .target 属性指向最开始触发这个事件的元素。你可以用 stopPropagation() 来阻止事件冒泡，或者在事件处理函数中返回false即可。

事件对象构造器现在已经公开，并且你可以自行创建一个事件对象。这个事件对象可以直接传递给trigger所触发的事件处理函数。事件对象的完整属性列表可以在 &lt;a href="http://docs.jquery.com/Events/jQuery.Event"&gt;jQuery.Event&lt;/a&gt; 的文档里找到。

你可以有三种方式指定事件类型：

* 你可以传递字符串型的事件名称(type参数)。

* 你可以使用jQuery.Event对象。可以将数据放进这个对象，并且这个对象可以被触发的事件处理函数获取到。

* 最后，你可以传递一个带有数据的字面量对象。他将被复制到真正的jQuery.Event对象上去。 注意在这种情况下你'''必须'''指定一个 &lt;em&gt;type&lt;/em&gt; 属性。
    <p>Any event handlers attached with <code>.bind()</code> or one of its shortcut methods are triggered when the corresponding event occurs. They can be fired manually, however, with the <code>.trigger()</code> method. A call to <code>.trigger()</code> executes the handlers in the same order they would be if the event were triggered naturally by the user:</p>
            <pre>$('#foo').bind('click', function() {
      alert($(this).text());
    });
    $('#foo').trigger('click');</pre>
            <p>While <code>.trigger()</code> simulates an event activation, complete with a synthesized event object, it does not perfectly replicate a naturally-occurring event.</p>
            <p>To trigger handlers bound via jQuery without also triggering the native event, use <a href="http://api.jquery.com/triggerHandler/">
                  <code>.triggerHandler()</code>
               </a> instead. </p>
            <p>When we define a custom event type using the <code>.bind()</code> method, the second argument to <code>.trigger()</code> can become useful. For example, suppose we have bound a handler for the <code>custom</code> event to our element instead of the built-in <code>click</code> event as we did above:</p>
            <pre>$('#foo').bind('custom', function(event, param1, param2) {
  alert(param1 + "\n" + param2);
});
$('#foo').trigger('custom', ['Custom', 'Event']);
</pre>
            <p>The event object is always passed as the first parameter to an event handler, but if additional parameters are specified during a <code>.trigger()</code> call as they are here, these parameters will be passed along to the handler as well.</p>
            <p>Note the difference between the extra parameters we're passing here and the <code>eventData</code> parameter to the <a href="/bind/">.bind()</a> method. Both are mechanisms for passing information to an event handler, but the <code>extraParameters</code> argument to <code>.trigger()</code> allows information to be determined at the time the event is triggered, while the <code>eventData</code> argument to <code>.bind()</code> requires the information to be already computed at the time the handler is bound.</p>    
         </longdesc>
         <example>
            <desc>Clicks to button #2 also trigger a click for button #1.</desc>
         </example>
         <example>
            <desc>To submit the first form without using the submit() function, try:</desc>
         </example>
         <example>
            <desc>To submit the first form without using the submit() function, try:</desc>
         </example>
         <example>
            <desc>To pass arbitrary data to an event:</desc>
         </example>
         <example>
            <desc>To pass arbitrary data through an event object:</desc>
         </example>
         <example>
            <desc>Alternate way to pass data through an event object:</desc>
         </example>
      </entry>
      <entry type="method" name="ajaxComplete">
         <desc>AJAX 请求完成时执行函数。Ajax 事件。Register a handler to be called when Ajax requests complete. This is an <a href="http://docs.jquery.com/Ajax_Events">Ajax Event</a>.</desc>
         <signature>
            <argument name="handler(event, XMLHttpRequest, ajaxOptions)">
               <desc>The function to be invoked.</desc>
            </argument>
         </signature>
         <longdesc>XMLHttpRequest 对象和设置作为参数传递给回调函数。<p>Whenever an Ajax request completes, jQuery triggers the <code>ajaxComplete</code> event. Any and all handlers that have been registered with the <code>.ajaxComplete()</code> method are executed at this time.</p>
				        <p>To observe this method in action, we can set up a basic Ajax load request:</p>
				        <pre>&lt;div class="trigger"&gt;Trigger&lt;/div&gt;
&lt;div class="result"&gt;&lt;/div&gt;
&lt;div class="log"&gt;&lt;/div&gt;
</pre>
				        <p>We can attach our event handler to any element:</p>
				        <pre>$('.log').ajaxComplete(function() {
  $(this).text('Triggered ajaxComplete handler.');
});
</pre>
				        <p>Now, we can make an Ajax request using any jQuery method:</p>
				        <pre>$('.trigger').click(function() {
  $('.result').load('ajax/test.html');
});</pre>
				        <p>When the user clicks the button and the Ajax request completes, the log message is displayed.</p>

				        <p>
               <strong>Note:</strong> Because <code>.ajaxComplete()</code> is implemented as a method of jQuery object instances, we can use the <code>this</code> keyword as we do here to refer to the selected elements within the callback function.</p>

				        <p>All <code>ajaxComplete</code> handlers are invoked, regardless of what Ajax request was completed. If we must differentiate between the requests, we can use the parameters passed to the handler. Each time an <code>ajaxComplete</code> handler is executed, it is passed the event object, the <code>XMLHttpRequest</code> object, and the settings object that was used in the creation of the request. For example, we can restrict our callback to only handling events dealing with a particular URL:</p>
				        <pre>$('.log').ajaxComplete(function(e, xhr, settings) {
  if (settings.url == 'ajax/test.html') {
    $(this).text('Triggered ajaxComplete handler.');
  }
});</pre>
         </longdesc>
         <example>
            <desc>Show a message when an Ajax request completes.</desc>
         </example>
      </entry>
      <entry type="method" name="one">
         <desc>为每一个匹配元素的特定事件（像click）绑定一个一次性的事件处理函数。Attach a handler to an event for the elements. The handler is executed at most once per element.</desc>
         <signature>
            <argument name="eventType">
               <desc>A string containing one or more JavaScript event types, such as "click" or "submit," or custom event names.</desc>
            </argument>
            <argument name="eventData">
               <desc>A map of data that will be passed to the event handler.</desc>
            </argument>
            <argument name="handler(eventObject)">
               <desc>A function to execute at the time the event is triggered.</desc>
            </argument>
         </signature>
         <longdesc>在每个对象上，这个事件处理函数只会被执行一次。其他规则与bind()函数相同。这个事件处理函数会接收到一个事件对象，可以通过它来阻止（浏览器）默认的行为。如果既想取消默认的行为，又想阻止事件起泡，这个事件处理函数必须返回false。

多数情况下，可以把事件处理函数定义为匿名函数（见示例一）。在不可能定义匿名函数的情况下，可以传递一个可选的数据对象作为第二个参数（而事件处理函数则作为第三个参数），见示例二。
<p>This method is identical to <code>.bind()</code>, except that the handler is unbound after its first invocation. For example:</p>
            <pre>$('#foo').one('click', function() {
  alert('This will be displayed only once.');
});
</pre>
            <p>After the code is executed, a click on the element with ID <code>foo</code> will display the alert. Subsequent clicks will do nothing. This code is equivalent to:</p>
            <pre>$('#foo').bind('click', function(event) {
  alert('This will be displayed only once.');
  $(this).unbind(event);
});
</pre>
            <p>In other words, explicitly calling <code>.unbind()</code> from within a regularly-bound handler has exactly the same effect.</p>
         </longdesc>
         <example>
            <desc>Tie a one-time click to each div.</desc>
         </example>
         <example>
            <desc>To display the text of all paragraphs in an alert box the first time each of them is clicked:</desc>
         </example>
      </entry>
      <entry type="method" name="serializeArray">
         <desc>序列化表格元素 (类似 '.serialize()' 方法) 返回 JSON 数据结构数据。Encode a set of form elements as an array of names and values.</desc>
         <signature/>
         <longdesc>'''注意'''，此方法返回的是JSON对象而非JSON字符串。需要使用插件或者第三方库进行字符串化操作。

		返回的JSON对象是由一个对象数组组成的，其中每个对象包含一个或两个名值对——name参数和value参数（如果value不为空的话）。举例来说：
&lt;pre&gt;&lt;code&gt;  [ 
     {name: 'firstname', value: 'Hello'}, 
     {name: 'lastname', value: 'World'},
     {name: 'alias'}, // this one was empty
  ]
&lt;/code&gt;&lt;/pre&gt;
		<p>The <code>.serializeArray()</code> method creates a JavaScript array of objects, ready to be encoded as a JSON string. It operates on a jQuery object representing a set of form elements. The form elements can be of several types:</p>
				        <pre>&lt;form&gt;
  &lt;div&gt;&lt;input type="text" name="a" value="1" id="a" /&gt;&lt;/div&gt;
  &lt;div&gt;&lt;input type="text" name="b" value="2" id="b" /&gt;&lt;/div&gt;
  &lt;div&gt;&lt;input type="hidden" name="c" value="3" id="c" /&gt;&lt;/div&gt;
  &lt;div&gt;
    &lt;textarea name="d" rows="8" cols="40"&gt;4&lt;/textarea&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;select name="e"&gt;
    &lt;option value="5" selected="selected"&gt;5&lt;/option&gt;
    &lt;option value="6"&gt;6&lt;/option&gt;
    &lt;option value="7"&gt;7&lt;/option&gt;
  &lt;/select&gt;&lt;/div&gt;
  &lt;div&gt;
    &lt;input type="checkbox" name="f" value="8" id="f" /&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;input type="submit" name="g" value="Submit" id="g" /&gt;
  &lt;/div&gt;
&lt;/form&gt;</pre>
				        <p>The <code>.serializeArray()</code> method uses the standard W3C rules for <a href="http://www.w3.org/TR/html401/interact/forms.html#h-17.13.2">successful controls</a> to determine which elements it should include; in particular the element cannot be disabled and must contain a <code>name</code> attribute. No submit button value is serialized since the form was not submitted using a button. Data from file select elements is not serialized.</p>
            <p>This method can act on a jQuery object that has selected individual form elements, such as <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, and <code>&lt;select&gt;</code>. However, it is typically easier to select the <code>&lt;form&gt;</code> tag itself for serialization:</p>
				        <pre>$('form').submit(function() {
  alert($(this).serializeArray());
  return false;
});</pre>
				        <p>This produces the following data structure:</p>
				        <pre>[
  {
    name: a
    value: 1
  },
  {
    name: b
    value: 2
  },
  {
    name: c
    value: 3
  },
  {
    name: d
    value: 4
  },
  {
    name: e
    value: 5
  }
]</pre>
         </longdesc>
         <example>
            <desc>Get the values from a form, iterate through them, and append them to a results display.</desc>
         </example>
      </entry>
      <entry type="method" name="serialize">
         <desc>序列表表格内容为字符串。Encode a set of form elements as a string for submission.</desc>
         <signature/>
         <longdesc>
            <p>The <code>.serialize()</code> method creates a text string in standard URL-encoded notation. It operates on a jQuery object representing a set of form elements. The form elements can be of several types:</p>
				        <pre>&lt;form&gt;
  &lt;div&gt;&lt;input type="text" name="a" value="1" id="a" /&gt;&lt;/div&gt;
  &lt;div&gt;&lt;input type="text" name="b" value="2" id="b" /&gt;&lt;/div&gt;
  &lt;div&gt;&lt;input type="hidden" name="c" value="3" id="c" /&gt;&lt;/div&gt;
  &lt;div&gt;
    &lt;textarea name="d" rows="8" cols="40"&gt;4&lt;/textarea&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;select name="e"&gt;
    &lt;option value="5" selected="selected"&gt;5&lt;/option&gt;
    &lt;option value="6"&gt;6&lt;/option&gt;
    &lt;option value="7"&gt;7&lt;/option&gt;
  &lt;/select&gt;&lt;/div&gt;
  &lt;div&gt;
    &lt;input type="checkbox" name="f" value="8" id="f" /&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;input type="submit" name="g" value="Submit" id="g" /&gt;
  &lt;/div&gt;
&lt;/form&gt;</pre>
				        <p>The <code>.serialize()</code> method can act on a jQuery object that has selected individual form elements, such as <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, and <code>&lt;select&gt;</code>. However, it is typically easier to select the <code>&lt;form&gt;</code> tag itself for serialization:</p>
				        <pre>$('form').submit(function() {
  alert($(this).serialize());
  return false;
});</pre>
				        <p>This produces a standard-looking query string:</p>
				        <pre>a=1&amp;b=2&amp;c=3&amp;d=4&amp;e=5</pre>
            <p>Note: Only <a href="http://www.w3.org/TR/html401/interact/forms.html#h-17.13.2">"successful controls"</a> are serialized to the string. No submit button value is serialized since the form was not submitted using a button. For a form element's value to be included in the serialized string, the element must have a <code>name</code> attribute. Data from file select elements is not serialized.</p>
         </longdesc>
         <example>
            <desc>Serialize a form to a query string, that could be sent to a server in an Ajax request.</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery.ajaxSetup">
         <desc>设置全局 AJAX 默认选项。Set default values for future Ajax requests.</desc>
         <signature>
            <argument name="options">
               <desc>A set of key/value pairs that configure the default Ajax request. All options are optional. </desc>
            </argument>
         </signature>
         <longdesc>参数见 '$.ajax' 说明。<p>For details on the settings available for <code>$.ajaxSetup()</code>, see <code>
                  <a href="/jQuery.ajax">$.ajax()</a>
               </code>. </p>
				        <p>All subsequent Ajax calls using any function will use the new settings, unless overridden by the individual calls, until the next invocation of <code>$.ajaxSetup()</code>.</p>
				        <p>For example, we could set a default for the URL parameter before pinging the server repeatedly:</p>
				        <pre>$.ajaxSetup({
  url: 'ping.php',
});</pre>
				        <p>Now each time an Ajax request is made, this URL will be used automatically:</p>
				        <pre>
$.ajax({
  data: {'name': 'Tim'},
});</pre>

				        <blockquote>
               <p>Note: Global callback functions should be set with their respective global Ajax event handler methods-<code>
                     <a href="/ajaxStart">.ajaxStart()</a>
                  </code>, <code>
                     <a href="/ajaxStop">.ajaxStop()</a>
                  </code>, <code>
                     <a href="/ajaxComplete">.ajaxComplete()</a>
                  </code>, <code>
                     <a href="/ajaxError">.ajaxError()</a>
                  </code>, <code>
                     <a href="/ajaxSuccess">.ajaxSuccess()</a>
                  </code>, <code>
                     <a href="/ajaxSend">.ajaxSend()</a>
                  </code>-rather than within the <code>settings</code> object for <code>$.ajaxSetup()</code>.</p>
            </blockquote>
         </longdesc>
         <example>
            <desc>Sets the defaults for Ajax requests to the url "/xmlhttp/", disables global handlers and uses POST instead of GET. The following Ajax requests then sends some data without having to set anything else.</desc>
         </example>
      </entry>
      <entry type="method" name="ajaxSuccess">
         <desc>AJAX 请求成功时执行函数。Ajax 事件。</desc>
         <signature>
            <argument name="handler(event, XMLHttpRequest, ajaxOptions)">
               <desc>The function to be invoked.</desc>
            </argument>
         </signature>
         <longdesc>XMLHttpRequest 对象和设置作为参数传递给回调函数。
    <p>Whenever an Ajax request completes successfully, jQuery triggers the <code>ajaxSuccess</code> event. Any and all handlers that have been registered with the <code>.ajaxSuccess()</code> method are executed at this time.</p>
            <p>To observe this method in action, we can set up a basic Ajax load request:</p>
		          <pre>&lt;div class="trigger"&gt;Trigger&lt;/div&gt;
&lt;div class="result"&gt;&lt;/div&gt;
&lt;div class="log"&gt;&lt;/div&gt;</pre>
            <p>We can attach our event handler to any element:</p>
            <pre>$('.log').ajaxSuccess(function() {
  $(this).text('Triggered ajaxSuccess handler.');
});</pre>
            <p>Now, we can make an Ajax request using any jQuery method:</p>
            <pre>$('.trigger').click(function() {
  $('.result').load('ajax/test.html');
});</pre>
		          <p>When the user clicks the button and the Ajax request completes successfully, the log message is displayed.</p>


            <p>
               <strong>Note:</strong> Because <code>.ajaxSuccess()</code> is implemented as a method of jQuery object instances, we can use the <code>this</code> keyword as we do here to refer to the selected elements within the callback function.</p>

		          <p>All <code>ajaxSuccess</code> handlers are invoked, regardless of what Ajax request was completed. If we must differentiate between the requests, we can use the parameters passed to the handler. Each time an <code>ajaxSuccess</code> handler is executed, it is passed the event object, the <code>XMLHttpRequest</code> object, and the settings object that was used in the creation of the request. For example, we can restrict our callback to only handling events dealing with a particular URL:</p>
	           <pre>$('.log').ajaxSuccess(function(e, xhr, settings) {
  if (settings.url == 'ajax/test.html') {
    $(this).text('Triggered ajaxSuccess handler.');
  }
});</pre>
         </longdesc>
         <example>
            <desc>Show a message when an Ajax request completes successfully.</desc>
         </example>
      </entry>
      <entry type="method" name="ajaxStop">
         <desc>AJAX 请求结束时执行函数。Ajax 事件。Register a handler to be called when all Ajax requests have completed. This is an <a href="http://docs.jquery.com/Ajax_Events">Ajax Event</a>.</desc>
         <signature>
            <argument name="handler()">
               <desc>The function to be invoked.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>Whenever an Ajax request completes, jQuery checks whether there are any other outstanding Ajax requests. If none remain, jQuery triggers the <code>ajaxStop</code> event. Any and all handlers that have been registered with the <code>.ajaxStop()</code> method are executed at this time.</p>
            <p>To observe this method in action, we can set up a basic Ajax load request:</p>
            <pre>&lt;div class="trigger"&gt;Trigger&lt;/div&gt;
&lt;div class="result"&gt;&lt;/div&gt;
&lt;div class="log"&gt;&lt;/div&gt;</pre>
            <p>We can attach our event handler to any element:</p>
            <pre>$('.log').ajaxStop(function() {
  $(this).text('Triggered ajaxStop handler.');
});</pre>
            <p>Now, we can make an Ajax request using any jQuery method:</p>
            <pre>$('.trigger').click(function() {
  $('.result').load('ajax/test.html');
});</pre>
            <p>When the user clicks the button and the Ajax request completes, the log message is displayed.</p>
  	         <p>Because <code>.ajaxStop()</code> is implemented as a method of jQuery object instances, we can use the <code>this</code> keyword as we do here to refer to the selected elements within the callback function.</p>
         </longdesc>
         <example>
            <desc>Hide a loading message after all the Ajax requests have stopped.</desc>
         </example>
      </entry>
      <entry type="method" name="ajaxStart">
         <desc>AJAX 请求开始时执行函数。Ajax 事件。Register a handler to be called when the first Ajax request begins. This is an <a href="http://docs.jquery.com/Ajax_Events">Ajax Event</a>.</desc>
         <signature>
            <argument name="handler()">
               <desc>The function to be invoked.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>Whenever an Ajax request is about to be sent, jQuery checks whether there are any other outstanding Ajax requests. If none are in progress, jQuery triggers the <code>ajaxStart</code> event. Any and all handlers that have been registered with the <code>.ajaxStart()</code> method are executed at this time.</p>
				        <p>To observe this method in action, we can set up a basic Ajax load request:</p>
				        <pre>&lt;div class="trigger"&gt;Trigger&lt;/div&gt;
&lt;div class="result"&gt;&lt;/div&gt;
&lt;div class="log"&gt;&lt;/div&gt;</pre>
				        <p>We can attach our event handler to any element:</p>
				        <pre>$('.log').ajaxStart(function() {
  $(this).text('Triggered ajaxStart handler.');
});</pre>
				        <p>Now, we can make an Ajax request using any jQuery method:</p>
				        <pre>$('.trigger').click(function() {
  $('.result').load('ajax/test.html');
});</pre>
				        <p>When the user clicks the button and the Ajax request is sent, the log message is displayed.</p>

				        <p>
               <strong>Note:</strong> Because <code>.ajaxStart()</code> is implemented as a method of jQuery object instances, we can use the <code>this</code> keyword as we do here to refer to the selected elements within the callback function.</p>
         </longdesc>
         <example>
            <desc>Show a loading message whenever an Ajax request starts (and none is already active).</desc>
         </example>
      </entry>
      <entry type="method" name="ajaxSend">
         <desc>AJAX 请求发送前执行函数。Ajax 事件。</desc>
         <signature>
            <argument name="handler(event, XMLHttpRequest, ajaxOptions)">
               <desc>The function to be invoked.</desc>
            </argument>
         </signature>
         <longdesc>XMLHttpRequest 对象和设置作为参数传递给回调函数。
    <p>Whenever an Ajax request is about to be sent, jQuery triggers the <code>ajaxSend</code> event. Any and all handlers that have been registered with the <code>.ajaxSend()</code> method are executed at this time.</p>
            <p>To observe this method in action, we can set up a basic Ajax load request:</p>
            <pre>&lt;div class="trigger"&gt;Trigger&lt;/div&gt;
&lt;div class="result"&gt;&lt;/div&gt;
&lt;div class="log"&gt;&lt;/div&gt;</pre>
            <p>We can attach our event handler to any element:</p>
            <pre>$('.log').ajaxSend(function() {
  $(this).text('Triggered ajaxSend handler.');
});</pre>
            <p>Now, we can make an Ajax request using any jQuery method:</p>
            <pre>$('.trigger').click(function() {
  $('.result').load('ajax/test.html');
});</pre>
            <p>When the user clicks the button and the Ajax request is about to begin, the log message is displayed.</p>

            <p>
               <strong>Note:</strong> Because <code>.ajaxSend()</code> is implemented as a method of jQuery instances, we can use the <code>this</code> keyword as we do here to refer to the selected elements within the callback function.</p>

            <p>All <code>ajaxSend</code> handlers are invoked, regardless of what Ajax request is to be sent. If we must differentiate between the requests, we can use the parameters passed to the handler. Each time an <code>ajaxSend</code> handler is executed, it is passed the event object, the <code>XMLHttpRequest</code> object, and the <a href="http://api.jquery.com/jQuery.ajax/">settings object</a> that was used in the creation of the Ajax request. For example, we can restrict our callback to only handling events dealing with a particular URL:</p>
            <pre>$('.log').ajaxSend(function(e, xhr, settings) {
  if (settings.url == 'ajax/test.html') {
    $(this).text('Triggered ajaxSend handler.');
  }
});</pre>
         </longdesc>
         <example>
            <desc>Show a message before an Ajax request is sent.</desc>
         </example>
      </entry>
      <entry type="method" name="ajaxError">
         <desc>AJAX 请求发生错误时执行函数。Ajax 事件。Register a handler to be called when Ajax requests complete with an error. This is an <a href="http://docs.jquery.com/Ajax_Events">Ajax Event</a>.</desc>
         <signature>
            <argument name="handler(event, XMLHttpRequest, ajaxOptions, thrownError)">
               <desc>The function to be invoked.</desc>
            </argument>
         </signature>
         <longdesc>XMLHttpRequest 对象和设置作为参数传递给回调函数。捕捉到的错误可作为最后一个参数传递。<p>Whenever an Ajax request completes with an error, jQuery triggers the <code>ajaxError</code> event. Any and all handlers that have been registered with the <code>.ajaxError()</code> method are executed at this time.</p>
				        <p>To observe this method in action, we can set up a basic Ajax load request:</p>
				        <pre>&lt;div class="trigger"&gt;Trigger&lt;/div&gt;
&lt;div class="result"&gt;&lt;/div&gt;
&lt;div class="log"&gt;&lt;/div&gt;</pre>
				        <p>We can attach our event handler to any element:</p>
				        <pre>$('.log').ajaxError(function() {
  $(this).text('Triggered ajaxError handler.');
});</pre>
				        <p>Now, we can make an Ajax request using any jQuery method:</p>
				        <pre>$('.trigger').click(function() {
  $('.result').load('ajax/missing.html');
});</pre>
				        <p>When the user clicks the button and the Ajax request fails, because the requested file is missing, the log message is displayed.</p>

				        <p>
               <strong>Note:</strong> Because <code>.ajaxError()</code> is implemented as a method of jQuery object instances, we can use the <code>this</code> keyword as we do here to refer to the selected elements within the callback function.</p>

				        <p>All <code>ajaxError</code> handlers are invoked, regardless of what Ajax request was completed. If we must differentiate between the requests, we can use the parameters passed to the handler. Each time an <code>ajaxError</code> handler is executed, it is passed the event object, the <code>XMLHttpRequest</code> object, and the settings object that was used in the creation of the request. If the request failed because JavaScript raised an exception, the exception object is passed to the handler as a fourth parameter. For example, we can restrict our callback to only handling events dealing with a particular URL:</p>
				        <pre>$('.log').ajaxError(function(e, xhr, settings, exception) {
  if (settings.url == 'ajax/missing.html') {
    $(this).text('Triggered ajaxError handler.');
  }
});</pre>
         </longdesc>
         <example>
            <desc>Show a message when an Ajax request fails.</desc>
         </example>
      </entry>
      <entry type="method" name="unbind">
         <desc>bind()的反向操作，从每一个匹配的元素中删除绑定的事件。Remove a previously-attached event handler from the elements.</desc>
         <signature>
            <argument name="eventType">
               <desc>A string containing a JavaScript event type, such as <code>click</code> or <code>submit</code>.</desc>
            </argument>
            <argument name="handler(eventObject)">
               <desc>The function that is to be no longer executed.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="event">
               <desc>A JavaScript event object as passed to an event handler.</desc>
            </argument>
         </signature>
         <longdesc>如果没有参数，则删除所有绑定的事件。

你可以将你用bind()注册的自定义事件取消绑定。

如果提供了事件类型作为参数，则只删除该类型的绑定事件。

如果把在绑定时传递的处理函数作为第二个参数，则只有这个特定的事件处理函数会被删除。
    <p>Any handler that has been attached with <code>.bind()</code> can be removed with <code>.unbind()</code>. In the simplest case, with no arguments, <code>.unbind()</code> removes all handlers attached to the elements:</p>
            <pre>$('#foo').unbind();</pre>
            <p>This version removes the handlers regardless of type. To be more precise, we can pass an event type:</p>
            <pre>$('#foo').unbind('click');</pre>
            <p>By specifying the <code>click</code> event type, only handlers for that event type will be unbound. This approach can still have negative ramifications if other scripts might be attaching behaviors to the same element, however. Robust and extensible applications typically demand the two-argument version for this reason:</p>
            <pre>var handler = function() {
  alert('The quick brown fox jumps over the lazy dog.');
};
$('#foo').bind('click', handler);
$('#foo').unbind('click', handler);
</pre>
            <p>By naming the handler, we can be assured that no other functions are caught in the crossfire. Note that the following will <em>not</em> work:</p>
            <pre>$('#foo').bind('click', function() {
  alert('The quick brown fox jumps over the lazy dog.');
});

$('#foo').unbind('click', function() {
  alert('The quick brown fox jumps over the lazy dog.');
});</pre>
            <p>Even though the two functions are identical in content, they are created separately and so JavaScript is free to keep them as distinct function objects. To unbind a particular handler, we need a reference to that function and not a different one that happens to do the same thing.</p>
            <h4>Using Namespaces</h4>
            <p>Instead of maintaining references to handlers in order to unbind them, we can namespace the events and use this capability to narrow the scope of our unbinding actions. As shown in the discussion for the <code>.bind()</code> method, namespaces are defined by using a period (<code>.</code>) character when binding a handler:</p>
            <pre>$('#foo').bind('click.myEvents', handler);</pre>
            <p>When a handler is bound in this fashion, we can still unbind it the normal way:</p>
            <pre>$('#foo').unbind('click');</pre>
            <p>However, if we want to avoid affecting other handlers, we can be more specific:</p>
            <pre>$('#foo').unbind('click.myEvents');</pre>
            <p>If multiple namespaced handlers are bound, we can unbind them at once:</p>
            <pre>$('#foo').unbind('click.myEvents.yourEvents');</pre>
            <p>This syntax is similar to that used for CSS class selectors; they are not hierarchical. This method call is thus the same as:</p>
            <pre>$('#foo').unbind('click.yourEvents.myEvents');</pre>
            <p>We can also unbind all of the handlers in a namespace, regardless of event type:</p>
            <pre>$('#foo').unbind('.myEvents');</pre>
            <p>It is particularly useful to attach namespaces to event bindings when we are developing plug-ins or otherwise writing code that may interact with other event-handling code in the future.</p>
            <h4>Using the Event Object</h4>
            <p>The second form of the <code>.unbind()</code> method is used when we wish to unbind a handler from within itself. For example, suppose we wish to trigger an event handler only three times:</p>
            <pre>var timesClicked = 0;
$('#foo').bind('click', function(event) {
  alert('The quick brown fox jumps over the lazy dog.');
  timesClicked++;
  if (timesClicked &gt;= 3) {
    $(this).unbind(event);
  }
});
</pre>
            <p>The handler in this case must take a parameter, so that we can capture the event object and use it to unbind the handler after the third click. The event object contains the context necessary for <code>.unbind()</code> to know which handler to remove.
This example is also an illustration of a closure. Since the handler refers to the <code>timesClicked</code> variable, which is defined outside the function, incrementing the variable has an effect even between invocations of the handler.</p>
         </longdesc>
         <example>
            <desc>Can bind and unbind events to the colored button.</desc>
         </example>
         <example>
            <desc>To unbind all events from all paragraphs, write:</desc>
         </example>
         <example>
            <desc>To unbind all click events from all paragraphs, write:</desc>
         </example>
         <example>
            <desc>To unbind just one previously bound handler, pass the function in as the second argument:</desc>
         </example>
      </entry>
      <entry type="method" name="bind">
         <desc>为每个匹配元素的特定事件绑定事件处理函数。 为每一个匹配元素一个或多个事件绑定事件处理器函数。Attach a handler to an event for the elements.</desc>
         <signature>
            <argument name="eventType">
               <desc>A string containing one or more JavaScript event types, such as "click" or "submit," or custom event names.</desc>
            </argument>
            <argument name="eventData">
               <desc>A map of data that will be passed to the event handler.</desc>
            </argument>
            <argument name="handler(eventObject)">
               <desc>A function to execute each time the event is triggered.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="events">
               <desc>A map of one or more JavaScript event types and functions to execute for them.</desc>
            </argument>
         </signature>
         <longdesc>.bind() 方法是用于往文档上附加行为的主要方式。所有JavaScript事件对象，比如focus, mouseover, 和 resize，都是可以作为type参数传递进来的。
		
jQuery还提供了一些绑定这些标准事件类型的简单方式，比如.click()用于简化.bind('click')。一共有以下这些：blur, focus, focusin, focusout, load, resize, scroll, unload, click, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, error 。

任何作为type参数的字符串都是合法的；如果一个字符串不是原生的JavaScript事件名，那么这个事件处理函数会绑定到一个自定义事件上。这些自定义事件绝对不会由浏览器触发，但可以通过使用.trigger()或者.triggerHandler()在其他代码中手动触发。

如果type参数的字符串中包含一个点(.)字符，那么这个事件就看做是有命名空间的了。这个点字符就用来分隔事件和他的命名空间。举例来说，如果执行 .bind('click.name', handler) ，那么字符串中的 click 是事件类型，而字符串 name 就是命名空间。命名空间允许我们取消绑定或者触发一些特定类型的事件，而不用触发别的事件。参考unbind()来获取更多信息。

当一个事件传到一个元素上，所有绑定在上面的针对哪个事件的处理函数都会触发。如果注册了多个事件处理函数，总是按照绑定的顺序依次触发。当所有绑定的事件处理函数执行完毕后，事件继续沿着普通的事件冒泡途径上浮。

.bind()最基本的用法是：

&lt;pre&gt;
$('#foo').bind('click', function() {
  alert('User clicked on "foo."');
});
&lt;/pre&gt;

这个代码能使ID为foo的元素响应click事件。当用户点击元素内部之后，就会弹出一个警告框。

'''多个事件'''

依次可以绑定多个事件类型，每个事件类型用空格分隔：

&lt;pre&gt;
$('#foo').bind('mouseenter mouseleave', function() {
  $(this).toggleClass('entered');
});
&lt;/pre&gt;

这个代码让一个&amp;lt;div id="foo"&amp;gt;元素（初始情况下class没有设置成entered），当鼠标移进去的时候，在class中加上entered，而当鼠标移出这个div的时候，则去除这个class值。

在jQuery 1.4中，我们也可以通过传入一个映射对来一次绑定多个事件处理函数：

&lt;pre&gt;
$('#foo').bind({
  click: function() {
    // do something on click
  },
  mouseenter: function() {
    // do something on mouseenter
  }
});
&lt;/pre&gt;

'''事件处理函数'''

fn这个参数接受一个回调函数，就像先前展示的那样。在这个事件处理函数内部，this指向这个函数绑定的DOM元素。如果要让这个元素变成jQuery对象来使用jQuery的方法，可以把这个对象传入 $() 重新封装。比如说：

&lt;pre&gt;$('#foo').bind('click', function() {
  alert($(this).text());
});
&lt;/pre&gt;

这个代码执行之后，当用户点击了ID为foo的元素内部之后，他的文本内容就会出现在一个警告框中。

'''事件对象'''

fn这个参数的回调函数还可以接受一个参数。当这个函数被调用时，一个JavaScript事件对象会作为一个参数传进来。

这个事件对象通常是没有必要且可以省略的参数，因为当这个事件处理函数绑定的时候就能够明确知道他在触发的时候应该做些什么，通常就已经可以获得充分的信息了。然而在有些时候，在事件初始化的时候需要获取更多关于用户环境的信息。可以参考完整的关于&lt;a href="/category/events/event-object/"&gt;事件对象&lt;/a&gt;的内容（英文）。

在事件处理函数内返回false就等价于执行事件对象上的.preventDefault()和.stopPropagation()。

可以像这样在事件处理函数内使用事件对象：

&lt;pre&gt;$(document).ready(function() {
  $('#foo').bind('click', function(event) {
    alert('The mouse cursor is at ('
      + event.pageX + ', ' + event.pageY + ')');
  });
});
&lt;/pre&gt;

注意，这个参数添加到了一个匿名函数上。这个代码可以让用户在点击ID为foo的元素时，报告鼠标点击时相对于页面的坐标。

'''传递事件数据'''

可选的第二个参数data通常用的很少。如果提供了这个参数，那么我们就能把一些附加信息传递给事件处理函数了。这个参数有个很好的用处，就是处理闭包带来的问题。比如我们有两个事件处理函数要指向同一个内部变量：

&lt;pre&gt;var message = 'Spoon!';
$('#foo').bind('click', function() {
  alert(message);
});
message = 'Not in the face!';
$('#bar').bind('click', function() {
  alert(message);
});
&lt;/pre&gt;

由于这两个函数在他们各自的环境中都有message，所以触发时显示的消息都是 Not in the face! 。变量值被改变了。为了回避这个问题，我们可以把message变量作为data参数传递进去：

&lt;pre&gt;var message = 'Spoon!';
$('#foo').bind('click', {msg: message}, function(event) {
  alert(event.data.msg);
});
message = 'Not in the face!';
$('#bar').bind('click', {msg: message}, function(event) {
  alert(event.data.msg);
});
&lt;/pre&gt;

这时在函数内部不再直接指向这个变量了；取而代之的是按值传递给了data参数，他能保持绑定事件时的值。第一个函数现在会显示Spoon!，而第二个则显示Not in the face!

注意，如果这个对象按引用传递给了函数，那么将会使情况变得极其复杂。

另外，可以参考.trigger()方法来了解如何在事件触发时传递数据，而不是在事件绑定的时候传递数据。

在jQuery 1.4中，不再支持把数据以及事件附加到一个object、embed或者applet元素上面。因为当往Java applet元素上附加数据时，会触发一个严重错误警告。
		<p>The <code>.bind()</code> method is the primary means of attaching behavior to a document. All JavaScript event types, such as <code>focus</code>, <code>mouseover</code>, and <code>resize</code>, are allowed for <code>eventType.</code> (The <code>beforeunload</code> and <code>error</code> events on the <code>window</code> object use nonstandard conventions and are not supported by jQuery; attach a handler directly to the <code>window</code> object instead.) </p>
            <p>The jQuery library provides shortcut methods for binding the standard event types, such as <code>.click()</code> for <code>.bind('click')</code>. A description of each can be found in the discussion of its shortcut method: <a href="/blur">blur</a>, <a href="/focus">focus</a>, <a href="/focusin">focusin</a>, <a href="/focusout">focusout</a>, <a href="/load-event">load</a>, <a href="/resize">resize</a>, <a href="/scroll">scroll</a>, <a href="/unload">unload</a>, <a href="/click">click</a>, <a href="/dblclick">dblclick</a>, <a href="/mousedown">mousedown</a>, <a href="/mouseup">mouseup</a>, <a href="/mousemove">mousemove</a>, <a href="/mouseover">mouseover</a>, <a href="/mouseout">mouseout</a>, <a href="/mouseenter">mouseenter</a>, <a href="/mouseleave">mouseleave</a>, <a href="/change">change</a>, <a href="/select">select</a>, <a href="/submit">submit</a>, <a href="/keydown">keydown</a>, <a href="/keypress">keypress</a>, <a href="/keyup">keyup</a>,  <a href="/error">error</a>
            </p>

            <p>Any string is legal for <code>eventType</code>; if the string is not the name of a native JavaScript event, then the handler is bound to a custom event. These events are never called by the browser, but may be triggered manually from other JavaScript code using <code>.trigger()</code> or <code>.triggerHandler()</code>.</p>
            <p>If the <code>eventType</code> string contains a period (<code>.</code>) character, then the event is namespaced. The period character separates the event from its namespace. For example, in the call <code>.bind('click.name', handler)</code>, the string <code>click</code> is the event type, and the string <code>name</code> is the namespace. Namespacing allows us to unbind or trigger some events of a type without affecting others. See the discussion of <code>.unbind()</code> for more information.</p>
            <p>When an event reaches an element, all handlers bound to that event type for the element are fired. If there are multiple handlers registered, they will always execute in the order in which they were bound. After all handlers have executed, the event continues along the normal event propagation path.</p>
            <p>A basic usage of <code>.bind()</code> is:</p>
            <pre>
$('#foo').bind('click', function() {
  alert('User clicked on "foo."');
});
</pre>
            <p>This code will cause the element with an ID of <code>foo</code> to respond to the <code>click</code> event. When a user clicks inside this element thereafter, the alert will be shown.</p>
            <h4 id="multiple-events">Multiple Events</h4>
            <p>Multiple event types can be bound at once by including each one separated by a space:</p>
            <pre>
$('#foo').bind('mouseenter mouseleave', function() {
  $(this).toggleClass('entered');
});
</pre>
            <p>The effect of this on <code>&lt;div id="foo"&gt;</code> (when it does not initially have the "entered" class) is to add the "entered" class when the mouse enters the <code>&lt;div&gt;</code> and remove the class when the mouse leaves. </p>
            <p>As of jQuery 1.4 we can bind multiple event handlers simultaneously by passing a map of event type/handler pairs:</p>
            <pre>
$('#foo').bind({
  click: function() {
    // do something on click
  },
  mouseenter: function() {
    // do something on mouseenter
  }
});
</pre>
            <h4 id="event-handlers">Event Handlers</h4>
            <p>The <code>handler</code> parameter takes a callback function, as shown above. Within the handler, the keyword <code>this</code> refers to the DOM element to which the handler is bound. To make use of the element in jQuery, it can be passed to the normal <code>$()</code> function. For example:</p>
            <pre>$('#foo').bind('click', function() {
  alert($(this).text());
});
</pre>
            <p>After this code is executed, when the user clicks inside the element with an ID of <code>foo</code>, its text contents will be shown as an alert.
</p>
            <p>As of jQuery 1.4.2 duplicate event handlers can be bound to an element instead of being discarded. For example:</p>
            <pre>function test(){ alert("Hello"); }
$("button").click( test );
$("button").click( test );</pre>
            <p>The above will generate two alerts when the button is clicked.</p>

            <h4 id="event-object">
               <a href="/category/events/event-object/">The Event object</a>
            </h4>
            <p>The <code>handler</code> callback function can also take parameters. When the function is called, the JavaScript event object will be passed to the first parameter.</p>
            <p>The event object is often unnecessary and the parameter omitted, as sufficient context is usually available when the handler is bound to know exactly what needs to be done when the handler is triggered. However, at times it becomes necessary to gather more information about the user's environment at the time the event was initiated. <a href="/category/events/event-object/">View the full Event Object</a>.</p>

            <p>Returning <code>false</code> from a handler is equivalent to calling both <code>.preventDefault()</code> and <code>.stopPropagation()</code> on the event object.</p>
            <p>Using the event object in a handler looks like this:</p>
            <pre>$(document).ready(function() {
  $('#foo').bind('click', function(event) {
    alert('The mouse cursor is at ('
      + event.pageX + ', ' + event.pageY + ')');
  });
});
</pre>
            <p>Note the parameter added to the anonymous function. This code will cause a click on the element with ID <code>foo</code> to report the page coordinates of the mouse cursor at the time of the click.</p>

            <h4 id="passing-event-data">Passing Event Data</h4>
            <p>The optional <code>eventData</code> parameter is not commonly used. When provided, this argument allows us to pass additional information to the handler. One handy use of this parameter is to work around issues caused by closures. For example, suppose we have two event handlers that both refer to the same external variable:</p>
            <pre>var message = 'Spoon!';
$('#foo').bind('click', function() {
  alert(message);
});
message = 'Not in the face!';
$('#bar').bind('click', function() {
  alert(message);
});
</pre>
            <p>Because the handlers are closures that both have <code>message</code> in their environment, both will display the message <span class="output">Not in the face!</span> when triggered. The variable's value has changed. To sidestep this, we can pass the message in using <code>eventData</code>:
</p>
            <pre>var message = 'Spoon!';
$('#foo').bind('click', {msg: message}, function(event) {
  alert(event.data.msg);
});
message = 'Not in the face!';
$('#bar').bind('click', {msg: message}, function(event) {
  alert(event.data.msg);
});
</pre>
            <p>This time the variable is not referred to directly within the handlers; instead, the variable is passed in <em>by value</em> through <code>eventData</code>, which fixes the value at the time the event is bound. The first handler will now display <span class="output">Spoon!</span> while the second will alert <span class="output">Not in the face!</span>
            </p>
            <blockquote>
               <p>Note that objects are passed to functions <em>by reference</em>, which further complicates this scenario.</p>
            </blockquote>
            <p>If <code>eventData</code> is present, it is the second argument to the <code>.bind()</code> method; if no additional data needs to be sent to the handler, then the callback is passed as the second and final argument.</p>
            <blockquote>
               <p>See the <code>.trigger()</code> method reference for a way to pass data to a handler at the time the event happens rather than when the handler is bound.</p>
            </blockquote>

            <p>As of jQuery 1.4 we can no longer attach data (and thus, events) to object, embed, or applet elements because critical errors occur when attaching data to Java applets.</p>
         </longdesc>
         <example>
            <desc>Handle click and double-click for the paragraph.  Note: the coordinates are window relative, so in this case relative to the demo iframe.</desc>
         </example>
         <example>
            <desc>To display each paragraph's text in an alert box whenever it is clicked:</desc>
         </example>
         <example>
            <desc>You can pass some extra data before the event handler:</desc>
         </example>
         <example>
            <desc>Cancel a default action and prevent it from bubbling up by returning <code>false</code>:</desc>
         </example>
         <example>
            <desc>Cancel only the default action by using the .preventDefault() method.</desc>
         </example>
         <example>
            <desc>Stop an event from bubbling without preventing the default action by using the .stopPropagation() method.</desc>
         </example>
         <example>
            <desc>Bind custom events.</desc>
         </example>
         <example>
            <desc>Bind multiple events simultaneously.</desc>
         </example>
      </entry>
      <entry type="method" name="first">
         <desc>获取第一个元素Reduce the set of matched elements to the first in the set.</desc>
         <signature/>
         <longdesc>[<p>Given a jQuery object that represents a set of DOM elements, the <code>.first()</code> method constructs a new jQuery object from the first matching element.</p>
            <p>Consider a page with a simple list on it:</p>
            <pre>
&lt;ul&gt;
  &lt;li&gt;list item 1&lt;/li&gt;
  &lt;li&gt;list item 2&lt;/li&gt;
  &lt;li&gt;list item 3&lt;/li&gt;
  &lt;li&gt;list item 4&lt;/li&gt;
  &lt;li&gt;list item 5&lt;/li&gt;
&lt;/ul&gt;
</pre>
            <p>We can apply this method to the set of list items:</p>
            <pre>$('li').first().css('background-color', 'red');</pre>
            <p>The result of this call is a red background for the first item.</p>
         </longdesc>
         <example>
            <desc>Highlight the first span in a paragraph.</desc>
         </example>
      </entry>
      <entry type="method" name="last">
         <desc>获取最后个元素Reduce the set of matched elements to the final one in the set.</desc>
         <signature/>
         <longdesc>[<p>Given a jQuery object that represents a set of DOM elements, the <code>.last()</code> method constructs a new jQuery object from the last matching element.</p>
            <p>Consider a page with a simple list on it:</p>
            <pre>
&lt;ul&gt;
  &lt;li&gt;list item 1&lt;/li&gt;
  &lt;li&gt;list item 2&lt;/li&gt;
  &lt;li&gt;list item 3&lt;/li&gt;
  &lt;li&gt;list item 4&lt;/li&gt;
  &lt;li&gt;list item 5&lt;/li&gt;
&lt;/ul&gt;
</pre>
            <p>We can apply this method to the set of list items:</p>
            <pre>$('li').last().css('background-color', 'red');</pre>
            <p>The result of this call is a red background for the final item.</p>
         </longdesc>
         <example>
            <desc>Highlight the last span in a paragraph.</desc>
         </example>
      </entry>
      <entry type="method" name="slice">
         <desc>选取一个匹配的子集Reduce the set of matched elements to a subset specified by a range of indices.</desc>
         <signature>
            <argument name="start">
               <desc>An integer indicating the 0-based position after which the elements are selected. If negative, it indicates an offset from the end of the set.</desc>
            </argument>
            <argument name="end">
               <desc>An integer indicating the 0-based position before which the elements stop being selected. If negative, it indicates an offset from the end of the set. If omitted, the range continues until the end of the set.</desc>
            </argument>
         </signature>
         <longdesc>与原来的slice方法类似<p>Given a jQuery object that represents a set of DOM elements, the <code>.slice()</code> method constructs a new jQuery object from a subset of the matching elements. The supplied <code>start</code> index identifies the position of one of the elements in the set; if <code>end</code> is omitted, all elements after this one will be included in the result.</p>
            <p>Consider a page with a simple list on it:</p>
            <pre>
&lt;ul&gt;
  &lt;li&gt;list item 1&lt;/li&gt;
  &lt;li&gt;list item 2&lt;/li&gt;
  &lt;li&gt;list item 3&lt;/li&gt;
  &lt;li&gt;list item 4&lt;/li&gt;
  &lt;li&gt;list item 5&lt;/li&gt;
&lt;/ul&gt;
</pre>
            <p>We can apply this method to the set of list items:</p>
            <pre>$('li').slice(2).css('background-color', 'red');</pre>
            <p>The result of this call is a red background for items 3, 4, and 5. Note that the supplied index is zero-based, and refers to the position of elements within the jQuery object, not within the DOM tree.</p>
            <p>The end parameter allows us to limit the selected range even further. For example:</p>
            <pre>$('li').slice(2, 4).css('background-color', 'red');</pre>
            <p>Now only items 3 and 4 are selected. The index is once again zero-based; the range extends up to but not including the specified index.</p>
            <h4>Negative Indices</h4>
            <p>The jQuery <code>.slice()</code> method is patterned after the JavaScript .slice() method for arrays. One of the features that it mimics is the ability for negative numbers to be passed as either the <code>start</code> or <code>end</code> parameter. If a negative number is provided, this indicates a position starting from the end of the set, rather than the beginning. For example:</p>
            <pre>$('li').slice(-2, -1).css('background-color', 'red');</pre>
            <p>This time only list item 4 is turned red, since it is the only item in the range between two from the end (<code>-2</code>) and one from the end (<code>-1</code>).</p>
         </longdesc>
         <example>
            <desc>Turns divs yellow based on a random slice.</desc>
         </example>
         <example>
            <desc>Selects all paragraphs, then slices the selection to include only the first element.</desc>
         </example>
         <example>
            <desc>Selects all paragraphs, then slices the selection to include only the first and second element.</desc>
         </example>
         <example>
            <desc>Selects all paragraphs, then slices the selection to include only the second element.</desc>
         </example>
         <example>
            <desc>Selects all paragraphs, then slices the selection to include only the second and third element.</desc>
         </example>
         <example>
            <desc>Selects all paragraphs, then slices the selection to include only the third element.</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery">
         <desc>这个函数接收一个包含 CSS 选择器的字符串，然后用这个字符串去匹配一组元素。 根据提供的原始 HTML 标记字符串，动态创建由 jQuery 对象包装的 DOM 元素。 根据提供的原始 HTML 标记字符串，动态创建由 jQuery 对象包装的 DOM 元素。同时设置一系列的属性、事件等。 将一个或多个DOM元素转化为jQuery对象。 返回一个空的jQuery对象。 $(document).ready()的简写。Accepts a string containing a CSS selector which is then used to match a set of elements.</desc>
         <signature>
            <argument name="selector">
               <desc>A string containing a selector expression</desc>
            </argument>
            <argument name="context">
               <desc>A DOM Element, Document, or jQuery to use as context</desc>
            </argument>
         </signature>
         <signature>
            <argument name="element">
               <desc>A DOM element to wrap in a jQuery object.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="elementArray">
               <desc>An array containing a set of DOM elements to wrap in a jQuery object.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="jQuery object">
               <desc>An existing jQuery object to clone.</desc>
            </argument>
         </signature>
         <signature/>
         <longdesc>jQuery 的核心功能都是通过这个函数实现的。 jQuery中的一切都基于这个函数，或者说都是在以某种方式使用这个函数。这个函数最基本的用法就是向它传递一个表达式（通常由 CSS 选择器组成），然后根据这个表达式来查找所有匹配的元素。

默认情况下, 如果没有指定context参数，$()将在当前的 HTML document中查找 DOM 元素；如果指定了 context 参数，如一个 DOM 元素集或 jQuery 对象，那就会在这个 context 中查找。在jQuery 1.3.2以后，其返回的元素顺序等同于在context中出现的先后顺序。

参考文档中 选择器 部分获取更多用于 expression 参数的 CSS 语法的信息。你可以传递一个手写的 HTML 字符串，或者由某些模板引擎或插件创建的字符串，也可以是通过 AJAX 加载过来的字符串。但是在你创建 input 元素的时会有限制，可以参考第二个示例。当然这个字符串可以包含斜杠 (比如一个图像地址)，还有反斜杠。当你创建单个元素时，请使用闭合标签或 XHTML 格式。例如，创建一个 span ，可以用 $("&amp;lt;span/&amp;gt;") 或 $("&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;") ，但不推荐 $("&amp;lt;span&amp;gt;")。在jQuery 中，这个语法等同于$(document.createElement("span")) 。这个函数也可以接收XML文档和Window对象（虽然它们不是DOM元素）作为有效的参数。jQuery 1.4中，如果不提供任何参数，则返回一个空jQuery对象。在先前版本中，这会返回一个包含document节点的对象。允许你绑定一个在DOM文档载入完成后执行的函数。这个函数的作用如同$(document).ready()一样，只不过用这个函数时，需要把页面中所有需要在 DOM 加载完成时执行的$()操作符都包装到其中来。从技术上来说，这个函数是可链接的－－但真正以这种方式链接的情况并不多。

你可以在一个页面中使用任意多个$(document).ready事件。参考 ready(Function) 获取更多 ready 事件的信息。
      <p>In the first formulation listed above,  <code>jQuery()</code> — which can also be written as <code>$()</code> — searches through the DOM for any elements that match the provided selector and creates a new jQuery object that references these elements:</p>
            <pre>$('div.foo');</pre>
            <h4 id="selector-context">Selector Context</h4>
            <p>By default, selectors perform their searches within the DOM starting at the document root. However, an alternate context can be given for the search by using the optional second parameter to the  <code>$()</code> function. For example, if within a callback function we wish to do a search for an element, we can restrict that search:</p>
            <pre>
$('div.foo').click(function() {
  $('span', this).addClass('bar');
});
</pre>
            <p>Since we've restricted the span selector to the context of <code>this</code>, only spans within the clicked element will get the additional class.</p>
            <p>Internally, selector context is implemented with the <code>.find()</code> method, so  <code>$('span', this)</code> is equivalent to  <code>$(this).find('span')</code>.</p>
            <h4 id="using-dom-elements">Using DOM elements</h4>
            <p>The second and third formulations of this function allow us to create a jQuery object using a DOM element or elements that we have already found in some other way. A common use of this facility is to call jQuery methods on an element that has been passed to a callback function through the keyword <code>this</code>:</p>
            <pre>
$('div.foo').click(function() {
  $(this).slideUp();
});
</pre>
            <p>This example causes elements to be hidden with a sliding animation when clicked. Because the handler receives the clicked item in the <code>this</code> keyword as a bare DOM element, the element must be wrapped in a jQuery object before we can call jQuery methods on it.</p>
            <p>When XML data is returned from an Ajax call, we can use the  <code>$()</code> function to wrap it in a jQuery object that we can easily work with. Once this is done, we can retrieve individual elements of the XML structure using <code>.find()</code> and other DOM traversal methods.</p>
            <h4 id="cloning-jquery-objects">Cloning jQuery Objects</h4>
            <p>When a jQuery object is passed as a parameter to the  <code>$()</code> function, a clone of the object is created. This new jQuery object references the same DOM elements as the initial one.</p>
            <h4 id="returning-empty-set">Returning an Empty Set</h4>
            <p>As of jQuery 1.4,  calling the <code>jQuery()</code> method with <em>no arguments</em> returns an empty jQuery set. In previous versions of jQuery, this would return a set containing the document node.</p>
         </longdesc>
         <example>
            <desc>Finds all p elements that are children of a div element.</desc>
         </example>
         <example>
            <desc>Finds all inputs of type radio within the first form in the document.</desc>
         </example>
         <example>
            <desc>Finds all div elements within an XML document from an Ajax response.</desc>
         </example>
         <example>
            <desc>Sets the background color of the page to black.</desc>
         </example>
         <example>
            <desc>Hides all the input elements within a form.</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery">
         <desc>这个函数接收一个包含 CSS 选择器的字符串，然后用这个字符串去匹配一组元素。 根据提供的原始 HTML 标记字符串，动态创建由 jQuery 对象包装的 DOM 元素。 根据提供的原始 HTML 标记字符串，动态创建由 jQuery 对象包装的 DOM 元素。同时设置一系列的属性、事件等。 将一个或多个DOM元素转化为jQuery对象。 返回一个空的jQuery对象。 $(document).ready()的简写。Creates DOM elements on the fly from the provided string of raw HTML.</desc>
         <signature>
            <argument name="html">
               <desc>A string of HTML to create on the fly. Note that this parses HTML, <strong>not</strong> XML.</desc>
            </argument>
            <argument name="ownerDocument">
               <desc>A document in which the new elements will be created</desc>
            </argument>
         </signature>
         <signature>
            <argument name="html">
               <desc>A string defining a single, standalone, HTML element (e.g. &lt;div/&gt; or &lt;div&gt;&lt;/div&gt;).</desc>
            </argument>
            <argument name="props">
               <desc>An map of attributes, events, and methods to call on the newly-created element.</desc>
            </argument>
         </signature>
         <longdesc>jQuery 的核心功能都是通过这个函数实现的。 jQuery中的一切都基于这个函数，或者说都是在以某种方式使用这个函数。这个函数最基本的用法就是向它传递一个表达式（通常由 CSS 选择器组成），然后根据这个表达式来查找所有匹配的元素。

默认情况下, 如果没有指定context参数，$()将在当前的 HTML document中查找 DOM 元素；如果指定了 context 参数，如一个 DOM 元素集或 jQuery 对象，那就会在这个 context 中查找。在jQuery 1.3.2以后，其返回的元素顺序等同于在context中出现的先后顺序。

参考文档中 选择器 部分获取更多用于 expression 参数的 CSS 语法的信息。你可以传递一个手写的 HTML 字符串，或者由某些模板引擎或插件创建的字符串，也可以是通过 AJAX 加载过来的字符串。但是在你创建 input 元素的时会有限制，可以参考第二个示例。当然这个字符串可以包含斜杠 (比如一个图像地址)，还有反斜杠。当你创建单个元素时，请使用闭合标签或 XHTML 格式。例如，创建一个 span ，可以用 $("&amp;lt;span/&amp;gt;") 或 $("&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;") ，但不推荐 $("&amp;lt;span&amp;gt;")。在jQuery 中，这个语法等同于$(document.createElement("span")) 。这个函数也可以接收XML文档和Window对象（虽然它们不是DOM元素）作为有效的参数。jQuery 1.4中，如果不提供任何参数，则返回一个空jQuery对象。在先前版本中，这会返回一个包含document节点的对象。允许你绑定一个在DOM文档载入完成后执行的函数。这个函数的作用如同$(document).ready()一样，只不过用这个函数时，需要把页面中所有需要在 DOM 加载完成时执行的$()操作符都包装到其中来。从技术上来说，这个函数是可链接的－－但真正以这种方式链接的情况并不多。

你可以在一个页面中使用任意多个$(document).ready事件。参考 ready(Function) 获取更多 ready 事件的信息。
      <h4 id="creating-new-elements">Creating New Elements</h4>
            <p>If a string is passed as the parameter to  <code>$()</code>, jQuery examines the string to see if it looks like HTML (i.e., it has <code>&lt;tag ... &gt;</code> somewhere within the string). If not, the string is interpreted as a selector expression, as explained above. But if the string appears to be an HTML snippet, jQuery attempts to create new DOM elements as described by the HTML. Then a jQuery object is created and returned that refers to these elements. We can perform any of the usual jQuery methods on this object:</p>
            <pre>$('&lt;p id="test"&gt;My &lt;em&gt;new&lt;/em&gt; text&lt;/p&gt;').appendTo('body');</pre>
            <p>When the HTML is more complex than a single tag without attributes, as it is in the above example, the actual creation of the elements is handled by the browser's <code>innerHTML</code> mechanism. Specifically, jQuery creates a new &lt;div&gt; element and sets the innerHTML property of the element to the HTML snippet that was passed in. When the parameter has a single tag, such as  <code>$('&lt;img /&gt;')</code> or  <code>$('&lt;a&gt;&lt;/a&gt;')</code>, jQuery creates the element using the native JavaScript <code>createElement()</code> function.</p>
            <p>To ensure cross-platform compatibility, the snippet must be well-formed. Tags that can contain other elements should be paired with a closing tag:</p>
            <pre>$('&lt;a href="http://jquery.com"&gt;&lt;/a&gt;');</pre>
            <p>Alternatively, jQuery allows XML-like tag syntax (with or without a space before the slash):</p>
            <pre>$('&lt;a/&gt;');</pre>
            <p>Tags that cannot contain elements may be quick-closed or not:</p>
            <pre>$('&lt;img /&gt;');
$('&lt;input&gt;');
</pre>

            <p>As of jQuery 1.4, we can pass a map of properties to the second argument. This argument accepts a superset of properties that can be passed to the <a href="/attr">.attr()</a> method. Furthermore, any <a href="/category/events/">event type</a> can be passed in, and the following jQuery methods can be called: <a href="/val">val</a>, <a href="/css">css</a>, <a href="/html">html</a>, <a href="/text">text</a>, <a href="/data">data</a>, <a href="/width">width</a>, <a href="/height">height</a>, or <a href="/offset">offset</a>. Note that Internet Explorer will not allow you to create an <code>input</code> element and change its type; you must specify the type using <code>'&lt;input type="checkbox" /&gt;'</code> for example.</p>
         </longdesc>
         <example>
            <desc>Creates a div element (and all of its contents) dynamically, and appends it to the body element. Internally, an element is created and its innerHTML property set to the given markup. It is therefore both quite flexible and limited.</desc>
         </example>
         <example>
            <desc>Create some DOM elements.</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery">
         <desc>这个函数接收一个包含 CSS 选择器的字符串，然后用这个字符串去匹配一组元素。 根据提供的原始 HTML 标记字符串，动态创建由 jQuery 对象包装的 DOM 元素。 根据提供的原始 HTML 标记字符串，动态创建由 jQuery 对象包装的 DOM 元素。同时设置一系列的属性、事件等。 将一个或多个DOM元素转化为jQuery对象。 返回一个空的jQuery对象。 $(document).ready()的简写。Binds a function to be executed when the DOM has finished loading.</desc>
         <signature>
            <argument name="callback">
               <desc>The function to execute when the DOM is ready.</desc>
            </argument>
         </signature>
         <longdesc>jQuery 的核心功能都是通过这个函数实现的。 jQuery中的一切都基于这个函数，或者说都是在以某种方式使用这个函数。这个函数最基本的用法就是向它传递一个表达式（通常由 CSS 选择器组成），然后根据这个表达式来查找所有匹配的元素。

默认情况下, 如果没有指定context参数，$()将在当前的 HTML document中查找 DOM 元素；如果指定了 context 参数，如一个 DOM 元素集或 jQuery 对象，那就会在这个 context 中查找。在jQuery 1.3.2以后，其返回的元素顺序等同于在context中出现的先后顺序。

参考文档中 选择器 部分获取更多用于 expression 参数的 CSS 语法的信息。你可以传递一个手写的 HTML 字符串，或者由某些模板引擎或插件创建的字符串，也可以是通过 AJAX 加载过来的字符串。但是在你创建 input 元素的时会有限制，可以参考第二个示例。当然这个字符串可以包含斜杠 (比如一个图像地址)，还有反斜杠。当你创建单个元素时，请使用闭合标签或 XHTML 格式。例如，创建一个 span ，可以用 $("&amp;lt;span/&amp;gt;") 或 $("&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;") ，但不推荐 $("&amp;lt;span&amp;gt;")。在jQuery 中，这个语法等同于$(document.createElement("span")) 。这个函数也可以接收XML文档和Window对象（虽然它们不是DOM元素）作为有效的参数。jQuery 1.4中，如果不提供任何参数，则返回一个空jQuery对象。在先前版本中，这会返回一个包含document节点的对象。允许你绑定一个在DOM文档载入完成后执行的函数。这个函数的作用如同$(document).ready()一样，只不过用这个函数时，需要把页面中所有需要在 DOM 加载完成时执行的$()操作符都包装到其中来。从技术上来说，这个函数是可链接的－－但真正以这种方式链接的情况并不多。

你可以在一个页面中使用任意多个$(document).ready事件。参考 ready(Function) 获取更多 ready 事件的信息。
      <p>This function behaves just like <code>$(document).ready()</code>, in that it should be used to wrap other <code>$()</code> operations on your page that depend on the DOM being ready. While this function is, technically, chainable, there really isn't much use for chaining against it.</p> 
         </longdesc>
         <example>
            <desc>Executes the function when the DOM is ready to be used.</desc>
         </example>
         <example>
            <desc>Uses both the shortcut for $(document).ready() and the argument to write failsafe jQuery code using the $ alias, without relying on the global alias.</desc>
         </example>
      </entry>
      <entry type="method" name="stop">
         <desc>停止所有在指定元素上正在运行的动画。Stop the currently-running animation on the matched elements.</desc>
         <signature>
            <argument name="clearQueue">
               <desc>A Boolean indicating whether to remove queued animation as well. Defaults to <code>false</code>.</desc>
            </argument>
            <argument name="jumpToEnd">
               <desc>A Boolean indicating whether to complete the current animation immediately. Defaults to <code>false</code>.</desc>
            </argument>
         </signature>
         <longdesc>如果队列中有等待执行的动画(并且clearQueue没有设为true)，他们将被马上执行
  <p>When <code>.stop()</code> is called on an element, the currently-running animation (if any) is immediately stopped. If, for instance, an element is being hidden with <code>.slideUp()</code> when <code>.stop()</code> is called, the element will now still be displayed, but will be a fraction of its previous height. Callback functions are not called.</p>
            <p>If more than one animation method is called on the same element, the later animations are placed in the effects queue for the element. These animations will not begin until the first one completes. When <code>.stop()</code> is called, the next animation in the queue begins immediately. If the <code>clearQueue</code> parameter is provided with a value of <code>true</code>, then the rest of the animations in the queue are removed and never run.</p>
            <p>If the <code>jumpToEnd</code> property is provided with a value of <code>true</code>, the current animation stops, but the element is immediately given its target values for each CSS property. In our above <code>.slideUp()</code> example, the element would be immediately hidden. The callback function is then immediately called, if provided.</p>
            <p>The usefulness of the <code>.stop()</code> method is evident when we need to animate an element on <code>mouseenter</code> and <code>mouseleave</code>:</p>
            <pre>&lt;div id="hoverme"&gt;
  Hover me
  &lt;img id="hoverme" src="book.png" alt="" width="100" height="123" /&gt;
&lt;/div&gt;</pre>
            <p>We can create a nice fade effect without the common problem of multiple queued animations by adding <code>.stop(true, true)</code> to the chain:</p>
            <pre>$('#hoverme-stop-2').hover(function() {
  $(this).find('img').stop(true, true).fadeOut();
}, function() {
  $(this).find('img').stop(true, true).fadeIn();
});</pre>
            <blockquote>
               <p>Animations may be stopped globally by setting the property <code>$.fx.off</code> to <code>true</code>. When this is done, all animation methods will immediately set elements to their final state when called, rather than displaying an effect.</p>
            </blockquote>
         </longdesc>
         <example>
            <desc>Click the Go button once to start the animation, then click the STOP button to stop it where it's currently positioned.  Another option is to click several buttons to queue them up and see that stop just kills the currently playing one.</desc>
         </example>
      </entry>
      <entry type="method" name="end">
         <desc>回到最近的一个"破坏性"操作之前。即，将匹配的元素列表变为前一次的状态。End the most recent filtering operation in the current chain and return the set of matched elements to its previous state.</desc>
         <signature/>
         <longdesc>如果之前没有破坏性操作，则返回一个空集。所谓的"破坏性"就是指任何改变所匹配的jQuery元素的操作。这包括在 Traversing 中任何返回一个jQuery对象的函数--'add', 'andSelf', 'children', 'filter', 'find', 'map', 'next', 'nextAll', 'not', 'parent', 'parents', 'prev', 'prevAll', 'siblings' and 'slice'--再加上 Manipulation 中的 'clone'。<p>Most of jQuery's <a href="http://api.jquery.com/category/traversing">DOM traversal</a> methods operate on a jQuery object instance and produce a new one, matching a different set of DOM elements. When this happens, it is as if the new set of elements is pushed onto a stack that is maintained inside the object. Each successive filtering method pushes a new element set onto the stack. If we need an older element set, we can use <code>end()</code> to pop the sets back off of the stack.</p>
            <p>Suppose we have a couple short lists on a page:</p>
            <pre>
&lt;ul class="first"&gt;
   &lt;li class="foo"&gt;list item 1&lt;/li&gt;
   &lt;li&gt;list item 2&lt;/li&gt;
   &lt;li class="bar"&gt;list item 3&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class="second"&gt;
   &lt;li class="foo"&gt;list item 1&lt;/li&gt;
   &lt;li&gt;list item 2&lt;/li&gt;
   &lt;li class="bar"&gt;list item 3&lt;/li&gt;
&lt;/ul&gt;
</pre>
            <p>The <code>end()</code> method is useful primarily when exploiting jQuery's chaining properties. When not using chaining, we can usually just call up a previous object by variable name, so we don't need to manipulate the stack. With <code>end()</code>, though, we can string all the method calls together:</p>
            <pre>
$('ul.first').find('.foo').css('background-color', 'red')
  <code>.end()</code>.find('.bar').css('background-color', 'green');
</pre>
            <p>This chain searches for items with the class <code>foo</code> within the first list only and turns their backgrounds red. Then <code>end()</code> returns the object to its state before the call to <code>find()</code>, so the second <code>find()</code> looks for '.bar' inside <code>&lt;ul class="first"&gt;</code>, not just inside that list's <code>&lt;li class="foo"&gt;</code>, and turns the matching elements' backgrounds green. The net result is that items 1 and 3 of the first list have a colored background, and none of the items from the second list do.</p>
            <p>A long jQuery chain can be visualized as a structured code block, with filtering methods providing the openings of nested blocks and <code>end()</code> methods closing them:</p>
            <pre>
$('ul.first').find('.foo')
  .css('background-color', 'red')
.end().find('.bar')
  .css('background-color', 'green')
.end();
</pre>
            <p>The last <code>end()</code> is unnecessary, as we are discarding the jQuery object immediately thereafter. However, when the code is written in this form, the <code>end()</code> provides visual symmetry and closure—making the program, at least to the eyes of some developers, more readable.</p>
         </longdesc>
         <example>
            <desc>Selects all paragraphs, finds span elements inside these, and reverts the selection back to the paragraphs.</desc>
         </example>
         <example>
            <desc>Selects all paragraphs, finds span elements inside these, and reverts the selection back to the paragraphs.</desc>
         </example>
      </entry>
      <entry type="method" name="andSelf">
         <desc>加入先前所选的加入当前元素中Add the previous set of elements on the stack to the current set.</desc>
         <signature/>
         <longdesc>对于筛选或查找后的元素，要加入先前所选元素时将会很有用。<p>As described in the discussion for <code>.end()</code> above, jQuery objects maintain an internal stack that keeps track of changes to the matched set of elements. When one of the DOM traversal methods is called, the new set of elements is pushed onto the stack. If the previous set of elements is desired as well, <code>.andSelf()</code> can help.</p>
            <p>Consider a page with a simple list on it:</p>
            <pre>
&lt;ul&gt;
   &lt;li&gt;list item 1&lt;/li&gt;
   &lt;li&gt;list item 2&lt;/li&gt;
   &lt;li class="third-item"&gt;list item 3&lt;/li&gt;
   &lt;li&gt;list item 4&lt;/li&gt;
   &lt;li&gt;list item 5&lt;/li&gt;
&lt;/ul&gt;
</pre>
            <p>If we begin at the third item, we can find the elements which come after it:</p>
            <pre>$('li.third-item').nextAll().andSelf()
  .css('background-color', 'red');
</pre>
            <p>The result of this call is a red background behind items 3, 4 and 5. First, the initial selector locates item 3, initializing the stack with the set containing just this item. The call to <code>.nextAll()</code> then pushes the set of items 4 and 5 onto the stack. Finally, the <code>.andSelf()</code> invocation merges these two sets together, creating a jQuery object that points to all three items.</p>
         </longdesc>
         <example>
            <desc>Find all divs, and all the paragraphs inside of them, and give them both classnames.  Notice the div doesn't have the yellow background color since it didn't use andSelf.</desc>
         </example>
      </entry>
      <entry type="method" name="siblings">
         <desc>取得一个包含匹配的元素集合中每一个元素的所有唯一同辈元素的元素集合。可以用可选的表达式进行筛选。Get the siblings of each element in the set of matched elements, optionally filtered by a selector.</desc>
         <signature>
            <argument name="selector">
               <desc>A string containing a selector expression to match elements against.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>Given a jQuery object that represents a set of DOM elements, the <code>.siblings()</code> method allows us to search through the siblings of these elements in the DOM tree and construct a new jQuery object from the matching elements.</p>
            <p>The method optionally accepts a selector expression of the same type that we can pass to the <code>$()</code> function. If the selector is supplied, the elements will be filtered by testing whether they match it.</p>
            <p>Consider a page with a simple list on it:</p>
            <pre>
&lt;ul&gt;
   &lt;li&gt;list item 1&lt;/li&gt;
   &lt;li&gt;list item 2&lt;/li&gt;
   &lt;li class="third-item"&gt;list item 3&lt;/li&gt;
   &lt;li&gt;list item 4&lt;/li&gt;
   &lt;li&gt;list item 5&lt;/li&gt;
&lt;/ul&gt;
</pre>
            <p>If we begin at the third item, we can find its siblings:</p>
            <pre>$('li.third-item').siblings().css('background-color', 'red');</pre>
            <p>The result of this call is a red background behind items 1, 2, 4, and 5. Since we do not supply a selector expression, all of the siblings are part of the object. If we had supplied one, only the matching items among these four would be included.</p>
            <p>The original element is not included among the siblings, which is important to remember when we wish to find all elements at a particular level of the DOM tree.</p>
         </longdesc>
         <example>
            <desc>Find the unique siblings of all yellow li elements in the 3 lists (including other yellow li elements if appropriate).</desc>
         </example>
         <example>
            <desc>Find all siblings with a class "selected" of each div.</desc>
         </example>
      </entry>
      <entry type="method" name="animate">
         <desc>用于创建自定义动画的函数。 用于创建自定义动画的函数。Perform a custom animation of a set of CSS properties.</desc>
         <signature>
            <argument name="properties">
               <desc>A map of CSS properties that the animation will move toward.</desc>
            </argument>
            <argument name="duration">
               <desc>A string or number determining how long the animation will run.</desc>
            </argument>
            <argument name="easing">
               <desc>A string indicating which easing function to use for the transition.</desc>
            </argument>
            <argument name="callback">
               <desc>A function to call once the animation is complete.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="properties">
               <desc>A map of CSS properties that the animation will move toward.</desc>
            </argument>
            <argument name="options">
               <desc>A map of additional options to pass to the method. Supported keys:
        <ul>
                     <li>
                        <code>duration</code>: A string or number determining how long the animation will run.</li>
                     <li>
                        <code>easing</code>: A string indicating which easing function to use for the transition.</li>
                     <li>
                        <code>complete</code>: A function to call once the animation is complete.</li>
                     <li>
                        <code>step</code>: A function to be called after each step of the animation.</li>
                     <li>
                        <code>queue</code>: A Boolean indicating whether to place the animation in the effects queue. If <code>false</code>, the animation will begin immediately.</li>
                     <li>
                        <code>specialEasing</code>: A map of one or more of the CSS properties defined by the properties argument and their corresponding easing functions (added 1.4).</li>
                  </ul>
               </desc>
            </argument>
         </signature>
         <longdesc>这个函数的关键在于指定动画形式及结果样式属性对象。这个对象中每个属性都表示一个可以变化的样式属性（如“height”、“top”或“opacity”）。注意：所有指定的属性必须用骆驼形式，比如用marginLeft代替margin-left. 

而每个属性的值表示这个样式属性到多少时动画结束。如果是一个数值，样式属性就会从当前的值渐变到指定的值。如果使用的是“hide”、“show”或“toggle”这样的字符串值，则会为该属性调用默认的动画形式。

在 jQuery 1.2 中，你可以使用 em 和 % 单位。另外，在 jQuery 1.2 中，你可以通过在属性值前面指定 "&lt;em&gt;+=&lt;/em&gt;" 或 "&lt;em&gt;-=&lt;/em&gt;" 来让元素做相对运动。

jQuery 1.3中，如果duration设为0则直接完成动画。而在以前版本中则会执行默认动画。这个函数的关键在于指定动画形式及结果样式属性对象。这个对象中每个属性都表示一个可以变化的样式属性（如“height”、“top”或“opacity”）。注意：所有指定的属性必须用骆驼形式，比如用marginLeft代替margin-left. 

而每个属性的值表示这个样式属性到多少时动画结束。如果是一个数值，样式属性就会从当前的值渐变到指定的值。如果使用的是“hide”、“show”或“toggle”这样的字符串值，则会为该属性调用默认的动画形式。

在 jQuery 1.2 中，你可以使用 em 和 % 单位。另外，在 jQuery 1.2 中，你可以通过在属性值前面指定 "&lt;em&gt;+=&lt;/em&gt;" 或 "&lt;em&gt;-=&lt;/em&gt;" 来让元素做相对运动。
  <p>The <code>.animate()</code> method allows us to create animation effects on any numeric CSS property. The only required parameter is a map of CSS properties. This map is similar to the one that can be sent to the <code>.css()</code> method, except that the range of properties is more restrictive.</p>
            <p>All animated properties should be numeric (except as noted below); properties that are non-numeric cannot be animated using basic jQuery functionality. (For example, <code>width</code>, <code>height</code>, or <code>left</code> can be animated but <code>background-color</code> cannot be.) Property values are treated as a number of pixels unless otherwise specified. The units <code>em</code> and <code>%</code> can be specified where applicable.</p>
            <p>In addition to numeric values, each property can take the strings <code>'show'</code>, <code>'hide'</code>, and <code>'toggle'</code>. These shortcuts allow for custom hiding and showing animations that take into account the display type of the element.</p>
            <p>Animated properties can also be relative. If a value is supplied with a leading <code>+=</code> or <code>-=</code> sequence of characters, then the target value is computed by adding or subtracting the given number from the current value of the property.</p>
            <h4 id="duration">Duration</h4>
            <p>Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings <code>'fast'</code> and <code>'slow'</code> can be supplied to indicate durations of <code>200</code> and <code>600</code> milliseconds, respectively.</p>
            <h4 id="callback">Callback Function</h4>
            <p>If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but <code>this</code> is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.</p>
            <p>We can animate any element, such as a simple image:</p>
            <pre>&lt;div id="clickme"&gt;
  Click here
&lt;/div&gt;
&lt;img id="book" src="book.png" alt="" width="100" height="123" 
  style="position: relative; left: 10px;" /&gt;</pre>
            <p>We can animate the opacity, left offset, and height of the image simultaneously:</p>
            <pre>$('#clickme').click(function() {
  $('#book').animate({
    opacity: 0.25,
    left: '+=50',
    height: 'toggle'
  }, 5000, function() {
    // Animation complete.
  });
});
</pre>
            <p class="image">
               <img src="/images/animate-1.jpg" alt=""/>
            </p>
            <p>Note that we have specified <code>toggle</code> as the target value of the <code>height</code> property. Since the image was visible before, the animation shrinks the height to 0 to hide it. A second click then reverses this transition:
</p>
            <p class="image"> 
               <img src="/images/animate-2.jpg" alt=""/> 
            </p>

            <p>The <code>opacity</code> of the image is already at its target value, so this property is not animated by the second click. Since we specified the target value for <code>left</code> as a relative value, the image moves even farther to the right during this second animation.</p>
            <p>The <code>position</code> attribute of the element must not be <code>static</code> if we wish to animate the <code>left</code> property as we do in the example.</p>
            <blockquote>
               <p>The <a href="http://jqueryui.com">jQuery UI</a> project extends the <code>.animate()</code> method by allowing some non-numeric styles such as colors to be animated. The project also includes mechanisms for specifying animations through CSS classes rather than individual attributes.</p>
            </blockquote>
            <h4 id="easing">Easing</h4>
            <p>The remaining parameter of <code>.animate()</code> is a string naming an easing function to use. An easing function specifies the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called <code>swing</code>, and one that progresses at a constant pace, called <code>linear</code>. More easing functions are available with the use of plug-ins, most notably the <a href="http://jqueryui.com/">jQuery UI suite</a>.</p>
            <h4 id="per-property-easing">Per-property Easing</h4>
            <p>As of jQuery version 1.4, we can set per-property easing functions within a single <code>.animate()</code> call. In the first version of <code>.animate()</code>, each property can take an array as its value: The first member of the array is the CSS property and the second member is an easing function.  If a per-property easing function is not defined for a particular property, it uses the value of the <code>.animate()</code> method's optional easing argument. If the easing argument is not defined, the default <code>swing</code> function is used.</p>
            <p>We can, for example, simultaneously animate the width and height with the <code>swing</code> easing function and the opacity with the <code>linear</code> easing function:</p>
            <pre>$('#clickme').click(function() {
  $('#book').animate({
    width: ['toggle', 'swing'],
    height: ['toggle', 'swing'],
    opacity: 'toggle'
  }, 5000, 'linear', function() {
      $(this).after('&lt;div&gt;Animation complete.&lt;/div&gt;');
  });
});</pre>
            <p>In the second version of <code>.animate()</code>, the options map can include the <code>specialEasing</code> property, which is itself a map of CSS properties and their corresponding easing functions.  We can simultaneously animate the width using the <code>linear</code> easing function and the height using the <code>easeOutBounce</code> easing function.</p>
            <pre>$('#clickme').click(function() {
  $('#book').animate({
    width: 'toggle',
    height: 'toggle'
  }, {
    duration: 5000, 
    specialEasing: {
      width: 'linear',
      height: 'easeOutBounce'
    }, 
    complete: function() {
      $(this).after('&lt;div&gt;Animation complete.&lt;/div&gt;');
    }
  });
});</pre>
            <p>As previously noted, a plug-in is required for the <code>easeOutBounce</code> function.</p>

         </longdesc>
         <example>
            <desc>Click the button to animate the div with a number of different properties.</desc>
         </example>
         <example>
            <desc>Shows a div animate with a relative move.  Click several times on the buttons to see the relative animations queued up.</desc>
         </example>
         <example>
            <desc>Animates all paragraphs to toggle both height and opacity, completing the animation within 600 milliseconds.</desc>
         </example>
         <example>
            <desc>Animates all paragraph to a left style of 50 and opacity of 1 (opaque, visible), completing the animation within 500 milliseconds.</desc>
         </example>
         <example>
            <desc>An example of using an 'easing' function to provide a different style of animation. This will only work if you have a plugin that provides this easing function.  Note, this code will do nothing unless the paragraph element is hidden.</desc>
         </example>
         <example>
            <desc>The first button shows how an unqueued animation works.  It expands the div out to 90% width <strong>while</strong> the font-size is increasing. Once the font-size change is complete, the border animation will begin.

The second button starts a traditional chained animation, where each animation will start once the previous animation on the element has completed.</desc>
         </example>
         <example>
            <desc>Animates all paragraphs to toggle both height and opacity, completing the animation within 600 milliseconds.</desc>
         </example>
         <example>
            <desc>Animates all paragraph to a left style of 50 and opacity of 1 (opaque, visible), completing the animation within 500 milliseconds.  It also will do it <em>outside</em> the queue, meaning it will automatically start without waiting for its turn.</desc>
         </example>
         <example>
            <desc>An example of using an 'easing' function to provide a different style of animation. This will only work if you have a plugin that provides this easing function.</desc>
         </example>
         <example>
            <desc>An example of using a callback function.  The first argument is an array of CSS properties, the second specifies that the animation should take 1000 milliseconds to complete, the third states the easing type, and the fourth argument is an anonymous callback function. </desc>
         </example>
      </entry>
      <entry type="method" name="prevAll">
         <desc>查找当前元素之前所有的同辈元素Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector.</desc>
         <signature>
            <argument name="selector">
               <desc>A string containing a selector expression to match elements against.</desc>
            </argument>
         </signature>
         <longdesc>可以用表达式过滤。<p>Given a jQuery object that represents a set of DOM elements, the <code>.prevAll()</code> method allows us to search through the predecessors of these elements in the DOM tree and construct a new jQuery object from the matching elements.</p>
            <p>The method optionally accepts a selector expression of the same type that we can pass to the <code>$()</code> function. If the selector is supplied, the elements will be filtered by testing whether they match it.</p>
            <p>Consider a page with a simple list on it:</p>
            <pre>
&lt;ul&gt;
   &lt;li&gt;list item 1&lt;/li&gt;
   &lt;li&gt;list item 2&lt;/li&gt;
   &lt;li class="third-item"&gt;list item 3&lt;/li&gt;
   &lt;li&gt;list item 4&lt;/li&gt;
   &lt;li&gt;list item 5&lt;/li&gt;
&lt;/ul&gt;
</pre>
            <p>If we begin at the third item, we can find the elements which come before it:</p>
            <pre>$('li.third-item').prevAll().css('background-color', 'red');</pre>
            <p>The result of this call is a red background behind items 1 and 2. Since we do not supply a selector expression, these preceding elements are unequivocally included as part of the object. If we had supplied one, the elements would be tested for a match before they were included.</p>
         </longdesc>
         <example>
            <desc>Locate all the divs preceding the last div and give them a class.</desc>
         </example>
      </entry>
      <entry type="method" name="prev">
         <desc>取得一个包含匹配的元素集合中每一个元素紧邻的前一个同辈元素的元素集合。Get the immediately preceding sibling of each element in the set of matched elements, optionally filtered by a selector.</desc>
         <signature>
            <argument name="selector">
               <desc>A string containing a selector expression to match elements against.</desc>
            </argument>
         </signature>
         <longdesc>可以用一个可选的表达式进行筛选。只有紧邻的同辈元素会被匹配到，而不是前面所有的同辈元素。<p>Given a jQuery object that represents a set of DOM elements, the <code>.prev()</code> method allows us to search through the predecessors of these elements in the DOM tree and construct a new jQuery object from the matching elements.</p>
            <p>The method optionally accepts a selector expression of the same type that we can pass to the <code>$()</code> function. If the selector is supplied, the elements will be filtered by testing whether they match it.</p>
            <p>Consider a page with a simple list on it:</p>
            <pre>
&lt;ul&gt;
   &lt;li&gt;list item 1&lt;/li&gt;
   &lt;li&gt;list item 2&lt;/li&gt;
   &lt;li class="third-item"&gt;list item 3&lt;/li&gt;
   &lt;li&gt;list item 4&lt;/li&gt;
   &lt;li&gt;list item 5&lt;/li&gt;
&lt;/ul&gt;
</pre>
            <p>If we begin at the third item, we can find the element which comes just before it:</p>
            <pre>$('li.third-item').prev().css('background-color', 'red');</pre>
            <p>The result of this call is a red background behind item 2. Since we do not supply a selector expression, this preceding element is unequivocally included as part of the object. If we had supplied one, the element would be tested for a match before it was included.</p>
         </longdesc>
         <example>
            <desc>Find the very previous sibling of each div.</desc>
         </example>
         <example>
            <desc>For each paragraph, find the very previous sibling that has a class "selected".</desc>
         </example>
      </entry>
      <entry type="method" name="fadeTo">
         <desc>把所有匹配元素的不透明度以渐进方式调整到指定的不透明度，并在动画完成后可选地触发一个回调函数。Adjust the opacity of the matched elements.</desc>
         <signature>
            <argument name="duration">
               <desc>A string or number determining how long the animation will run.</desc>
            </argument>
            <argument name="opacity">
               <desc>A number between 0 and 1 denoting the target opacity.</desc>
            </argument>
            <argument name="callback">
               <desc>A function to call once the animation is complete.</desc>
            </argument>
         </signature>
         <longdesc>这个动画只调整元素的不透明度，也就是说所有匹配的元素的高度和宽度不会发生变化。
  <p>The <code>.fadeTo()</code> method animates the opacity of the matched elements.</p>
            <p>Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings <code>'fast'</code> and <code>'slow'</code> can be supplied to indicate durations of <code>200</code> and <code>600</code> milliseconds, respectively. If any other string is supplied, the default duration of  <code>400</code> milliseconds is used. Unlike the other effect methods, <code>.fadeTo()</code> requires that <code>duration</code> be explicitly specified.</p>
            <p>If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but <code>this</code> is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.</p>
            <p>We can animate any element, such as a simple image:</p>
            <pre>&lt;div id="clickme"&gt;
    Click here
  &lt;/div&gt;
  &lt;img id="book" src="book.png" alt="" width="100" height="123" /&gt;
  With the element initially shown, we can dim it slowly:
  $('#clickme').click(function() {
    $('#book').fadeTo('slow', 0.5, function() {
      // Animation complete.
    });
  });
  </pre>
            <p class="image four-across"> 
               <img src="/images/0042_06_41.png" alt=""/>
               <img src="/images/0042_06_42.png" alt=""/>
               <img src="/images/0042_06_43.png" alt=""/>
               <img src="/images/0042_06_44.png" alt=""/>
            </p>
            <p>With <code>duration</code> set to <code>0</code>, this method just changes the <code>opacity</code> CSS property, so <code>.fadeTo(0, opacity)</code> is the same as <code>.css('opacity', opacity)</code>.</p>
         </longdesc>
         <example>
            <desc>Animates first paragraph to fade to an opacity of 0.33 (33%, about one third visible), completing the animation within 600 milliseconds.</desc>
         </example>
         <example>
            <desc>Fade div to a random opacity on each click, completing the animation within 200 milliseconds.</desc>
         </example>
         <example>
            <desc>Find the right answer!  The fade will take 250 milliseconds and change various styles when it completes.</desc>
         </example>
      </entry>
      <entry type="method" name="fadeOut">
         <desc>通过不透明度的变化来实现所有匹配元素的淡出效果，并在动画完成后可选地触发一个回调函数。Hide the matched elements by fading them to transparent.</desc>
         <signature>
            <argument name="duration">
               <desc>A string or number determining how long the animation will run.</desc>
            </argument>
            <argument name="callback">
               <desc>A function to call once the animation is complete.</desc>
            </argument>
         </signature>
         <longdesc>这个动画只调整元素的不透明度，也就是说所有匹配的元素的高度和宽度不会发生变化。
    <p>The <code>.fadeOut()</code> method animates the opacity of the matched elements. Once the opacity reaches 0, the <code>display</code> style property is set to <code>none</code>, so the element no longer affects the layout of the page.</p>
            <p>Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings <code>'fast'</code> and <code>'slow'</code> can be supplied to indicate durations of <code>200</code> and <code>600</code> milliseconds, respectively. If any other string is supplied, or if the <code>duration</code> parameter is omitted, the default duration of  <code>400</code> milliseconds is used.</p>
            <p>If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but <code>this</code> is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.</p>
            <p>We can animate any element, such as a simple image:</p>
            <pre>&lt;div id="clickme"&gt;
  Click here
&lt;/div&gt;
&lt;img id="book" src="book.png" alt="" width="100" height="123" /&gt;</pre>
            <p>With the element initially shown, we can hide it slowly:</p>
            <pre>$('#clickme').click(function() {
  $('#book').fadeOut('slow', function() {
    // Animation complete.
  });
});</pre>
            <p class="image four-across">
               <img src="/images/0042_06_37.png" alt=""/>
               <img src="/images/0042_06_38.png" alt=""/>
               <img src="/images/0042_06_39.png" alt=""/>
               <img src="/images/0042_06_40.png" alt=""/>
            </p>
         </longdesc>
         <example>
            <desc>Animates all paragraphs to fade out, completing the animation within 600 milliseconds.</desc>
         </example>
         <example>
            <desc>Fades out spans in one section that you click on.</desc>
         </example>
      </entry>
      <entry type="method" name="parents">
         <desc>取得一个包含着所有匹配元素的祖先元素的元素集合（不包含根元素）。可以通过一个可选的表达式进行筛选。Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector.</desc>
         <signature>
            <argument name="selector">
               <desc>A string containing a selector expression to match elements against.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>Given a jQuery object that represents a set of DOM elements, the <code>.parents()</code> method allows us to search through the ancestors of these elements in the DOM tree and construct a new jQuery object from the matching elements ordered from immediate parent on up. The <code>.parents()</code> and <code>.parent()</code> methods are similar, except that the latter only travels a single level up the DOM tree.</p>
            <p>The method optionally accepts a selector expression of the same type that we can pass to the <code>$()</code> function. If the selector is supplied, the elements will be filtered by testing whether they match it.</p>
            <p>Consider a page with a basic nested list on it:</p>
            <pre>
&lt;ul class="level-1"&gt;
  &lt;li class="item-i"&gt;I&lt;/li&gt;
  &lt;li class="item-ii"&gt;II
    &lt;ul class="level-2"&gt;
      &lt;li class="item-a"&gt;A&lt;/li&gt;
      &lt;li class="item-b"&gt;B
        &lt;ul class="level-3"&gt;
          &lt;li class="item-1"&gt;1&lt;/li&gt;
          &lt;li class="item-2"&gt;2&lt;/li&gt;
          &lt;li class="item-3"&gt;3&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li class="item-c"&gt;C&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li class="item-iii"&gt;III&lt;/li&gt;
&lt;/ul&gt;
</pre>
            <p>If we begin at item A, we can find its ancestors:</p>
            <pre>$('li.item-a').parents().css('background-color', 'red');</pre>
            <p>The result of this call is a red background for the level-2 list, item II, and the level-1 list (and on up the DOM tree all the way to the <code>&lt;html&gt;</code> element). Since we do not supply a selector expression, all of the ancestors are part of the returned jQuery object. If we had supplied one, only the matching items among these would be included.</p>
         </longdesc>
         <example>
            <desc>Find all parent elements of each b.</desc>
         </example>
         <example>
            <desc>Click to find all unique div parent elements of each span.</desc>
         </example>
      </entry>
      <entry type="method" name="fadeIn">
         <desc>通过不透明度的变化来实现所有匹配元素的淡入效果，并在动画完成后可选地触发一个回调函数。Display the matched elements by fading them to opaque.</desc>
         <signature>
            <argument name="duration">
               <desc>A string or number determining how long the animation will run.</desc>
            </argument>
            <argument name="callback">
               <desc>A function to call once the animation is complete.</desc>
            </argument>
         </signature>
         <longdesc>这个动画只调整元素的不透明度，也就是说所有匹配的元素的高度和宽度不会发生变化。
    <p>The <code>.fadeIn()</code> method animates the opacity of the matched elements.</p>
            <p>Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings <code>'fast'</code> and <code>'slow'</code> can be supplied to indicate durations of <code>200</code> and <code>600</code> milliseconds, respectively. If any other string is supplied, or if the <code>duration</code> parameter is omitted, the default duration of  <code>400</code> milliseconds is used.</p>
            <p>If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but <code>this</code> is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.</p>
            <p>We can animate any element, such as a simple image:</p>
            <pre>&lt;div id="clickme"&gt;
      Click here
    &lt;/div&gt;
    &lt;img id="book" src="book.png" alt="" width="100" height="123" /&gt;
    With the element initially hidden, we can show it slowly:
    $('#clickme').click(function() {
      $('#book').fadeIn('slow', function() {
        // Animation complete
      });
    });</pre>
            <p class="image four-across">
               <img src="/images/0042_06_33.png" alt=""/>
               <img src="/images/0042_06_34.png" alt=""/>
               <img src="/images/0042_06_35.png" alt=""/>
               <img src="/images/0042_06_36.png" alt=""/>
            </p>
         </longdesc>
         <example>
            <desc>Animates hidden divs to fade in one by one, completing each animation within 600 milliseconds.</desc>
         </example>
         <example>
            <desc>Fades a red block in over the text. Once the animation is done, it quickly fades in more text on top.</desc>
         </example>
      </entry>
      <entry type="method" name="parent">
         <desc>取得一个包含着所有匹配元素的唯一父元素的元素集合。Get the parent of each element in the current set of matched elements, optionally filtered by a selector.</desc>
         <signature>
            <argument name="selector">
               <desc>A string containing a selector expression to match elements against.</desc>
            </argument>
         </signature>
         <longdesc>你可以使用可选的表达式来筛选。<p>Given a jQuery object that represents a set of DOM elements, the <code>.parent()</code> method allows us to search through the parents of these elements in the DOM tree and construct a new jQuery object from the matching elements. The <code>.parents()</code> and <code>.parent()</code> methods are similar, except that the latter only travels a single level up the DOM tree.</p>
            <p>The method optionally accepts a selector expression of the same type that we can pass to the <code>$()</code> function. If the selector is supplied, the elements will be filtered by testing whether they match it.</p>
            <p>Consider a page with a basic nested list on it:</p>
            <pre>
&lt;ul class="level-1"&gt;
  &lt;li class="item-i"&gt;I&lt;/li&gt;
  &lt;li class="item-ii"&gt;II
    &lt;ul class="level-2"&gt;
      &lt;li class="item-a"&gt;A&lt;/li&gt;
      &lt;li class="item-b"&gt;B
        &lt;ul class="level-3"&gt;
          &lt;li class="item-1"&gt;1&lt;/li&gt;
          &lt;li class="item-2"&gt;2&lt;/li&gt;
          &lt;li class="item-3"&gt;3&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li class="item-c"&gt;C&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li class="item-iii"&gt;III&lt;/li&gt;
&lt;/ul&gt;
</pre>
            <p>If we begin at item A, we can find its parents:</p>
            <pre>$('li.item-a').parent().css('background-color', 'red');</pre>
            <p>The result of this call is a red background for the level-2 list. Since we do not supply a selector expression, the parent element is unequivocally included as part of the object. If we had supplied one, the element would be tested for a match before it was included.</p>
         </longdesc>
         <example>
            <desc>Shows the parent of each element as (parent &gt; child).  Check the View Source to see the raw html.</desc>
         </example>
         <example>
            <desc>Find the parent element of each paragraph with a class "selected".</desc>
         </example>
      </entry>
      <entry type="method" name="offsetParent">
         <desc>返回第一个匹配元素用于定位的父节点。Get the closest ancestor element that is positioned.</desc>
         <signature/>
         <longdesc>这返回父元素中第一个其position设为relative或者absolute的元素。此方法仅对可见元素有效。<p>Given a jQuery object that represents a set of DOM elements, the <code>.offsetParent()</code> method allows us to search through the ancestors of these elements in the DOM tree and construct a new jQuery object wrapped around the closest positioned ancestor. An element is said to be positioned if it has a CSS position attribute of <code>relative</code>, <code>absolute</code>, or <code>fixed</code>. This information is useful for calculating offsets for performing animations and placing objects on the page.</p>
            <p>Consider a page with a basic nested list on it, with a positioned element:</p>
            <pre>
&lt;ul class="level-1"&gt;
  &lt;li class="item-i"&gt;I&lt;/li&gt;
  &lt;li class="item-ii" style="position: relative;"&gt;II
    &lt;ul class="level-2"&gt;
      &lt;li class="item-a"&gt;A&lt;/li&gt;
      &lt;li class="item-b"&gt;B
        &lt;ul class="level-3"&gt;
          &lt;li class="item-1"&gt;1&lt;/li&gt;
          &lt;li class="item-2"&gt;2&lt;/li&gt;
          &lt;li class="item-3"&gt;3&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li class="item-c"&gt;C&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li class="item-iii"&gt;III&lt;/li&gt;
&lt;/ul&gt;
</pre>
            <p>If we begin at item A, we can find its positioned ancestor:</p>
            <pre>$('li.item-a').offsetParent().css('background-color', 'red');</pre>
            <p>This will change the color of list item II, which is positioned.</p>
         </longdesc>
         <example>
            <desc>Find the offsetParent of item "A."</desc>
         </example>
      </entry>
      <entry type="method" name="slideToggle">
         <desc>通过高度变化来切换所有匹配元素的可见性，并在切换完成后可选地触发一个回调函数。Display or hide the matched elements with a sliding motion.</desc>
         <signature>
            <argument name="duration">
               <desc>A string or number determining how long the animation will run.</desc>
            </argument>
            <argument name="callback">
               <desc>A function to call once the animation is complete.</desc>
            </argument>
         </signature>
         <longdesc>这个动画效果只调整元素的高度，可以使匹配的元素以“滑动”的方式隐藏或显示。在jQuery 1.3中，上下的padding和margin也会有动画，效果更流畅。
  <p>The <code>.slideToggle()</code> method animates the height of the matched elements. This causes lower parts of the page to slide up or down, appearing to reveal or conceal the items. If the element is initially displayed, it will be hidden; if hidden, it will be shown. The <code>display</code> property is saved and restored as needed. If an element has a <code>display</code> value of <code>inline</code>, then is hidden and shown, it will once again be displayed <code>inline</code>. When the height reaches 0 after a hiding animation, the <code>display</code> style property is set to <code>none</code> to ensure that the element no longer affects the layout of the page.</p>
            <p>Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings <code>'fast'</code> and <code>'slow'</code> can be supplied to indicate durations of <code>200</code> and <code>600</code> milliseconds, respectively.</p>
            <p>If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but <code>this</code> is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.</p>
            <p>We can animate any element, such as a simple image:</p>
            <pre>&lt;div id="clickme"&gt;
  Click here
&lt;/div&gt;
&lt;img id="book" src="book.png" alt="" width="100" height="123" /&gt;</pre>
            <p>We will cause <code>.slideToggle()</code> to be called when another element is clicked:</p>
            <pre>$('#clickme').click(function() {
  $('#book').slideToggle('slow', function() {
    // Animation complete.
  });
});
</pre>
            <p>With the element initially shown, we can hide it slowly with the first click:</p>
            <p class="image four-across"> 
               <img src="/images/0042_06_25.png" alt=""/>
               <img src="/images/0042_06_26.png" alt=""/>
               <img src="/images/0042_06_27.png" alt=""/>
               <img src="/images/0042_06_28.png" alt=""/>
            </p>
            <p>A second click will show the element once again:</p>

            <p class="image four-across"> 
               <img src="/images/0042_06_29.png" alt=""/>
               <img src="/images/0042_06_30.png" alt=""/>
               <img src="/images/0042_06_31.png" alt=""/>
               <img src="/images/0042_06_32.png" alt=""/>
            </p>
         </longdesc>
         <example>
            <desc>Animates all paragraphs to slide up or down, completing the animation within 600 milliseconds.</desc>
         </example>
         <example>
            <desc>Animates divs between dividers with a toggle that makes some appear and some disappear.</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery.post">
         <desc>通过远程 HTTP POST 请求载入信息。Load data from the server using a HTTP POST request.</desc>
         <signature>
            <argument name="url">
               <desc>A string containing the URL to which the request is sent.</desc>
            </argument>
            <argument name="data">
               <desc>A map or string that is sent to the server with the request.</desc>
            </argument>
            <argument name="success(data, textStatus, XMLHttpRequest)">
               <desc>A callback function that is executed if the request succeeds.</desc>
            </argument>
            <argument name="dataType">
               <desc>The type of data expected from the server.</desc>
            </argument>
         </signature>
         <longdesc>这是一个简单的 POST 请求功能以取代复杂 $.ajax 。请求成功时可调用回调函数。如果需要在出错时执行函数，请使用 $.ajax。<p>This is a shorthand Ajax function, which is equivalent to:</p>
            <pre>$.ajax({
  type: 'POST',
  url: <em>url</em>,
  data: <em>data</em>,
  success: <em>success</em>
  dataType: <em>dataType</em>
});
</pre>
		          <p>The <code>success</code> callback function is passed the returned data, which will be an XML root element or a text string depending on the MIME type of the response. It is also passed the text status of the response.</p>
		          <p>As of jQuery 1.4, the <code>success</code> callback function is also passed the XMLHttpRequest object.</p>
		          <p>Most implementations will specify a success handler:</p>
		          <pre>$.post('ajax/test.html', function(data) {
  $('.result').html(data);
});
</pre>
		          <p>This example fetches the requested HTML snippet and inserts it on the page.</p>
		          <p>Pages fetched with <code>POST</code> are never cached, so the <code>cache</code> and <code>ifModified</code> options in <code>
                  <a href="/jQuery.ajaxSetup">jQuery.ajaxSetup()</a>
               </code> have no effect on these requests.</p>
         </longdesc>
         <example>
            <desc>Request the test.php page, but ignore the return results.</desc>
         </example>
         <example>
            <desc>Request the test.php page and send some additional data along (while still ignoring the return results).</desc>
         </example>
         <example>
            <desc>pass arrays of data to the server (while still ignoring the return results).</desc>
         </example>
         <example>
            <desc>send form data using ajax requests</desc>
         </example>
         <example>
            <desc>Alert out the results from requesting test.php (HTML or XML, depending on what was returned).</desc>
         </example>
         <example>
            <desc>Alert out the results from requesting test.php with an additional payload of data (HTML or XML, depending on what was returned).</desc>
         </example>
         <example>
            <desc>Gets the test.php page content, store it in a XMLHttpResponse object and applies the process() JavaScript function.</desc>
         </example>
         <example>
            <desc>Gets the test.php page contents which has been returned in json format (<?php echo json_encode(array("name"=>"John","time"=>"2pm")); ?>)

</desc>
         </example>
      </entry>
      <entry type="method" name="slideUp">
         <desc>通过高度变化（向上减小）来动态地隐藏所有匹配的元素，在隐藏完成后可选地触发一个回调函数。Hide the matched elements with a sliding motion.</desc>
         <signature>
            <argument name="duration">
               <desc>A string or number determining how long the animation will run.</desc>
            </argument>
            <argument name="callback">
               <desc>A function to call once the animation is complete.</desc>
            </argument>
         </signature>
         <longdesc>这个动画效果只调整元素的高度，可以使匹配的元素以“滑动”的方式隐藏起来。在jQuery 1.3中，上下的padding和margin也会有动画，效果更流畅。
<p>The <code>.slideUp()</code> method animates the height of the matched elements. This causes lower parts of the page to slide up, appearing to conceal the items. Once the height reaches 0, the <code>display</code> style property is set to <code>none</code> to ensure that the element no longer affects the layout of the page.</p>
            <p>Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings <code>'fast'</code> and <code>'slow'</code> can be supplied to indicate durations of <code>200</code> and <code>600</code> milliseconds, respectively. If any other string is supplied, or if the <code>duration</code> parameter is omitted, the default duration of  <code>400</code> milliseconds is used.</p>
            <p>If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but <code>this</code> is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.</p>
            <p>We can animate any element, such as a simple image:</p>
            <pre>&lt;div id="clickme"&gt;
  Click here
&lt;/div&gt;
&lt;img id="book" src="book.png" alt="" width="100" height="123" /&gt;</pre>
            <p>With the element initially shown, we can hide it slowly:</p>
            <pre>$('#clickme').click(function() {
  $('#book').slideUp('slow', function() {
    // Animation complete.
  });
});
  </pre>
            <p class="image four-across"> 
               <img src="/images/0042_06_21.png" alt=""/>
               <img src="/images/0042_06_22.png" alt=""/>
               <img src="/images/0042_06_23.png" alt=""/> 
               <img src="/images/0042_06_24.png" alt=""/>
            </p>
         </longdesc>
         <example>
            <desc>Animates all divs to slide up, completing the animation within 400 milliseconds.</desc>
         </example>
         <example>
            <desc>Animates the parent paragraph to slide up, completing the animation within 200 milliseconds. Once the animation is done, it displays an alert.</desc>
         </example>
      </entry>
      <entry type="method" name="nextAll">
         <desc>查找当前元素之后所有的同辈元素。Get all following siblings of each element in the set of matched elements, optionally filtered by a selector.</desc>
         <signature>
            <argument name="selector">
               <desc>A string containing a selector expression to match elements against.</desc>
            </argument>
         </signature>
         <longdesc>可以用表达式过滤<p>Given a jQuery object that represents a set of DOM elements, the <code>.nextAll()</code> method allows us to search through the successors of these elements in the DOM tree and construct a new jQuery object from the matching elements.</p>
            <p>The method optionally accepts a selector expression of the same type that we can pass to the <code>$()</code> function. If the selector is supplied, the elements will be filtered by testing whether they match it.</p>
            <p>Consider a page with a simple list on it:</p>
            <pre>
&lt;ul&gt;
   &lt;li&gt;list item 1&lt;/li&gt;
   &lt;li&gt;list item 2&lt;/li&gt;
   &lt;li class="third-item"&gt;list item 3&lt;/li&gt;
   &lt;li&gt;list item 4&lt;/li&gt;
   &lt;li&gt;list item 5&lt;/li&gt;
&lt;/ul&gt;
</pre>
            <p>If we begin at the third item, we can find the elements which come after it:</p>
            <pre>$('li.third-item').nextAll().css('background-color', 'red');</pre>
            <p>The result of this call is a red background behind items 4 and 5. Since we do not supply a selector expression, these following elements are unequivocally included as part of the object. If we had supplied one, the elements would be tested for a match before they were included.</p>
         </longdesc>
         <example>
            <desc>Locate all the divs after the first and give them a class.</desc>
         </example>
         <example>
            <desc>Locate all the paragraphs after the second child in the body and give them a class.</desc>
         </example>
      </entry>
      <entry type="method" name="next">
         <desc>取得一个包含匹配的元素集合中每一个元素紧邻的后面同辈元素的元素集合。Get the immediately following sibling of each element in the set of matched elements, optionally filtered by a selector.</desc>
         <signature>
            <argument name="selector">
               <desc>A string containing a selector expression to match elements against.</desc>
            </argument>
         </signature>
         <longdesc>这个函数只返回后面那个紧邻的同辈元素，而不是后面所有的同辈元素（可以使用nextAll）。可以用一个可选的表达式进行筛选。<p>Given a jQuery object that represents a set of DOM elements, the <code>.next()</code> method allows us to search through the immediately following sibling of these elements in the DOM tree and construct a new jQuery object from the matching elements.</p>
            <p>The method optionally accepts a selector expression of the same type that we can pass to the <code>$()</code> function. If the the immediately following sibling matches the selector, it remains in the newly constructed jQuery object; otherwise, it is excluded.</p>
            <p>Consider a page with a simple list on it:</p>
            <pre>
&lt;ul&gt;
   &lt;li&gt;list item 1&lt;/li&gt;
   &lt;li&gt;list item 2&lt;/li&gt;
   &lt;li class="third-item"&gt;list item 3&lt;/li&gt;
   &lt;li&gt;list item 4&lt;/li&gt;
   &lt;li&gt;list item 5&lt;/li&gt;
&lt;/ul&gt;
</pre>
            <p>If we begin at the third item, we can find the element which comes just after it:</p>
            <pre>$('li.third-item').next().css('background-color', 'red');</pre>
            <p>The result of this call is a red background behind item 4. Since we do not supply a selector expression, this following element is unequivocally included as part of the object. If we had supplied one, the element would be tested for a match before it was included.</p>
         </longdesc>
         <example>
            <desc>Find the very next sibling of each disabled button and change its text "this button is disabled".</desc>
         </example>
         <example>
            <desc>Find the very next sibling of each paragraph. Keep only the ones with a class "selected".</desc>
         </example>
      </entry>
      <entry type="method" name="slideDown">
         <desc>通过高度变化（向下增大）来动态地显示所有匹配的元素，在显示完成后可选地触发一个回调函数。Display the matched elements with a sliding motion.</desc>
         <signature>
            <argument name="duration">
               <desc>A string or number determining how long the animation will run.</desc>
            </argument>
            <argument name="callback">
               <desc>A function to call once the animation is complete.</desc>
            </argument>
         </signature>
         <longdesc>这个动画效果只调整元素的高度，可以使匹配的元素以“滑动”的方式显示出来。在jQuery 1.3中，上下的padding和margin也会有动画，效果更流畅。
<p>The <code>.slideDown()</code> method animates the height of the matched elements. This causes lower parts of the page to slide down, making way for the revealed items.</p>
            <p>Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings <code>'fast'</code> and <code>'slow'</code> can be supplied to indicate durations of <code>200</code> and <code>600</code> milliseconds, respectively. If any other string is supplied, or if the <code>duration</code> parameter is omitted, the default duration of  <code>400</code> milliseconds is used.</p>
            <p>If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but <code>this</code> is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.</p>
            <p>We can animate any element, such as a simple image:</p>
            <pre>&lt;div id="clickme"&gt;
  Click here
&lt;/div&gt;
&lt;img id="book" src="book.png" alt="" width="100" height="123" /&gt;</pre>
            <p>With the element initially hidden, we can show it slowly:</p>
            <pre>$('#clickme').click(function() {
  $('#book').slideDown('slow', function() {
    // Animation complete.
  });
});</pre>
            <p class="image four-across"> 
               <img src="/images/0042_06_17.png" alt=""/>
               <img src="/images/0042_06_18.png" alt=""/>
               <img src="/images/0042_06_19.png" alt=""/>
               <img src="/images/0042_06_20.png" alt=""/>
            </p>
         </longdesc>
         <example>
            <desc>Animates all divs to slide down and show themselves over 600 milliseconds.</desc>
         </example>
         <example>
            <desc>Animates all inputs to slide down, completing the animation within 1000 milliseconds. Once the animation is done, the input look is changed especially if it is the middle input which gets the focus.</desc>
         </example>
      </entry>
      <entry type="method" name="find">
         <desc>搜索所有与指定表达式匹配的元素。这个函数是找出正在处理的元素的后代元素的好方法。Get the descendants of each element in the current set of matched elements, filtered by a selector.</desc>
         <signature>
            <argument name="selector">
               <desc>A string containing a selector expression to match elements against.</desc>
            </argument>
         </signature>
         <longdesc>所有搜索都依靠jQuery表达式来完成。这个表达式可以使用CSS1-3的选择器语法来写。<p>Given a jQuery object that represents a set of DOM elements, the <code>.find()</code> method allows us to search through the descendants of these elements in the DOM tree and construct a new jQuery object from the matching elements. The <code>.find()</code> and <code>.children()</code> methods are similar, except that the latter only travels a single level down the DOM tree.</p>
            <p>The method accepts a selector expression of the same type that we can pass to the <code>$()</code> function. The elements will be filtered by testing whether they match this selector.</p>
            <p>Consider a page with a basic nested list on it:</p>
            <pre>
&lt;ul class="level-1"&gt;
  &lt;li class="item-i"&gt;I&lt;/li&gt;
  &lt;li class="item-ii"&gt;II
    &lt;ul class="level-2"&gt;
      &lt;li class="item-a"&gt;A&lt;/li&gt;
      &lt;li class="item-b"&gt;B
        &lt;ul class="level-3"&gt;
          &lt;li class="item-1"&gt;1&lt;/li&gt;
          &lt;li class="item-2"&gt;2&lt;/li&gt;
          &lt;li class="item-3"&gt;3&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li class="item-c"&gt;C&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li class="item-iii"&gt;III&lt;/li&gt;
&lt;/ul&gt;
</pre>
            <p>If we begin at item II, we can find list items within it:</p>
            <pre>$('li.item-ii').find('li').css('background-color', 'red');</pre>
            <p>The result of this call is a red background on items A, B, 1, 2, 3, and C. Even though item II matches the selector expression, it is not included in the results; only descendants are considered candidates for the match.</p>
            <blockquote>
               <p>Unlike in the rest of the tree traversal methods, the selector expression is required in a call to <code>.find()</code>. If we need to retrieve all of the descendant elements, we can pass in the universal selector <code>'*'</code> to accomplish this.</p>
            </blockquote>
            <p>
               <a href="http://api.jquery.com/jquery/#selector-context">Selector context</a> is implemented with the <code>.find()</code> 
               <code>method;</code> therefore, <code>$('li.item-ii').find('li')</code> is equivalent to <code>$('li', 'li.item-ii')</code>.</p>
         </longdesc>
         <example>
            <desc>Starts with all paragraphs and searches for descendant span elements, same as $("p span")</desc>
         </example>
         <example>
            <desc>Add spans around each word then add a hover and italicize words with the letter <strong>t</strong>.</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery.getScript">
         <desc>通过 HTTP GET 请求载入并执行一个 JavaScript 文件。Load a JavaScript file from the server using a GET HTTP request, then execute it.</desc>
         <signature>
            <argument name="url">
               <desc>A string containing the URL to which the request is sent.</desc>
            </argument>
            <argument name="success(data, textStatus)">
               <desc>A callback function that is executed if the request succeeds.</desc>
            </argument>
         </signature>
         <longdesc>jQuery 1.2 版本之前，getScript 只能调用同域 JS 文件。 1.2中，您可以跨域调用 JavaScript 文件。注意：Safari 2 或更早的版本不能在全局作用域中同步执行脚本。如果通过 getScript 加入脚本，请加入延时函数。<p>This is a shorthand Ajax function, which is equivalent to:</p>
				        <pre>$.ajax({
  url: <em>url</em>,
  dataType: 'script',
  success: <em>success</em>
});
</pre>
				        <p>The callback is passed the returned JavaScript file. This is generally not useful as the script will already have run at this point.</p>
				        <p>The script is executed in the global context, so it can refer to other variables and use jQuery functions. Included scripts should have some impact on the current page:</p>
				        <pre>$('.result').html('&lt;p&gt;Lorem ipsum dolor sit amet.&lt;/p&gt;');</pre>
				        <p>The script can then be included and run by referencing the file name:</p>
				        <pre>$.getScript('ajax/test.js', function() {
  alert('Load was performed.');
});</pre>
         </longdesc>
         <example>
            <desc>We load the new <a href="http://jquery.com/plugins/project/color">official jQuery Color Animation plugin</a> dynamically and bind some color animations to occur once the new functionality is loaded.</desc>
         </example>
         <example>
            <desc>Load the test.js JavaScript file and execute it.</desc>
         </example>
         <example>
            <desc>Load the test.js JavaScript file and execute it, displaying an alert message when the execution is complete.</desc>
         </example>
      </entry>
      <entry type="method" name="contents">
         <desc>查找匹配元素内部所有的子节点（包括文本节点）。如果元素是一个iframe，则查找文档内容Get the children of each element in the set of matched elements, including text nodes.</desc>
         <signature/>
         <longdesc>
            <p>Given a jQuery object that represents a set of DOM elements, the <code>.contents()</code> method allows us to search through the immediate children of these elements in the DOM tree and construct a new jQuery object from the matching elements. The <code>.contents()</code> and <code>.children()</code> methods are similar, except that the former includes text nodes as well as HTML elements in the resulting jQuery object.</p>
            <p>The <code>.contents()</code> method can also be used to get the content document of an iframe, if the iframe is on the same domain as the main page.</p>
            <p>Consider a simple <code>&lt;div&gt;</code> with a number of text nodes, each of which is separated by two line break elements (<code>&lt;br /&gt;</code>):</p>
            <pre>&lt;div class="container"&gt;
  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed 
  do eiusmod tempor incididunt ut labore et dolore magna aliqua. 
  &lt;br /&gt;&lt;br /&gt;
  Ut enim ad minim veniam, quis nostrud exercitation ullamco 
  laboris nisi ut aliquip ex ea commodo consequat.
  &lt;br /&gt; &lt;br /&gt;
  Duis aute irure dolor in reprehenderit in voluptate velit 
  esse cillum dolore eu fugiat nulla pariatur.
&lt;/div&gt;
</pre>
            <p>We can employ the <code>.contents()</code> method to help convert this blob of text into three well-formed paragraphs:</p>
            <pre>
$('.container').contents().filter(function() {
  return this.nodeType == 3;
})
  .wrap('&lt;p&gt;&lt;/p&gt;')
.end()
.filter('br')
  .remove();
</pre>
            <p>This code first retrieves the contents  of <code>&lt;div class="container"&gt;</code> and then filters it for text nodes, which are wrapped in paragraph tags. This is accomplished by testing the <a href="https://developer.mozilla.org/en/nodeType">
                  <code>.nodeType</code> property</a> of the element. This DOM property holds a numeric code indicating the node's type; text nodes use the code 3. The contents are again filtered, this time for <code>&lt;br /&gt;</code> elements, and these elements are removed.</p>
         </longdesc>
         <example>
            <desc>Find all the text nodes inside a paragraph and wrap them with a bold tag.</desc>
         </example>
         <example>
            <desc>Change the background colour of links inside of an iframe.</desc>
         </example>
      </entry>
      <entry type="method" name="closest">
         <desc>jQuery 1.3新增。从元素本身开始，逐级向上级元素匹配，并返回最先匹配的元素。Get the first ancestor element that matches the selector, beginning at the current element and progressing up through the DOM tree.</desc>
         <signature>
            <argument name="selector">
               <desc>A string containing a selector expression to match elements against.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="selector">
               <desc>A string containing a selector expression to match elements against.</desc>
            </argument>
            <argument name="context">
               <desc>A DOM element within which a matching element may be found. If no context is passed in then the context of the jQuery set will be used instead.</desc>
            </argument>
         </signature>
         <longdesc>closest会首先检查当前元素是否匹配，如果匹配则直接返回元素本身。如果不匹配则向上查找父元素，一层一层往上，直到找到匹配选择器的元素。如果什么都没找到则返回一个空的jQuery对象。

		closest和parents的主要区别是：1，前者从当前元素开始匹配寻找，后者从父元素开始匹配寻找；2，前者逐级向上查找，直到发现匹配的元素后就停止了，后者一直向上查找直到根元素，然后把这些元素放进一个临时集合中，再用给定的选择器表达式去过滤；3，前者返回0或1个元素，后者可能包含0个，1个，或者多个元素。		

		closest对于处理事件委托非常有用。
<p>Given a jQuery object that represents a set of DOM elements, the <code>.closest()</code> method allows us to search through these elements and their ancestors in the DOM tree and construct a new jQuery object from the matching elements. The <code>.parents()</code> and <code>.closest()</code> methods are similar in that they both traverse up the DOM tree. The differences between the two, though subtle, are significant:</p>
            <table>
               <thead>
  	               <tr>
  	                  <th>.closest()</th>
  	                  <th>.parents()</th>
  	               </tr>
               </thead>
               <tbody>
  	               <tr>
  	                  <td>Begins with the current element</td>
  	                  <td>Begins with the parent element</td>
                  </tr>
  	               <tr>
  	                  <td>Travels up the DOM tree until it finds a match for the supplied selector</td>
  	                  <td>Travels up the DOM tree to the document's root element, adding each ancestor element to a temporary collection; it then filters that collection based on a selector if one is supplied </td>
  	               </tr>
  	               <tr>
  	                  <td>The returned jQuery object contains zero or one element</td>
  	                  <td>The returned jQuery object contains zero, one, or multiple elements</td>
  	               </tr>
               </tbody>
            </table>

              
            <pre>
  &lt;ul id="one" class="level-1"&gt;
    &lt;li class="item-i"&gt;I&lt;/li&gt;
    &lt;li id="ii" class="item-ii"&gt;II
    &lt;ul class="level-2"&gt;
      &lt;li class="item-a"&gt;A&lt;/li&gt;
      &lt;li class="item-b"&gt;B
        &lt;ul class="level-3"&gt;
          &lt;li class="item-1"&gt;1&lt;/li&gt;
          &lt;li class="item-2"&gt;2&lt;/li&gt;
          &lt;li class="item-3"&gt;3&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li class="item-c"&gt;C&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li class="item-iii"&gt;III&lt;/li&gt;
&lt;/ul&gt;
</pre>
            <p>Suppose we perform a search for <code>&lt;ul&gt;</code> elements starting at item A:</p>
            <pre>
$('li.item-a').closest('ul')
  .css('background-color', 'red');
</pre>
            <p>This will change the color of the level-2 <code>&lt;ul&gt;</code>, since it is the first encountered when traveling up the DOM tree.</p>
            <p>Suppose we search for an <code>&lt;li&gt;</code> element instead:</p>
            <pre>$('li.item-a').closest('li')
  .css('background-color', 'red');
</pre>
            <p>This will change the color of list item A. The <code>.closest()</code> method begins its search with the element itself before progressing up the DOM tree, and stops when item A matches the selector.</p>
            <p>We can pass in a DOM element as the context within which to search for the closest element.</p>
            <pre>var listItemII = document.getElementById('ii');
$('li.item-a').closest('ul', listItemII)
  .css('background-color', 'red');
$('li.item-a').closest('#one', listItemII)
  .css('background-color', 'green');</pre>
            <p>This will change the color of the level-2 <code>&lt;ul&gt;</code>, because it is both the first <code>&lt;ul&gt;</code> ancestor of list item A and a descendant of list item II. It will not change the color of the level-1 <code>&lt;ul&gt;</code>, however, because it is not a descendant of list item II.</p>
         </longdesc>
         <example>
            <desc>Show how event delegation can be done with closest.</desc>
         </example>
      </entry>
      <entry type="method" name="closest">
         <desc>jQuery 1.3新增。从元素本身开始，逐级向上级元素匹配，并返回最先匹配的元素。Gets an array of all the elements and selectors matched against the current element up through the DOM tree.</desc>
         <signature>
            <argument name="selectors">
               <desc>An array or string containing a selector expression to match elements against (can also be a jQuery object).</desc>
            </argument>
            <argument name="context">
               <desc>A DOM element within which a matching element may be found. If no context is passed in then the context of the jQuery set will be used instead.</desc>
            </argument>
         </signature>
         <longdesc>closest会首先检查当前元素是否匹配，如果匹配则直接返回元素本身。如果不匹配则向上查找父元素，一层一层往上，直到找到匹配选择器的元素。如果什么都没找到则返回一个空的jQuery对象。

		closest和parents的主要区别是：1，前者从当前元素开始匹配寻找，后者从父元素开始匹配寻找；2，前者逐级向上查找，直到发现匹配的元素后就停止了，后者一直向上查找直到根元素，然后把这些元素放进一个临时集合中，再用给定的选择器表达式去过滤；3，前者返回0或1个元素，后者可能包含0个，1个，或者多个元素。		

		closest对于处理事件委托非常有用。
<p>This method is primarily meant to be used internally or by plugin authors.</p>
         </longdesc>
         <example>
            <desc>Show how event delegation can be done with closest.</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery.getJSON">
         <desc>通过 HTTP GET 请求载入 JSON 数据。Load JSON-encoded data from the server using a GET HTTP request.</desc>
         <signature>
            <argument name="url">
               <desc>A string containing the URL to which the request is sent.</desc>
            </argument>
            <argument name="data">
               <desc>A map or string that is sent to the server with the request.</desc>
            </argument>
            <argument name="callback(data, textStatus)">
               <desc>A callback function that is executed if the request succeeds.</desc>
            </argument>
         </signature>
         <longdesc>在 jQuery 1.2 中，您可以通过使用&lt;a href="http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/" class="external text" title="http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/"&gt;JSONP&lt;/a&gt; 形式的回调函数来加载其他网域的JSON数据，如 "myurl?callback=?"。jQuery 将自动替换 ? 为正确的函数名，以执行回调函数。  注意：此行以后的代码将在这个回调函数执行前执行。
    <p>This is a shorthand Ajax function, which is equivalent to:</p>
				        <pre>$.ajax({
  url: <em>url</em>,
  dataType: 'json',
  data: <em>data</em>,
  success: <em>callback</em>
});
</pre>
            <p>The callback is passed the returned data, which will be a JavaScript object or array as defined by the JSON structure and parsed using the <code>
                  <a href="/jQuery.parseJSON">$.parseJSON()</a>
               </code> method.</p>
            <p>Most implementations will specify a success handler:</p>
            <pre>$.getJSON('ajax/test.json', function(data) {
  $('.result').html('&lt;p&gt;' + data.foo + '&lt;/p&gt;'
    + '&lt;p&gt;' + data.baz[1] + '&lt;/p&gt;');
});
</pre>
	           <p>This example, of course, relies on the structure of the JSON file:</p>
	           <pre>{
  "foo": "The quick brown fox jumps over the lazy dog.",
  "bar": "ABCDEFG",
  "baz": [52, 97]
}
</pre>
            <p>Using this structure, the example inserts the first string and second number from the file onto the page.</p>
            <blockquote>
               <p>
                  <strong>Important:</strong> As of jQuery 1.4, if the JSON file contains a syntax error, the request will usually fail silently. Avoid frequent hand-editing of JSON data for this reason. JSON is a data-interchange format with syntax rules that are stricter than those of JavaScript's object literal notation. For example, all strings represented in JSON, whether they are properties or values, must be enclosed in double-quotes. For details on the JSON format, see <a href="http://json.org/">http://json.org/</a>.</p>
	           </blockquote>
	           <h4 id="jsonp">JSONP</h4>
            <p>If the URL includes the string "callback=?" in the URL, the request is treated as JSONP instead. See the discussion of the <code>jsonp</code> data type in <code>
                  <a href="/jQuery.ajax">$.ajax()</a>
               </code> for more details.</p>
         </longdesc>
         <example>
            <desc>Loads the four most recent cat pictures from the Flickr JSONP API.</desc>
         </example>
         <example>
            <desc>Load the JSON data from test.js and access a name from the returned JSON data.</desc>
         </example>
         <example>
            <desc>Load the JSON data from test.js, passing along additional data, and access a name from the returned JSON data.</desc>
         </example>
         <example>
            <desc>List the result of a consultation of pages.php in HTML as an array. By Manuel Gonzalez.</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery.get">
         <desc>通过远程 HTTP GET 请求载入信息。Load data from the server using a HTTP GET request.</desc>
         <signature>
            <argument name="url">
               <desc>A string containing the URL to which the request is sent.</desc>
            </argument>
            <argument name="data">
               <desc>A map or string that is sent to the server with the request.</desc>
            </argument>
            <argument name="callback(data, textStatus, XMLHttpRequest)">
               <desc>A callback function that is executed if the request succeeds.</desc>
            </argument>
            <argument name="dataType">
               <desc>The type of data expected from the server.</desc>
            </argument>
         </signature>
         <longdesc>这是一个简单的 GET 请求功能以取代复杂 $.ajax 。请求成功时可调用回调函数。如果需要在出错时执行函数，请使用 $.ajax。<p>This is a shorthand Ajax function, which is equivalent to:</p>
				        <pre>$.ajax({
  url: <em>url</em>,
  data: <em>data</em>,
  success: <em>success</em>,
  dataType: <em>dataType</em>
});
</pre>
				        <p>The <code>success</code> callback function is passed the returned data, which will be an XML root element, text string, JavaScript file, or JSON object, depending on the MIME type of the response. It is also passed the text status of the response. </p>
				        <p>As of jQuery 1.4, the <code>success</code> callback function is also passed the XMLHttpRequest object.</p>
				        <p>Most implementations will specify a success handler:</p>
				        <pre>$.get('ajax/test.html', function(data) {
  $('.result').html(data);
  alert('Load was performed.');
});
</pre>
				        <p>This example fetches the requested HTML snippet and inserts it on the page.</p>
         </longdesc>
         <example>
            <desc>Request the test.php page, but ignore the return results.</desc>
         </example>
         <example>
            <desc>Request the test.php page and send some additional data along (while still ignoring the return results).</desc>
         </example>
         <example>
            <desc>pass arrays of data to the server (while still ignoring the return results).</desc>
         </example>
         <example>
            <desc>Alert out the results from requesting test.php (HTML or XML, depending on what was returned).</desc>
         </example>
         <example>
            <desc>Alert out the results from requesting test.cgi with an additional payload of data (HTML or XML, depending on what was returned).</desc>
         </example>
      </entry>
      <entry type="method" name="load">
         <desc>在每一个匹配元素的load事件中绑定一个处理函数。 载入远程 HTML 文件代码并插入至 DOM 中。Load data from the server and place the returned HTML into the matched element.</desc>
         <signature>
            <argument name="url">
               <desc>A string containing the URL to which the request is sent.</desc>
            </argument>
            <argument name="data">
               <desc>A map or string that is sent to the server with the request.</desc>
            </argument>
            <argument name="complete(responseText, textStatus, XMLHttpRequest)">
               <desc>A callback function that is executed when the request completes.</desc>
            </argument>
         </signature>
         <longdesc>如果绑定给window对象，则会在所有内容加载后触发，包括窗口，框架，对象和图像。如果绑定在元素上，则当元素的内容加载完毕后触发。

'''注意:'''只有当在这个元素完全加载完之前绑定load的处理函数,才会在他加载完后触发。如果之后再绑定就永远不会触发了。所以'''不要'''在$(document).ready()里绑定load事件，因为jQuery会在所有DOM加载完成后再绑定load事件。默认使用 GET 方式 - 传递附加参数时自动转换为 POST 方式。jQuery 1.2 中，可以指定选择符，来筛选载入的 HTML 文档，DOM 中将仅插入筛选出的 HTML 代码。语法形如 "url #some &gt; selector"。请查看示例。
    <p>This method is the simplest way to fetch data from the server. It is roughly equivalent to <code>$.get(url, data, success)</code> except that it is a method rather than global function and it has an implicit callback function.  When a successful response is detected (i.e. when <code>textStatus</code> is "success" or "notmodified"), <code>.load()</code> sets the HTML contents of the matched element to the returned data. This means that most uses of the method can be quite simple:</p>
            <pre>$('#result').load('ajax/test.html');</pre>
            <p>The provided callback, if any, is executed after this post-processing has been performed:</p>
            <pre>$('#result').load('ajax/test.html', function() {
  alert('Load was performed.');
});</pre>
            <p>In the two examples above, if the current document does not contain an element with an ID of "result," the <code>.load()</code> method is not executed.</p>
            <p>The POST method is used if data is provided as an object; otherwise, GET is assumed.</p>

            <blockquote>
               <p>Note: The event handling suite also has a method named <code>
                     <a href="/load-event">.load()</a>
                  </code>. Which one is fired depends on the set of arguments passed.</p>
            </blockquote>
            <h4>Loading Page Fragments</h4>
            <p>The <code>.load()</code> method, unlike <code>
                  <a href="/jQuery.get">$.get()</a>
               </code>, allows us to specify a portion of the remote document to be inserted. This is achieved with a special syntax for the <code>url</code> parameter. If one or more space characters are included in the string, the portion of the string following the first space is assumed to be a jQuery selector that determines the content to be loaded.   </p>
            <p>We could modify the example above to use only part of the document that is fetched:</p>
            <pre>$('#result').load('ajax/test.html #container');</pre>
            <p>When this method executes, it retrieves the content of <code>ajax/test.html</code>, but then jQuery parses the returned document to find the element with an ID of <code>container</code>. This element, along with its contents, is inserted into the element with an ID of <code>result</code>, and the rest of the retrieved document is discarded.</p>
            <p>jQuery uses the browser's <code>.innerHTML</code> property to parse the retrieved document and insert it into the current document. During this process, browsers often filter elements from the document such as <code>&lt;html&gt;</code>, <code>&lt;title&gt;</code>, or <code>&lt;head&gt;</code> elements. As a result, the elements retrieved by <code>.load()</code> may not be exactly the same as if the document were retrieved directly by the browser.</p>
         </longdesc>
         <example>
            <desc>Load the main page's footer navigation into an ordered list.</desc>
         </example>
         <example>
            <desc>Display a notice if the Ajax request encounters an error.</desc>
         </example>
         <example>
            <desc>Load the feeds.html file into the div with the ID of feeds.</desc>
         </example>
         <example>
            <desc>pass arrays of data to the server.</desc>
         </example>
         <example>
            <desc>Same as above, but will POST the additional parameters to the server and a callback that is executed when the server is finished responding.</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery.ajax">
         <desc>通过 HTTP 请求加载远程数据。Perform an asynchronous HTTP (Ajax) request.</desc>
         <signature>
            <argument name="settings">
               <desc>A set of key/value pairs that configure the Ajax request. All options are optional. A default can be set for any option with <a href="/jQuery.ajaxSetup">$.ajaxSetup()</a>.</desc>
            </argument>
            <option name="async">
               <desc>By default, all requests are sent asynchronous (i.e. this is set to true by default). If you need synchronous requests, set this option to false. Cross-domain requests and <code>dataType: "jsonp"</code> requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active.</desc>
            </option>
            <option name="beforeSend(XMLHttpRequest)">
               <desc>A pre-callback to modify the XMLHttpRequest object before it is sent. Use this to set custom headers etc. The XMLHttpRequest is passed as the only argument. This is an <a href="http://docs.jquery.com/Ajax_Events">Ajax Event</a>. You may return false in function to cancel the request.</desc>
            </option>
            <option name="cache">
               <desc>If set to false it will force the pages that you request to not be cached by the browser.</desc>
            </option>
            <option name="complete(XMLHttpRequest, textStatus)">
               <desc>A function to be called when the request finishes (after success and error callbacks are executed). The function gets passed two arguments: The XMLHttpRequest object and a string describing the status of the request. This is an <a href="http://docs.jquery.com/Ajax_Events">Ajax Event</a>.</desc>
            </option>
            <option name="contentType">
               <desc>When sending data to the server, use this content-type. Default is "application/x-www-form-urlencoded", which is fine for most cases. If you explicitly pass in a content-type to $.ajax() then it'll always be sent to the server (even if no data is sent). Data will always be transmitted to the server using UTF-8 charset; you must decode this appropriately on the server side.</desc>
            </option>
            <option name="context">
               <desc>This object will be made the context of all Ajax-related callbacks. For example specifying a DOM element as the context will make that the context for the complete callback of a request, like so: <pre>$.ajax({ url: "test.html", context: document.body, success: function(){
        $(this).addClass("done");
      }});</pre>
               </desc>
            </option>
            <option name="data">
               <desc>Data to be sent to the server. It is converted to a query string, if not already a string. It's appended to the url for GET-requests. See processData option to prevent this automatic processing. Object must be Key/Value pairs. If value is an Array, jQuery serializes multiple values with same key based on the value of the <code>traditional</code> setting (described below).</desc>
            </option>
            <option name="dataFilter(data, type)">
               <desc>A function to be used to handle the raw responsed data of XMLHttpRequest.This is a pre-filtering function to sanitize the response.You should return the sanitized data.The function gets passed two arguments: The raw data returned from the server, and the 'dataType' parameter.</desc>
            </option>
            <option name="dataType">
               <desc>The type of data that you're expecting back from the server. If none is specified, jQuery will intelligently try to get the results, based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). The available types (and the result passed as the first argument to your success callback) are:
        <ul>
                     <li>"xml": Returns a XML document that can be processed via jQuery.</li>
                     <li>"html": Returns HTML as plain text; included script tags are evaluated when inserted in the DOM.</li>
                     <li>"script": Evaluates the response as JavaScript and returns it as plain text. Disables caching unless option "cache" is used. <strong>Note:</strong> This will turn POSTs into GETs for remote-domain requests.</li>
                     <li>"json": Evaluates the response as JSON and returns a JavaScript object. In jQuery 1.4 the JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. (See <a href="http://json.org/">json.org</a> for more information on proper JSON formatting.)</li>
                     <li>"jsonp": Loads in a JSON block using <a href="http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/">JSONP</a>. Will add an extra "?callback=?" to the end of your URL to specify the callback.</li>
                     <li>"text": A plain text string.</li>
                  </ul>
               </desc>
            </option>
            <option name="error(XMLHttpRequest, textStatus, errorThrown)">
               <desc>A function to be called if the request fails. The function is passed three arguments: The XMLHttpRequest object, a string describing the type of error that occurred and an optional exception object, if one occurred. Possible values for the second argument (besides null) are "timeout", "error", "notmodified" and "parsererror". This is an <a href="http://docs.jquery.com/Ajax_Events">Ajax Event</a>.</desc>
            </option>
            <option name="global">
               <desc>Whether to trigger global Ajax event handlers for this request. The default is true. Set to false to prevent the global handlers like ajaxStart or ajaxStop from being triggered. This can be used to control various <a href="http://docs.jquery.com/Ajax_Events">Ajax Events</a>.</desc>
            </option>
            <option name="ifModified">
               <desc>Allow the request to be successful only if the response has changed since the last request. This is done by checking the Last-Modified header. Default value is false, ignoring the header. In jQuery 1.4 this technique also checks the 'etag' specified by the server to catch unmodified data.</desc>
            </option>
            <option name="jsonp">
               <desc>Override the callback function name in a jsonp request.  This value will be used instead of 'callback' in the 'callback=?' part of the query string in the url.  So <code>{jsonp:'onJsonPLoad'}</code> would result in <code>'onJsonPLoad=?'</code> passed to the server.</desc>
            </option>
            <option name="jsonpCallback">
               <desc>Specify the callback function name for a jsonp request.  This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it'll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests.</desc>
            </option>
            <option name="password">
               <desc>A password to be used in response to an HTTP access authentication request.</desc>
            </option>
            <option name="processData">
               <desc>By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type "application/x-www-form-urlencoded". If you want to send a DOMDocument, or other non-processed data, set this option to false.</desc>
            </option>
            <option name="scriptCharset">
               <desc>Only for requests with "jsonp" or "script" dataType and "GET" type. Forces the request to be interpreted as a certain charset. Only needed for charset differences between the remote and local content.</desc>
            </option>
            <option name="success(data, textStatus, XMLHttpRequest)">
               <desc>A function to be called if the request succeeds. The function gets passed three arguments: The data returned from the server, formatted according to the 'dataType' parameter; a string describing the status; and the XMLHttpRequest object (available as of jQuery 1.4). This is an <a href="http://docs.jquery.com/Ajax_Events">Ajax Event</a>.</desc>
            </option>
            <option name="timeout">
               <desc>Set a local timeout (in milliseconds) for the request. This will override the global timeout, if one is set via <a href="/jQuery.ajaxSetup">$.ajaxSetup</a>. For example, you could use this property to give a single request a longer timeout than all other requests that you've set to time out in one second. See <a href="/jQuery.ajaxSetup">$.ajaxSetup</a>() for global timeouts.</desc>
            </option>
            <option name="traditional">
               <desc>Set this to true if you wish to use the traditional style of <a href="/jQuery.param">param serialization</a>.</desc>
            </option>
            <option name="type">
               <desc>The type of request to make ("POST" or "GET"), default is "GET". <strong>Note:</strong> Other HTTP request methods, such as PUT and DELETE, can also be used here, but they are not supported by all browsers.</desc>
            </option>
            <option name="url">
               <desc> A string containing the URL to which the request is sent.</desc>
            </option>
            <option name="username">
               <desc>A username to be used in response to an HTTP access authentication request.</desc>
            </option>
            <option name="xhr">
               <desc>Callback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory.</desc>
            </option>
         </signature>
         <longdesc>jQuery 底层 AJAX 实现。简单易用的高层实现见 $.get, $.post 等。$.ajax() 返回其创建的 XMLHttpRequest 对象。大多数情况下你无需直接操作该函数，除非你需要操作不常用的选项，以获得更多的灵活性。

最简单的情况下，$.ajax()可以不带任何参数直接使用。

'''注意'''，所有的选项都可以通过$.ajaxSetup()函数来全局设置。

'''回调函数'''

如果要处理$.ajax()得到的数据，则需要使用回调函数。beforeSend、error、dataFilter、success、complete。

&lt;ul&gt;
    &lt;li&gt;beforeSend 在发送请求之前调用，并且传入一个XMLHttpRequest作为参数。&lt;/li&gt;
    &lt;li&gt;error 在请求出错时调用。传入XMLHttpRequest对象，描述错误类型的字符串以及一个异常对象（如果有的话）&lt;/li&gt;
    &lt;li&gt;dataFilter 在请求成功之后调用。传入返回的数据以及"dataType"参数的值。并且必须返回新的数据（可能是处理过的）传递给success回调函数。&lt;/li&gt;
    &lt;li&gt;success 当请求之后调用。传入返回后的数据，以及包含成功代码的字符串。&lt;/li&gt;
    &lt;li&gt;complete 当请求完成之后调用这个函数，无论成功或失败。传入XMLHttpRequest对象，以及一个包含成功或错误代码的字符串。&lt;/li&gt;
&lt;/ul&gt;

'''数据类型'''

$.ajax()函数依赖服务器提供的信息来处理返回的数据。如果服务器报告说返回的数据是XML，那么返回的结果就可以用普通的XML方法或者jQuery的选择器来遍历。如果见得到其他类型，比如HTML，则数据就以文本形式来对待。

通过dataType选项还可以指定其他不同数据处理方式。除了单纯的XML，还可以指定 html、json、jsonp、script或者text。

其中，text和xml类型返回的数据不会经过处理。数据仅仅简单的将XMLHttpRequest的responseText或responseHTML属性传递给success回调函数，

'''注意'''，我们必须确保网页服务器报告的MIME类型与我们选择的dataType所匹配。比如说，XML的话，服务器端就必须声明 text/xml 或者 application/xml 来获得一致的结果。

如果指定为html类型，任何内嵌的JavaScript都会在HTML作为一个字符串返回之前执行。类似的，指定script类型的话，也会先执行服务器端生成JavaScript，然后再把脚本作为一个文本数据返回。

如果指定为json类型，则会把获取到的数据作为一个JavaScript对象来解析，并且把构建好的对象作为结果返回。为了实现这个目的，他首先尝试使用JSON.parse()。如果浏览器不支持，则使用一个函数来构建。JSON数据是一种能很方便通过JavaScript解析的结构化数据。如果获取的数据文件存放在远程服务器上（域名不同，也就是跨域获取数据），则需要使用jsonp类型。使用这种类型的话，会创建一个查询字符串参数 callback=? ，这个参数会加在请求的URL后面。服务器端应当在JSON数据前加上回调函数名，以便完成一个有效的JSONP请求。如果要指定回调函数的参数名来取代默认的callback，可以通过设置$.ajax()的jsonp参数。

'''注意'''，JSONP是JSON格式的扩展。他要求一些服务器端的代码来检测并处理查询字符串参数。更多信息可以参阅 &lt;a href="http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/"&gt;最初的文章&lt;/a&gt;。

如果指定了script或者jsonp类型，那么当从服务器接收到数据时，实际上是用了&amp;lt;script&amp;gt;标签而不是XMLHttpRequest对象。这种情况下，$.ajax()不再返回一个XMLHttpRequest对象，并且也不会传递事件处理函数，比如beforeSend。

'''发送数据到服务器'''

默认情况下，Ajax请求使用GET方法。如果要使用POST方法，可以设定type参数值。这个选项也会影响data选项中的内容如何发送到服务器。

data选项既可以包含一个查询字符串，比如 key1=value1&amp;amp;key2=value2 ，也可以是一个映射，比如 {key1: 'value1', key2: 'value2'} 。如果使用了后者的形式，则数据再发送器会被转换成查询字符串。这个处理过程也可以通过设置processData选项为false来回避。如果我们希望发送一个XML对象给服务器时，这种处理可能并不合适。并且在这种情况下，我们也应当改变contentType选项的值，用其他合适的MIME类型来取代默认的  application/x-www-form-urlencoded 。

'''高级选项'''

global选项用于阻止响应注册的回调函数，比如.ajaxSend，或者ajaxError，以及类似的方法。这在有些时候很有用，比如发送的请求非常频繁且简短的时候，就可以在ajaxSend里禁用这个。更多关于这些方法的详细信息，请参阅下面的内容。

如果服务器需要HTTP认证，可以使用用户名和密码可以通过username和password选项来设置。

Ajax请求是限时的，所以错误警告被捕获并处理后，可以用来提升用户体验。请求超时这个参数通常就保留其默认值，要不就通过jQuery.ajaxSetup来全局设定，很少为特定的请求重新设置timeout选项。

默认情况下，请求总会被发出去，但浏览器有可能从他的缓存中调取数据。要禁止使用缓存的结果，可以设置cache参数为false。如果希望判断数据自从上次请求后没有更改过就报告出错的话，可以设置ifModified为true。

scriptCharset允许给&amp;lt;script&amp;gt;标签的请求设定一个特定的字符集，用于script或者jsonp类似的数据。当脚本和页面字符集不同时，这特别好用。

Ajax的第一个字母是asynchronous的开头字母，这意味着所有的操作都是并行的，完成的顺序没有前后关系。$.ajax()的async参数总是设置成true，这标志着在请求开始后，其他代码依然能够执行。强烈不建议把这个选项设置成false，这意味着所有的请求都不再是异步的了，这也会导致浏览器被锁死。

$.ajax函数返回他创建的XMLHttpRequest对象。通常jQuery只在内部处理并创建这个对象，但用户也可以通过xhr选项来传递一个自己创建的xhr对象。返回的对象通常已经被丢弃了，但依然提供一个底层接口来观察和操控请求。比如说，调用对象上的.abort()可以在请求完成前挂起请求。
<p>The <code>$.ajax()</code> function underlies all Ajax requests sent by jQuery.  It is often unnecessary to directly call this function, as several higher-level alternatives like <code>
                  <a href="/jQuery.get">$.get()</a>
               </code> and <code>
                  <a href="/load">.load()</a>
               </code> are available and are easier to use. If less common options are required, though, <code>$.ajax()</code> can be used more flexibly.</p>
            <p>At its simplest, the <code>$.ajax()</code> function can be called with no arguments:</p>
            <pre>$.ajax();</pre>

            <p>
               <strong>Note:</strong> Default settings can be set globally by using the <code>
                  <a href="/jQuery.ajaxSetup">$.ajaxSetup()</a>
               </code> function.</p>

            <p>This example, using no options, loads the contents of the current page, but does nothing with the result. To use the result, we can implement one of the callback functions.</p>

            <h4 id="callback-functions">Callback Functions</h4>
            <p>The <code>beforeSend</code>, <code>error</code>, <code>dataFilter</code>, <code>success</code> and <code>complete</code> options all take callback functions that are invoked at the appropriate times:</p>
            <ol>
               <li>
                  <code>beforeSend</code> is called before the request is sent, and is passed the <code>XMLHttpRequest</code> object as a parameter.</li>
               <li>
                  <code>error</code> is called if the request fails. It is passed the <code>XMLHttpRequest</code> object, a string indicating the error type, and an exception object if applicable.</li>
               <li>
                  <code>dataFilter</code> is called on success. It is passed the returned data and the value of <code>dataType</code>, and must return the (possibly altered) data to pass on to <code>success</code>.</li>
               <li>
                  <code>success</code> is called if the request succeeds. It is passed the returned data, a string containing the success code, and the <code>XMLHttpRequest</code> object.</li>
               <li>
                  <code>complete</code> is called when the request finishes, whether in failure or success. It is passed the <code>XMLHttpRequest</code> object, as well as a string containing the success or error code.</li>
            </ol>
            <p>To make use of the returned HTML, we can implement a <code>success</code> handler:</p>
            <pre>$.ajax({
  url: 'ajax/test.html',
  success: function(data) {
    $('.result').html(data);
    alert('Load was performed.');
  }
});</pre>
	           <p>Such a simple example would generally be better served by using <code>
                  <a href="/load">.load()</a>
               </code> or <code>
                  <a href="/jQuery.get">$.get()</a>
               </code>.</p>
				
            <h4 id="data-types">Data Types</h4>
            <p>The <code>$.ajax()</code> function relies on the server to provide information about the retrieved data. If the server reports the return data as XML, the result can be traversed using normal XML methods or jQuery's selectors. If another type is detected, such as HTML in the example above, the data is treated as text.</p>
            <p>Different data handling can be achieved by using the <code>dataType</code> option. Besides plain <code>xml</code>, the <code>dataType</code> can be <code>html</code>, <code>json</code>, <code>jsonp</code>, <code>script</code>, or <code>text</code>.</p>
            <p>The <code>text</code> and <code>xml</code> types return the data with no processing. The data is simply passed on to the success handler, either through the <code>responseText</code> or <code>responseXML</code> property of the <code>XMLHttpRequest</code> object, respectively.</p>
            <p>
               <strong>Note:</strong> We must ensure that the MIME type reported by the web server matches our choice of <code>dataType</code>. In particular, XML must be declared by the server as <code>text/xml</code> or <code>application/xml</code> for consistent results.</p>
            <p>If <code>html</code> is specified, any embedded JavaScript inside the retrieved data is executed before the HTML is returned as a string. Similarly, <code>script</code> will execute the JavaScript that is pulled back from the server, then return the script itself as textual data.</p>
            <p>The <code>json</code> type parses the fetched data file as a JavaScript object and returns the constructed object as the result data. To do so, it uses <code>JSON.parse()</code> when the browser supports it; otherwise it uses a <code>Function</code> 
               <strong>constructor</strong>. Malformed JSON data will throw a parse error (see <a href="http://json.org/">json.org</a> for more information). JSON data is convenient for communicating structured data in a way that is concise and easy for JavaScript to parse. If the fetched data file exists on a remote server, specify the <code>jsonp</code> type instead.</p>
            <p>The <code>jsonp</code> type appends a query string parameter of <code>callback=?</code> to the URL. The server should prepend the JSON data with the callback name to form a valid JSONP response. We can specify a parameter name other than <code>callback</code> with the <code>jsonp</code> option to <code>$.ajax()</code>.</p>
            <p>
               <strong>Note:</strong> JSONP is an extension of the JSON format, requiring some server-side code to detect and handle the query string parameter. More information about it can be found in the <a href="http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/">original post detailing its use</a>.</p>
            <p>When data is retrieved from remote servers (which is only possible using the <code>script</code> or <code>jsonp</code> data types), the operation is performed using a <code>&lt;script&gt;</code> tag rather than an <code>XMLHttpRequest</code> object. In this case, no <code>XMLHttpRequest</code> object is returned from <code>$.ajax()</code>, nor is one passed to the handler functions such as <code>beforeSend</code>.</p>
				
					       <h4 id="sending-data-to-server">Sending Data to the Server</h4>
					       <p>By default, Ajax requests are sent using the GET HTTP method. If the POST method is required, the method can be specified by setting a value for the <code>type</code> option. This option affects how the contents of the <code>data</code> option are sent to the server. POST data will always be transmitted to the server using UTF-8 charset, per the W3C XMLHTTPRequest standard.</p>
					       <p>The <code>data</code> option can contain either a query string of the form <code>key1=value1&amp;key2=value2</code>, or a map of the form <code>{key1: 'value1', key2: 'value2'}</code>. If the latter form is used, the data is converted into a query string before it is sent. This processing can be circumvented by setting <code>processData</code> to <code>false</code>.  The processing might be undesirable if we wish to send an XML object to the server; in this case, we would also want to change the <code>contentType</code> option from <code>application/x-www-form-urlencoded</code> to a more appropriate MIME type.</p>
				
					       <h4 id="advanced-options">Advanced Options</h4>
					       <p>The <code>global</code> option prevents handlers registered using <code>
                  <a href="/ajaxSend">.ajaxSend()</a>
               </code>, <code>
                  <a href="/ajaxError">.ajaxError()</a>
               </code>, and similar methods from firing when this request would trigger them. This can be useful to, for example, suppress a loading indicator that was implemented with <code>
                  <a href="/jQuery.ajaxSend">.ajaxSend()</a>
               </code> if the requests are frequent and brief. See the descriptions of these methods below for more details.</p>
					       <p>If the server performs HTTP authentication before providing a response, the user name and password pair can be sent via the <code>username</code> and <code>password</code> options.</p>
					       <p>Ajax requests are time-limited, so errors can be caught and handled to provide a better user experience. Request timeouts are usually either left at their default or set as a global default using <code>
                  <a href="/jQuery.ajaxSetup">$.ajaxSetup()</a>
               </code> rather than being overridden for specific requests with the <code>timeout</code> option.</p>
					       <p>By default, requests are always issued, but the browser may serve results out of its cache. To disallow use of the cached results, set <code>cache</code> to <code>false</code>. To cause the request to report failure if the asset has not been modified since the last request, set <code>ifModified</code> to <code>true</code>.</p>
					       <p>The <code>scriptCharset</code> allows the character set to be explicitly specified for requests that use a <code>&lt;script&gt;</code> tag (that is, a type of <code>script</code> or <code>jsonp</code>). This is useful if the script and host page have differing character sets.</p>
					       <p>The first letter in Ajax stands for "asynchronous," meaning that the operation occurs in parallel and the order of completion is not guaranteed. The <code>async</code> option to <code>$.ajax()</code> defaults to <code>true</code>, indicating that code execution can continue after the request is made. Setting this option to <code>false</code> (and thus making the call no longer asynchronous) is strongly discouraged, as it can cause the browser to become unresponsive.</p>
					
					       <p>The <code>$.ajax()</code> function returns the <code>XMLHttpRequest</code> object that it creates. Normally jQuery handles the creation of this object internally, but a custom function for manufacturing one can be specified using the <code>xhr</code> option. The returned object can generally be discarded, but does provide a lower-level interface for observing and manipulating the request. In particular, calling <code>.abort()</code> on the object will halt the request before it completes.</p>
         </longdesc>
         <example>
            <desc>Load and execute a JavaScript file.</desc>
         </example>
         <example>
            <desc>Save some data to the server and notify the user once it's complete.</desc>
         </example>
         <example>
            <desc>Retrieve the latest version of an HTML page.</desc>
         </example>
         <example>
            <desc>Loads data synchronously. Blocks the browser while the requests is active.
It is better to block user interaction by other means when synchronization is
necessary.</desc>
         </example>
         <example>
            <desc>Sends an xml document as data to the server. By setting the processData
option to false, the automatic conversion of data to strings is prevented.</desc>
         </example>
         <example>
            <desc>Sends an id as data to the server, save some data to the server and notify the user once it's complete.  <strong>Note that this usage - returning the result of the call into a variable - requires a synchronous (blocking) request! <em>(async:false)</em>
               </strong>
            </desc>
         </example>
      </entry>
      <entry type="property" name="length">
         <desc>jQuery 对象中元素的个数。The number of elements in the jQuery object.</desc>
         <signature/>
         <longdesc>当前匹配的元素个数。 &lt;span title="Core/size"&gt;size&lt;/span&gt; 将返回相同的值。<p>The number of elements currently matched. The .<a href="/size">size()</a> method will return the same value.</p>
         </longdesc>
         <example>
            <desc>Count the divs.  Click to add more.</desc>
         </example>
      </entry>
      <entry type="method" name="children">
         <desc>取得一个包含匹配的元素集合中每一个元素的所有子元素的元素集合。Get the children of each element in the set of matched elements, optionally filtered by a selector.</desc>
         <signature>
            <argument name="selector">
               <desc>A string containing a selector expression to match elements against.</desc>
            </argument>
         </signature>
         <longdesc>可以通过可选的表达式来过滤所匹配的子元素。注意：parents()将查找所有祖辈元素，而children()只考虑子元素而不考虑所有后代元素。<p>Given a jQuery object that represents a set of DOM elements, the <code>.children()</code> method allows us to search through the immediate children of these elements in the DOM tree and construct a new jQuery object from the matching elements. The <code>.find()</code> and <code>.children()</code> methods are similar, except that the latter only travels a single level down the DOM tree.</p>
            <p>The method optionally accepts a selector expression of the same type that we can pass to the <code>$()</code> function. If the selector is supplied, the elements will be filtered by testing whether they match it.</p>
            <p>Consider a page with a basic nested list on it:</p>
            <pre>
&lt;ul class="level-1"&gt;
  &lt;li class="item-i"&gt;I&lt;/li&gt;
  &lt;li class="item-ii"&gt;II
    &lt;ul class="level-2"&gt;
      &lt;li class="item-a"&gt;A&lt;/li&gt;
      &lt;li class="item-b"&gt;B
        &lt;ul class="level-3"&gt;
          &lt;li class="item-1"&gt;1&lt;/li&gt;
          &lt;li class="item-2"&gt;2&lt;/li&gt;
          &lt;li class="item-3"&gt;3&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li class="item-c"&gt;C&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li class="item-iii"&gt;III&lt;/li&gt;
&lt;/ul&gt;
</pre>
            <p>If we begin at the level-2 list, we can find its children:</p>
            <pre>$('ul.level-2').children().css('background-color', 'red');</pre>
            <p>The result of this call is a red background behind items A, B, and C. Since we do not supply a selector expression, all of the children are part of the returned jQuery object. If we had supplied one, only the matching items among these three would be included.</p>
         </longdesc>
         <example>
            <desc>Find all children of the clicked element.</desc>
         </example>
         <example>
            <desc>Find all children of each div.</desc>
         </example>
         <example>
            <desc>Find all children with a class "selected" of each div.</desc>
         </example>
      </entry>
      <entry type="property" name="selector">
         <desc>jQuery 1.3新增。返回传给jQuery()的原始选择器。A selector representing selector originally passed to jQuery().</desc>
         <signature/>
         <longdesc>换句话说，就是返回你用什么选择器来找到这个元素的。可以与&lt;span title="Core/context"&gt;context&lt;/span&gt;一起使用，用于精确检测选择器查询情况。这两个属性对插件开发人员很有用。<p>Should be used in conjunction with context to determine the exact query used.</p>
            <p>The <code>.live()</code> method for binding event handlers uses this property to determine how to perform its searches. Plug-ins which perform similar tasks may also find the property useful. This property contains a string representing the matched set of elements, but if DOM traversal methods have been called on the object, the string may not be a valid jQuery selector expression. For this reason, the value of <code>.selector</code> is generally most useful immediately following the original creation of the object. Consequently, the <code>.live()</code> method should only be used in this scenario. </p>
         </longdesc>
         <example>
            <desc>Determine the selector used.</desc>
         </example>
         <example>
            <desc>Collecting elements differently</desc>
         </example>
      </entry>
      <entry type="method" name="add">
         <desc>把与表达式匹配的元素添加到jQuery对象中。这个函数可以用于连接分别与两个表达式匹配的元素结果集。Add elements to the set of matched elements.</desc>
         <signature>
            <argument name="selector">
               <desc>A string containing a selector expression to match additional elements against.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="elements">
               <desc>one or more elements to add to the set of matched elements.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="html">
               <desc>An HTML fragment to add to the set of matched elements.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="selector">
               <desc>A string containing a selector expression to match additional elements against.</desc>
            </argument>
            <argument name="context">
               <desc>Add some elements rooted against the specified context.</desc>
            </argument>
         </signature>
         <longdesc>jQuery 1.4 中， .add()方法返回的结果将始终以元素在HTML文档中出现的顺序来排序，而不再是简单的添加。<p>Given a jQuery object that represents a set of DOM elements, the <code>.add()</code> method constructs a new jQuery object from the union of those elements and the ones passed into the method. The argument to <code>.add()</code> can be pretty much anything that  <code>$()</code> accepts, including a jQuery selector expression, references to DOM elements, or an HTML snippet.</p>
            <p>Consider a page with a simple list and a paragraph following it:</p>
            <pre>&lt;ul&gt;
  &lt;li&gt;list item 1&lt;/li&gt;
  &lt;li&gt;list item 2&lt;/li&gt;
  &lt;li&gt;list item 3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;a paragraph&lt;/p&gt;</pre>
            <p>We can select the list items and then the paragraph by using either a selector or a reference to the DOM element itself as the <code>.add()</code> method's argument:</p>
            <pre>$('li').add('p').css('background-color', 'red');</pre>
            <p>Or:</p>
            <pre>$('li').add(document.getElementsByTagName('p')[0])
  .css('background-color', 'red');</pre>
            <p>The result of this call is a red background behind all four elements.
Using an HTML snippet as the <code>.add()</code> method's argument (as in the third version), we can create additional elements on the fly and add those elements to the matched set of elements. Let's say, for example, that we want to alter the background of the list items along with a newly created paragraph:</p>
            <pre>$('li').add('&lt;p id="new"&gt;new paragraph&lt;/p&gt;')
  .css('background-color', 'red');</pre>
            <p>Although the new paragraph has been created and its background color changed, it still does not appear on the page. To place it on the page, we could add one of the insertion methods to the chain.</p>
            <p>As of jQuery 1.4 the results from .add() will always be returned in document order (rather than a simple concatenation).</p>
         </longdesc>
         <example>
            <desc>Finds all divs and makes a border.  Then adds all paragraphs to the jQuery object to set their backgrounds yellow.</desc>
         </example>
         <example>
            <desc>Adds more elements, matched by the given expression, to the set of matched elements.</desc>
         </example>
         <example>
            <desc>Adds more elements, created on the fly, to the set of matched elements.</desc>
         </example>
         <example>
            <desc>Adds one or more Elements to the set of matched elements.</desc>
         </example>
         <example>
            <desc>Demonstrates how to add (or push) elements to an existing collection</desc>
         </example>
      </entry>
      <entry type="property" name="context">
         <desc>jQuery 1.3新增。返回传给jQuery()的原始的DOM节点内容，即jQuery()的第二个参数。如果没有指定，那么context指向当前的文档(document)。The DOM node context originally passed to jQuery(); if none was passed then context will likely be the document.</desc>
         <signature/>
         <longdesc>可以与&lt;span title="Core/selector"&gt;selector&lt;/span&gt;一起使用，用于精确检测选择器查询情况。这两个属性对插件开发人员很有用。<p>The <code>.live()</code> method for binding event handlers uses this property to determine the root element to use for its event delegation needs. Plug-ins which perform similar tasks may also find the property useful.</p>
            <p>
The value of this property is typically equal to document, as this is the default context for jQuery objects if none is supplied. The context may differ if, for example, the object was created by searching within an <code>&lt;iframe&gt;</code> or XML document.</p>
         </longdesc>
         <example>
            <desc>Determine the exact context used.</desc>
         </example>
      </entry>
      <entry type="method" name="not">
         <desc>删除与指定表达式匹配的元素Remove elements from the set of matched elements.</desc>
         <signature>
            <argument name="selector">
               <desc>A string containing a selector expression to match elements against.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="elements">
               <desc>One or more DOM elements to remove from the matched set.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="function(index)">
               <desc>A function used as a test for each element in the set. <code>this</code> is the current DOM element.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>Given a jQuery object that represents a set of DOM elements, the <code>.not()</code> method constructs a new jQuery object from a subset of the matching elements. The supplied selector is tested against each element; the elements that don't match the selector will be included in the result.</p>
            <p>Consider a page with a simple list on it:</p>
            <pre>
&lt;ul&gt;
  &lt;li&gt;list item 1&lt;/li&gt;
  &lt;li&gt;list item 2&lt;/li&gt;
  &lt;li&gt;list item 3&lt;/li&gt;
  &lt;li&gt;list item 4&lt;/li&gt;
  &lt;li&gt;list item 5&lt;/li&gt;
&lt;/ul&gt;
</pre>
            <p>We can apply this method to the set of list items:</p>
            <pre>$('li').not(':even').css('background-color', 'red');</pre>
            <p>The result of this call is a red background for items 2 and 4, as they do not match the selector (recall that :even and :odd use 0-based indexing).</p>
            <h4>Removing Specific Elements</h4>
            <p>The second version of the <code>.not()</code> method allows us to remove elements from the matched set, assuming we have found those elements previously by some other means. For example, suppose our list had an id applied to one of its items:</p>
            <pre>
&lt;ul&gt;
  &lt;li&gt;list item 1&lt;/li&gt;
  &lt;li&gt;list item 2&lt;/li&gt;
  &lt;li id="notli"&gt;list item 3&lt;/li&gt;
  &lt;li&gt;list item 4&lt;/li&gt;
  &lt;li&gt;list item 5&lt;/li&gt;
&lt;/ul&gt;
</pre>
            <p>We can fetch the third list item using the native JavaScript <code>getElementById()</code> function, then remove it from a jQuery object:</p>
            <pre>
$('li').not(document.getElementById('notli'))
  .css('background-color', 'red');
</pre>
            <p>This statement changes the color of items 1, 2, 4, and 5. We could have accomplished the same thing with a simpler jQuery expression, but this technique can be useful when, for example, other libraries provide references to plain DOM nodes.</p>
            <p>As of jQuery 1.4, the <code>.not()</code> method can take a function as its argument in the same way that <code>.filter()</code> does. Elements for which the function returns <code>true</code> are excluded from the filtered set; all other elements are included.</p>
         </longdesc>
         <example>
            <desc>Adds a border to divs that are not green or blue.</desc>
         </example>
         <example>
            <desc>Removes the element with the ID "selected" from the set of all paragraphs.</desc>
         </example>
         <example>
            <desc>Removes the element with the ID "selected" from the set of all paragraphs.</desc>
         </example>
         <example>
            <desc>Removes all elements that match "div p.selected" from the total set of all paragraphs.</desc>
         </example>
      </entry>
      <entry type="method" name="outerWidth">
         <desc>获取第一个匹配元素外部宽度（默认包括补白和边框）。Get the current computed width for the first element in the set of matched elements, including padding and border.</desc>
         <signature>
            <argument name="includeMargin">
               <desc>A Boolean indicating whether to include the element's margin in the calculation.</desc>
            </argument>
         </signature>
         <longdesc>此方法对可见和隐藏元素均有效。<p>Returns the width of the element, along with left and right padding, border, and optionally margin, in pixels.</p>
				        <p>If <code>includeMargin</code> is omitted or <code>false</code>, the padding and border are included in the calculation; if <code>true</code>, the margin is also included.</p>
				        <p>This method is not applicable to <code>window</code> and <code>document</code> objects; for these, use <code>
                  <a href="/width">.width()</a>
               </code> instead.</p>
				        <p class="image">
               <img src="/images/0042_04_06.png"/>
            </p>
         </longdesc>
         <example>
            <desc>Get the outerWidth of a paragraph.</desc>
         </example>
      </entry>
      <entry type="method" name="outerHeight">
         <desc>获取第一个匹配元素外部高度（默认包括补白和边框）。Get the current computed height for the first element in the set of matched elements, including padding, border, and optionally margin.</desc>
         <signature>
            <argument name="includeMargin">
               <desc>A Boolean indicating whether to include the element's margin in the calculation.</desc>
            </argument>
         </signature>
         <longdesc>此方法对可见和隐藏元素均有效。<p>The top and bottom padding and border are always included in the <code>.outerHeight()</code> calculation; if the <code>includeMargin</code> argument is set to <code>true</code>, the margin (top and bottom) is also included.</p>
				        <p>This method is not applicable to <code>window</code> and <code>document</code> objects; for these, use <code>
                  <a href="/height">.height()</a>
               </code> instead.</p>
				        <p class="image">
               <img src="/images/0042_04_03.png"/>
            </p>
         </longdesc>
         <example>
            <desc>Get the outerHeight of a paragraph.</desc>
         </example>
      </entry>
      <entry type="method" name="toggle">
         <desc>每次点击后依次调用函数。 切换元素的可见状态。 根据switch参数切换元素的可见状态（ture为可见，false为隐藏）。 以优雅的动画切换所有匹配的元素，并在显示完成后可选地触发一个回调函数。Bind two or more handlers to the matched elements, to be executed on alternate clicks.</desc>
         <signature>
            <argument name="handler(eventObject)">
               <desc>A function to execute every even time the element is clicked.</desc>
            </argument>
            <argument name="handler(eventObject)">
               <desc>A function to execute every odd time the element is clicked.</desc>
            </argument>
            <argument name="handler(eventObject)">
               <desc>Additional handlers to cycle through after clicks.</desc>
            </argument>
         </signature>
         <longdesc>如果点击了一个匹配的元素，则触发指定的第一个函数，当再次点击同一元素时，则触发指定的第二个函数，如果有更多函数，则再次触发，直到最后一个。随后的每次点击都重复对这几个函数的轮番调用。

可以使用unbind("click")来删除。如果元素是可见的，切换为隐藏的；如果元素是隐藏的，切换为可见的。如果switch设为true，则调用show()方法来显示匹配的元素，如果switch设为false则调用hide()来隐藏元素。可以根据指定的速度动态地改变每个匹配元素的高度、宽度和不透明度。在jQuery 1.3中，padding和margin也会有动画，效果更流畅。
<p>The <code>.toggle()</code> method binds a handler for the <code>click</code> event, so the rules outlined for the triggering of <code>click</code> apply here as well.</p>
            <pre>For example, consider the HTML:
&lt;div id="target"&gt;
  Click here
&lt;/div&gt;</pre>
 
            <p class="image">
               <img src="/images/0042_05_05.png" alt=""/>
            </p>
            <p>Event handlers can then be bound to the <code>&lt;div&gt;</code>:</p>
            <pre>$('#target').toggle(function() {
  alert('First handler for .toggle() called.');
}, function() {
  alert('Second handler for .toggle() called.');
});</pre>
            <p>As the element is clicked repeatedly, the messages alternate:</p>
            <p>
               <span class="output">First handler for .toggle() called.</span>
               <br/>
               <span class="output">Second handler for .toggle() called.</span>
               <br/>
               <span class="output">First handler for .toggle() called.</span>
               <br/>
               <span class="output">Second handler for .toggle() called.</span>
               <br/>
               <span class="output">First handler for .toggle() called.</span>
            </p>
            <p>If more than two handlers are provided, <code>.toggle()</code> will cycle among all of them. For example, if there are three handlers, then the first handler will be called on the first click, the fourth click, the seventh click, and so on.</p>
            <p>The <code>.toggle()</code> method is provided for convenience. It is relatively straightforward to implement the same behavior by hand, and this can be necessary if the assumptions built into <code>.toggle()</code> prove limiting. For example, <code>.toggle()</code> is not guaranteed to work correctly if applied twice to the same element. Since <code>.toggle()</code> internally uses a <code>click</code> handler to do its work, we must unbind <code>click</code> to remove a behavior attached with <code>.toggle()</code>, so other <code>click</code> handlers can be caught in the crossfire. The implementation also calls <code>.preventDefault()</code> on the event, so links will not be followed and buttons will not be clicked if <code>.toggle()</code> has been called on the element.</p>
         </longdesc>
         <example>
            <desc>Click to toggle highlight on the list item.</desc>
         </example>
         <example>
            <desc>To toggle a style on table cells:</desc>
         </example>
      </entry>
      <entry type="method" name="toggle">
         <desc>每次点击后依次调用函数。 切换元素的可见状态。 根据switch参数切换元素的可见状态（ture为可见，false为隐藏）。 以优雅的动画切换所有匹配的元素，并在显示完成后可选地触发一个回调函数。Display or hide the matched elements.</desc>
         <signature>
            <argument name="duration">
               <desc>A string or number determining how long the animation will run.</desc>
            </argument>
            <argument name="callback">
               <desc>A function to call once the animation is complete.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="showOrHide">
               <desc>A Boolean indicating whether to show or hide the elements.</desc>
            </argument>
         </signature>
         <longdesc>如果点击了一个匹配的元素，则触发指定的第一个函数，当再次点击同一元素时，则触发指定的第二个函数，如果有更多函数，则再次触发，直到最后一个。随后的每次点击都重复对这几个函数的轮番调用。

可以使用unbind("click")来删除。如果元素是可见的，切换为隐藏的；如果元素是隐藏的，切换为可见的。如果switch设为true，则调用show()方法来显示匹配的元素，如果switch设为false则调用hide()来隐藏元素。可以根据指定的速度动态地改变每个匹配元素的高度、宽度和不透明度。在jQuery 1.3中，padding和margin也会有动画，效果更流畅。
  &lt;p&gt;With no parameters, the &lt;code&gt;.toggle()&lt;/code&gt; method simply toggles the visibility of elements:&lt;/p&gt;
&lt;pre&gt;$('.target').toggle();
&lt;/pre&gt;
&lt;p&gt;The matched elements will be revealed or hidden immediately, with no animation, by changing the CSS &lt;code&gt;display&lt;/code&gt; property. If the element is initially displayed, it will be hidden; if hidden, it will be shown. The &lt;code&gt;display&lt;/code&gt; property is saved and restored as needed. If an element has a &lt;code&gt;display&lt;/code&gt; value of &lt;code&gt;inline&lt;/code&gt;, then is hidden and shown, it will once again be displayed &lt;code&gt;inline&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When a duration is provided, &lt;code&gt;.toggle()&lt;/code&gt; becomes an animation method. The &lt;code&gt;.toggle()&lt;/code&gt; method animates the width, height, and opacity of the matched elements simultaneously. When these properties reach 0 after a hiding animation, the &lt;code&gt;display&lt;/code&gt; style property is set to &lt;code&gt;none&lt;/code&gt; to ensure that the element no longer affects the layout of the page.&lt;/p&gt;
&lt;p&gt;Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings &lt;code&gt;'fast'&lt;/code&gt; and &lt;code&gt;'slow'&lt;/code&gt; can be supplied to indicate durations of &lt;code&gt;200&lt;/code&gt; and &lt;code&gt;600&lt;/code&gt; milliseconds, respectively.&lt;/p&gt;
&lt;p&gt;If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but &lt;code&gt;this&lt;/code&gt; is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.&lt;/p&gt;
&lt;p&gt;We can animate any element, such as a simple image:&lt;/p&gt;
&lt;pre&gt;&amp;lt;div id="clickme"&amp;gt;
  Click here
&amp;lt;/div&amp;gt;
&amp;lt;img id="book" src="book.png" alt="" width="100" height="123" /&amp;gt;
&lt;/pre&gt;
&lt;p&gt;We will cause &lt;code&gt;.toggle()&lt;/code&gt; to be called when another element is clicked:&lt;/p&gt;
&lt;pre&gt;$('#clickme').click(function() {
  $('#book').toggle('slow', function() {
    // Animation complete.
  });
});
&lt;/pre&gt;
&lt;p&gt;With the element initially shown, we can hide it slowly with the first click:
&lt;/p&gt;
&lt;p class="image"&gt; 
&lt;img src="0042_06_09.png" alt="" /&gt;
&lt;img src="0042_06_10.png" alt="" /&gt;
&lt;img src="0042_06_11.png" alt="" /&gt;
&lt;img src="0042_06_12.png" alt="" /&gt;
&lt;/p&gt;
&lt;p&gt;A second click will show the element once again:&lt;/p&gt;
&lt;p class="image"&gt;&lt;img src="0042_06_13.png" alt="" /&gt;
&lt;img src="0042_06_14.png" alt="" /&gt;
&lt;img src="0042_06_15.png" alt="" /&gt;
&lt;img src="0042_06_16.png" alt="" /&gt;
&lt;/p&gt;
&lt;p&gt;The second version of the method accepts a Boolean parameter. If this parameter is &lt;code&gt;true&lt;/code&gt;, then the matched elements are shown; if &lt;code&gt;false&lt;/code&gt;, the elements are hidden. In essence, the statement:
&lt;/p&gt;
&lt;pre&gt;$('#foo').toggle(showOrHide);
is equivalent to:
if (showOrHide) {
  $('#foo').show();
}
else {
  $('#foo').hide();
}
&lt;/pre&gt;

</longdesc>
         <example>
            <desc>Toggles all paragraphs.</desc>
         </example>
         <example>
            <desc>Animates all paragraphs to be shown if they are hidden and hidden if they are visible, completing the animation within 600 milliseconds.</desc>
         </example>
         <example>
            <desc>Shows all paragraphs, then hides them all, back and forth.</desc>
         </example>
      </entry>
      <entry type="method" name="innerWidth">
         <desc>获取第一个匹配元素内部区域宽度（包括补白、不包括边框）。Get the current computed width for the first element in the set of matched elements, including padding but not border.</desc>
         <signature/>
         <longdesc>此方法对可见和隐藏元素均有效。<p>This method returns the width of the element, including left and right padding, in pixels.</p>
            <p>This method is not applicable to <code>window</code> and <code>document</code> objects; for these, use <code>
                  <a href="/width">.width()</a>
               </code> instead.</p>
            <p class="image">
               <img src="/images/0042_04_05.png"/>
            </p>
         </longdesc>
         <example>
            <desc>Get the innerWidth of a paragraph.</desc>
         </example>
      </entry>
      <entry type="method" name="innerHeight">
         <desc>获取第一个匹配元素内部区域高度（包括补白、不包括边框）。Get the current computed height for the first element in the set of matched elements, including padding but not border.</desc>
         <signature/>
         <longdesc>此方法对可见和隐藏元素均有效。<p>This method returns the height of the element, including top and bottom padding, in pixels.</p>
            <p>This method is not applicable to <code>window</code> and <code>document</code> objects; for these, use <code>
                  <a href="/height">.height()</a>
               </code> instead.</p>
            <p class="image">
               <img src="/images/0042_04_02.png"/>
            </p>
         </longdesc>
         <example>
            <desc>Get the innerHeight of a paragraph.</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery.param">
         <desc>将表单元素数组或者对象序列化。是.serialize()的核心方法。Create a serialized representation of an array or object, suitable for use in a URL query string or Ajax request. </desc>
         <signature>
            <argument name="obj">
               <desc>An array or object to serialize.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="obj">
               <desc>An array or object to serialize.</desc>
            </argument>
            <argument name="traditional">
               <desc>A Boolean indicating whether to perform a traditional "shallow" serialization.</desc>
            </argument>
         </signature>
         <longdesc>在jQuery 1.3中，如果传递的参数是一个函数，那么用.param()会得到这个函数的返回值，而不是把这个函数作为一个字符串来返回。
		
		在jQuery 1.4中，.param()会深度递归一个对象来满足现在脚本语言和框架，比如PHP， Ruby on Rails等。你可以通过jQuery.ajaxSettings.traditional = true; 来全局得禁用这个功能。
		
		注意：因为有些框架在解析序列化数字的时候能力有限，所以当传递一些含有嵌套对象、数组的对象作为参数时，请务必小心！
		
		在jQuery 1.4中，HTML5的input元素也会被序列化。
    <p>This function is used internally to convert form element values into a serialized string representation (See <a href="/serialize/">.serialize()</a> for more information).</p>

            <p>As of jQuery 1.3, the return value of a function is used instead of the function as a String.</p>

            <p>As of jQuery 1.4, the <code>$.param()</code> method serializes deep objects recursively to accommodate modern scripting languages and frameworks such as PHP and Ruby on Rails. You can disable this functionality globally by setting <code>jQuery.ajaxSettings.traditional = true;</code>.</p>
            <p>If the object passed is in an Array, it must be an array of objects in the format returned by <a href="/serializeArray/">.serializeArray()</a>
            </p> 
            <pre>[{name:"first",value:"Rick"},
{name:"last",value:"Astley"},
{name:"job",value:"Rock Star"}]</pre>
            <p>Note: Because some frameworks have limited ability to parse serialized arrays, we should exercise caution when passing an <code>obj</code> argument that contains objects or arrays nested within another array.</p>
            <p>In jQuery 1.4 HTML5 input elements are serialized, as well.</p>
            <p>We can display a query string representation of an object and a URI-decoded version of the same as follows:</p>
            <pre>var myObject = {
  a: {
    one: 1, 
    two: 2, 
    three: 3
  }, 
  b: [1,2,3]
};
var recursiveEncoded = $.param(myObject);
var recursiveDecoded = decodeURIComponent($.param(myObject));

alert(recursiveEncoded);
alert(recursiveDecoded);
</pre>
            <p>The values of <code>recursiveEncoded</code> and <code>recursiveDecoded</code> are alerted as follows:</p>
            <p>
               <span class="output">a%5Bone%5D=1&amp;a%5Btwo%5D=2&amp;a%5Bthree%5D=3&amp;b%5B%5D=1&amp;b%5B%5D=2&amp;b%5B%5D=3</span>
               <br/>
               <span class="output">a[one]=1&amp;a[two]=2&amp;a[three]=3&amp;b[]=1&amp;b[]=2&amp;b[]=3</span>
            </p>
            <p>To emulate the behavior of <code>$.param()</code> prior to jQuery 1.4, we can set the <code>traditional</code> argument to <code>true</code>:</p>
            <pre>var myObject = {
  a: {
    one: 1, 
    two: 2, 
    three: 3
  }, 
  b: [1,2,3]
};
var shallowEncoded = $.param(myObject, true);
var shallowDecoded = decodeURIComponent(shallowEncoded);

alert(shallowEncoded);
alert(shallowDecoded);
</pre>
            <p>The values of <code>shallowEncoded</code> and <code>shallowDecoded</code> are alerted as follows:</p>
            <p>
               <span class="output">a=%5Bobject+Object%5D&amp;b=1&amp;b=2&amp;b=3</span>
               <br/>
               <span class="output">a=[object+Object]&amp;b=1&amp;b=2&amp;b=3</span>
            </p>
         </longdesc>
         <example>
            <desc>Serialize a key/value object.</desc>
         </example>
         <example>
            <desc>Serialize a few complex objects</desc>
         </example>
      </entry>
      <entry type="method" name="hide">
         <desc>隐藏显示的元素 以优雅的动画隐藏所有匹配的元素，并在显示完成后可选地触发一个回调函数。Hide the matched elements.</desc>
         <signature/>
         <signature>
            <argument name="duration">
               <desc>A string or number determining how long the animation will run.</desc>
            </argument>
            <argument name="callback">
               <desc>A function to call once the animation is complete.</desc>
            </argument>
         </signature>
         <longdesc>这个就是 'hide( speed, [callback] )' 的无动画版。如果选择的元素是隐藏的，这个方法将不会改变任何东西。可以根据指定的速度动态地改变每个匹配元素的高度、宽度和不透明度。在jQuery 1.3中，padding和margin也会有动画，效果更流畅。
<p>With no parameters, the <code>.hide()</code> method is the simplest way to hide an element:</p>
            <pre>$('.target').hide();
</pre>
            <p>The matched elements will be hidden immediately, with no animation. This is roughly equivalent to calling <code>.css('display', 'none')</code>, except that the value of the <code>display</code> property is saved in jQuery's data cache so that <code>display</code> can later be restored to its initial value. If an element has a <code>display</code> value of <code>inline</code>, then is hidden and shown, it will once again be displayed <code>inline</code>.</p>
            <p>When a duration is provided, <code>.hide()</code> becomes an animation method. The <code>.hide()</code> method animates the width, height, and opacity of the matched elements simultaneously. When these properties reach 0, the <code>display</code> style property is set to <code>none</code> to ensure that the element no longer affects the layout of the page.</p>
            <p>Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings <code>'fast'</code> and <code>'slow'</code> can be supplied to indicate durations of <code>200</code> and <code>600</code> milliseconds, respectively.</p>
            <p>If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but <code>this</code> is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.</p>
            <p>We can animate any element, such as a simple image:</p>
            <pre>&lt;div id="clickme"&gt;
  Click here
&lt;/div&gt;
&lt;img id="book" src="book.png" alt="" width="100" height="123" /&gt;
With the element initially shown, we can hide it slowly:
$('#clickme').click(function() {
  $('#book').hide('slow', function() {
    alert('Animation complete.');
  });
});</pre>

            <p class="image four-across"> 
               <img src="/images/0042_06_05.png" alt=""/> 
               <img src="/images/0042_06_06.png" alt=""/>
               <img src="/images/0042_06_07.png" alt=""/>
               <img src="/images/0042_06_08.png" alt=""/>
            </p>

         </longdesc>
         <example>
            <desc>Hides all paragraphs then the link on click.</desc>
         </example>
         <example>
            <desc>Animates all shown paragraphs to hide slowly, completing the animation within 600 milliseconds.</desc>
         </example>
         <example>
            <desc>Animates all spans (words in this case) to hide fastly, completing each animation within 200 milliseconds. Once each animation is done, it starts the next one.</desc>
         </example>
         <example>
            <desc>Hides the divs when clicked over 2 seconds, then removes the div element when its hidden.  Try clicking on more than one box at a time.</desc>
         </example>
      </entry>
      <entry type="method" name="width">
         <desc>取得第一个匹配元素当前计算的宽度值（px）。 为每个匹配的元素设置CSS宽度(width)属性的值。Get the current computed width for the first element in the set of matched elements.</desc>
         <signature/>
         <longdesc>在 jQuery 1.2 以后可以用来获取 window 和 document 的宽如果没有明确指定单位（如：em或%），使用px。<p>The difference between <code>.css(width)</code> and <code>.width()</code> is that the latter returns a unit-less pixel value (for example, <code>400</code>) while the former returns a value with units intact (for example, <code>400px</code>). The <code>.width()</code> method is recommended when an element's width needs to be used in a mathematical calculation.</p>
            <p class="image">
               <img src="/images/0042_04_04.png"/>
            </p>
            <p>This method is also able to find the width of the window and document.</p>

            <pre>$(window).width();   // returns width of browser viewport
$(document).width(); // returns width of HTML document</pre>
         </longdesc>
         <example>
            <desc>Show various widths.  Note the values are from the iframe so might be smaller than you expected.  The yellow highlight shows the iframe body.</desc>
         </example>
      </entry>
      <entry type="method" name="width">
         <desc>取得第一个匹配元素当前计算的宽度值（px）。 为每个匹配的元素设置CSS宽度(width)属性的值。Set the CSS width of each element in the set of matched elements.</desc>
         <signature>
            <argument name="value">
               <desc>An integer representing the number of pixels, or an integer along with an optional unit of measure appended (as a string).</desc>
            </argument>
         </signature>
         <signature>
            <argument name="function(index, width)">
               <desc>A function returning the width to set. Receives the index position of the element in the set and the old width as arguments.</desc>
            </argument>
         </signature>
         <longdesc>在 jQuery 1.2 以后可以用来获取 window 和 document 的宽如果没有明确指定单位（如：em或%），使用px。<p>When calling <code>.width('value')</code>, the value can be either a string (number and unit) or a number. If only a number is provided for the value, jQuery assumes a pixel unit. If a string is provided, however, any valid CSS measurement may be used for the width (such as <code>100px</code>, <code>50%</code>, or <code>auto</code>). Note that in modern browsers, the CSS width property does not include padding, border, or margin.</p>

            <p>If no explicit unit was specified (like 'em' or '%') then "px" is concatenated to the value.</p>
         </longdesc>
         <example>
            <desc>To set the width of each div on click to 30px plus a color change.</desc>
         </example>
      </entry>
      <entry type="method" name="height">
         <desc>取得第一个匹配元素当前计算的高度值（px）。 为每个匹配的元素设置CSS高度(hidth)属性的值。如果没有明确指定单位（如：em或%），使用px。Get the current computed height for the first element in the set of matched elements.</desc>
         <signature/>
         <longdesc>在 jQuery 1.2 以后可以用来获取 window 和 document 的高如果没有明确指定单位（如：em或%），使用px。<p>The difference between <code>.css('height')</code> and <code>.height()</code> is that the latter returns a unit-less pixel value (for example, <code>400</code>) while the former returns a value with units intact (for example, <code>400px</code>). The <code>.height()</code> method is recommended when an element's height needs to be used in a mathematical calculation.</p>
            <p class="image">
               <img src="/images/0042_04_01.png"/>
            </p>

            <p>This method is also able to find the height of the window and document.</p>

            <pre>$(window).height();   // returns height of browser viewport
$(document).height(); // returns height of HTML document</pre>
         </longdesc>
         <example>
            <desc>Show various heights.  Note the values are from the iframe so might be smaller than you expected.  The yellow highlight shows the iframe body.</desc>
         </example>
      </entry>
      <entry type="method" name="height">
         <desc>取得第一个匹配元素当前计算的高度值（px）。 为每个匹配的元素设置CSS高度(hidth)属性的值。如果没有明确指定单位（如：em或%），使用px。Set the CSS height of every matched element.</desc>
         <signature>
            <argument name="value">
               <desc>An integer representing the number of pixels, or an integer with an optional unit of measure appended (as a string).</desc>
            </argument>
         </signature>
         <signature>
            <argument name="function(index, height)">
               <desc>A function returning the height to set. Receives the index position of the element in the set and the old height as arguments.</desc>
            </argument>
         </signature>
         <longdesc>在 jQuery 1.2 以后可以用来获取 window 和 document 的高如果没有明确指定单位（如：em或%），使用px。<p>When calling <code>.height(value)</code>, the value can be either a string (number and unit) or a number. If only a number is provided for the value, jQuery assumes a pixel unit. If a string is provided, however, any valid CSS measurement may be used for the height (such as <code>100px</code>, <code>50%</code>, or <code>auto</code>). Note that in modern browsers, the CSS height property does not include padding, border, or margin.</p>
            <p>If no explicit unit was specified (like 'em' or '%') then "px" is concatenated to the value.</p>
         </longdesc>
         <example>
            <desc>To set the height of each div on click to 30px plus a color change.</desc>
         </example>
      </entry>
      <entry type="method" name="show">
         <desc>显示隐藏的匹配元素。 以优雅的动画显示所有匹配的元素，并在显示完成后可选地触发一个回调函数。Display the matched elements.</desc>
         <signature/>
         <signature>
            <argument name="duration">
               <desc>A string or number determining how long the animation will run.</desc>
            </argument>
            <argument name="callback">
               <desc>A function to call once the animation is complete.</desc>
            </argument>
         </signature>
         <longdesc>这个就是 'show( speed, [callback] )' 无动画的版本。如果选择的元素是可见的，这个方法将不会改变任何东西。无论这个元素是通过hide()方法隐藏的还是在CSS里设置了display:none;，这个方法都将有效。可以根据指定的速度动态地改变每个匹配元素的高度、宽度和不透明度。在jQuery 1.3中，padding和margin也会有动画，效果更流畅。
<p>With no parameters, the <code>.show()</code> method is the simplest way to display an element:
</p>
            <pre>$('.target').show();
</pre>
            <p>The matched elements will be revealed immediately, with no animation. This is roughly equivalent to calling <code>.css('display', 'block')</code>, except that the <code>display</code> property is restored to whatever it was initially. If an element has a <code>display</code> value of <code>inline</code>, then is hidden and shown, it will once again be displayed <code>inline</code>.</p>
            <p>When a duration is provided, <code>.show()</code> becomes an animation method. The <code>.show()</code> method animates the width, height, and opacity of the matched elements simultaneously.</p>
            <p>Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings <code>'fast'</code> and <code>'slow'</code> can be supplied to indicate durations of <code>200</code> and <code>600</code> milliseconds, respectively.</p>
            <p>If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but <code>this</code> is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.</p>
            <p>We can animate any element, such as a simple image:</p>
            <pre>&lt;div id="clickme"&gt;
  Click here
&lt;/div&gt;
&lt;img id="book" src="book.png" alt="" width="100" height="123" /&gt;
With the element initially hidden, we can show it slowly:
$('#clickme').click(function() {
  $('#book').show('slow', function() {
    // Animation complete.
  });
});</pre>
            <p class="image four-across">
               <img src="/images/0042_06_01.png" alt=""/>
               <img src="/images/0042_06_02.png" alt=""/>
               <img src="/images/0042_06_03.png" alt=""/>
               <img src="/images/0042_06_04.png" alt=""/>
            </p>

         </longdesc>
         <example>
            <desc>Animates all hidden paragraphs to show slowly, completing the animation within 600 milliseconds.</desc>
         </example>
         <example>
            <desc>Animates all hidden divs to show fastly in order, completing each animation within 200 milliseconds. Once each animation is done, it starts the next one.</desc>
         </example>
         <example>
            <desc>Shows all span and input elements with an animation. Once the animation is done, it changes the text.</desc>
         </example>
      </entry>
      <entry type="method" name="scrollLeft">
         <desc>获取匹配元素相对滚动条左侧的偏移。 传递参数值时，设置水平滚动条左侧偏移为该值。Get the current horizontal position of the scroll bar for the first element in the set of matched elements.</desc>
         <signature/>
         <longdesc>此方法对可见和隐藏元素均有效。此方法对可见和隐藏元素均有效。<p>The horizontal scroll position is the same as the number of pixels that are hidden from view above the scrollable area. If the scroll bar is at the very left, or if the element is not scrollable, this number will be <code>0</code>.</p>
         </longdesc>
         <example>
            <desc>Get the scrollLeft of a paragraph.</desc>
         </example>
      </entry>
      <entry type="method" name="scrollLeft">
         <desc>获取匹配元素相对滚动条左侧的偏移。 传递参数值时，设置水平滚动条左侧偏移为该值。Set the current horizontal position of the scroll bar for each of the set of matched elements.</desc>
         <signature>
            <argument name="value">
               <desc>An integer indicating the new position to set the scroll bar to.</desc>
            </argument>
         </signature>
         <longdesc>此方法对可见和隐藏元素均有效。此方法对可见和隐藏元素均有效。<p>The horizontal scroll position is the same as the number of pixels that are hidden from view above the scrollable area. Setting the <code>scrollLeft</code> positions the horizontal scroll of each matched element.</p>
         </longdesc>
         <example>
            <desc>Set the scrollLeft of a div.</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery.trim">
         <desc>去掉字符串起始和结尾的空格。Remove the whitespace from the beginning and end of a string.</desc>
         <signature>
            <argument name="str">
               <desc>The string to trim.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>The <code>$.trim()</code> function removes all newlines, spaces (including non-breaking spaces), and tabs from the beginning and end of the supplied string. If these whitespace characters occur in the middle of the string, they are preserved.</p>
         </longdesc>
         <example>
            <desc>Remove the two white spaces at the start and at the end of the string.</desc>
         </example>
         <example>
            <desc>Remove the two white spaces at the start and at the end of the string.</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery.isFunction">
         <desc>测试对象是否为函数。Determine if the argument passed is a Javascript function object. </desc>
         <signature>
            <argument name="obj">
               <desc>Object to test whether or not it is a function.</desc>
            </argument>
         </signature>
         <longdesc>'''注意：'''jQuery 1.3以后，在IE浏览器里，浏览器提供的函数比如'alert'还有 DOM 元素的方法比如 'getAttribute' 将不认为是函数<p>
               <strong>Note:</strong> As of jQuery 1.3, functions provided by the browser like <code>alert()</code> and DOM element methods like <code>getAttribute()</code> are not guaranteed to be detected as functions in browsers such as Internet Explorer.</p>
         </longdesc>
         <example>
            <desc>Test a few parameter examples.</desc>
         </example>
         <example>
            <desc>Finds out if the parameter is a funcion.</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery.isArray">
         <desc>jQuery 1.3 新增。测试对象是否为数组。Determine whether the argument is an array.</desc>
         <signature>
            <argument name="obj">
               <desc>Object to test whether or not it is an array.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>
               <code>$.isArray()</code> returns a Boolean indicating whether the object is a JavaScript array (not an array-like object, such as a jQuery object).</p>
         </longdesc>
         <example>
            <desc>Finds out if the parameter is an array.</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery.unique">
         <desc>删除数组中重复元素。只处理删除DOM元素数组，而不能处理字符串或者数字数组。Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers.</desc>
         <signature>
            <argument name="array">
               <desc>The Array of DOM elements.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>The <code>$.unique()</code> function searches through an array of objects, sorting the array, and removing any duplicate nodes. This function only works on plain JavaScript arrays of DOM elements, and is chiefly used internally by jQuery.</p>
            <p>As of jQuery 1.4 the results will always be returned in document order.</p>
         </longdesc>
         <example>
            <desc>Removes any duplicate elements from the array of divs.</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery.merge">
         <desc>合并两个数组Merge the contents of two arrays together into the first array. </desc>
         <signature>
            <argument name="first">
               <desc>The first array to merge, the elements of second added.</desc>
            </argument>
            <argument name="second">
               <desc>The second array to merge into the first, unaltered.</desc>
            </argument>
         </signature>
         <longdesc>返回的结果会修改第一个数组的内容——第一个数组的元素后面跟着第二个数组的元素。要去除重复项，请使用$.unique()<p>The <code>$.merge()</code> operation forms an array that contains all elements from the two arrays. The orders of items in the arrays are preserved, with items from the second array appended. The <code>$.merge()</code> function is destructive. It alters the first parameter to add the items from the second.  </p>
            <p>If you need the original first array, make a copy of it before calling <code>$.merge()</code>. Fortunately, <code>$.merge()</code> itself can be used for this duplication:</p>
            <pre>var newArray = $.merge([], oldArray);</pre>
            <p>This shortcut creates a new, empty array and merges the contents of oldArray into it, effectively cloning the array.</p>
            <p>Prior to jQuery 1.4, the arguments should be true Javascript Array objects; use <code>$.makeArray</code> if they are not.</p>
         </longdesc>
         <example>
            <desc>Merges two arrays, altering the first argument.</desc>
         </example>
         <example>
            <desc>Merges two arrays, altering the first argument.</desc>
         </example>
         <example>
            <desc>Merges two arrays, but uses a copy, so the original isn't altered.</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery.inArray">
         <desc>确定第一个参数在数组中的位置，从0开始计数(如果没有找到则返回 -1 )。Search for a specified value within an array and return its index (or -1 if not found).</desc>
         <signature>
            <argument name="value">
               <desc>The value to search for.</desc>
            </argument>
            <argument name="array">
               <desc>An array through which to search.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>The <code>$.inArray()</code> method is similar to JavaScript's native <code>.indexOf()</code> method in that it returns -1 when it doesn't find a match. If the first element within the array matches <code>value</code>, <code>$.inArray()</code> returns 0.</p> 

            <p>Because JavaScript treats 0 as loosely equal to false (i.e. 0 == false, but 0 !== false), if we're checking for the presence of <code>value</code> within <code>array</code>, we need to check if it's not equal to (or greater than) -1.</p>
         </longdesc>
         <example>
            <desc>Report the index of some elements in the array.</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery.map">
         <desc>将一个数组中的元素转换到另一个数组中。Translate all items in an array or array-like object to another array of items.</desc>
         <signature>
            <argument name="array">
               <desc>The Array to translate.</desc>
            </argument>
            <argument name="callback(elementOfArray, indexInArray)">
               <desc>The function to process each item against.  The first argument to the function is the list item, the second argument is the index in array The function can return any value.  <code>this</code> will be the global window object. </desc>
            </argument>
         </signature>
         <longdesc>作为参数的转换函数会为每个数组元素调用，而且会给这个转换函数传递一个表示被转换的元素作为参数。转换函数可以返回转换后的值、null（删除数组中的项目）或一个包含值的数组，并扩展至原始数组中。<p>The $.map() method applies a function to each item in an array, collecting the results into a new array.</p> 
            <p>The translation function that is provided to this method is called for each item in the array and is passed two arguments: The item to be translated, and the index within the array.</p>

            <p>The function can return:</p>
            <ul>
               <li>the translated value, which will be mapped to the resulting array</li>
               <li>
                  <code>null</code>, to remove the item</li>
               <li>an array of values, which will be flattened into the full array</li>
            </ul>
            <p>Map can  iterate through Array-like objects, like a jQuery object, that have a length property.</p>
         </longdesc>
         <example>
            <desc>A couple examples of using .map()</desc>
         </example>
         <example>
            <desc>Maps the original array to a new one and adds 4 to each value.</desc>
         </example>
         <example>
            <desc>Maps the original array to a new one and adds 1 to each value if it is bigger then zero, otherwise it's removed.</desc>
         </example>
         <example>
            <desc>Maps the original array to a new one, each element is added with it's original value and the value plus one.</desc>
         </example>
         <example>
            <desc>Maps the original array to a new one, each element is squared.</desc>
         </example>
         <example>
            <desc>Remove items by returning <code>null</code> from the function. This removes any numbers less than 50, and the rest are decreased by 45.</desc>
         </example>
         <example>
            <desc>Augmenting the resulting array by returning an array inside the function.</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery.makeArray">
         <desc>将类数组对象转换为数组对象。Convert an array-like object into a true JavaScript array.</desc>
         <signature>
            <argument name="obj">
               <desc>Any object to turn into a native Array.</desc>
            </argument>
         </signature>
         <longdesc>类数组对象有 length 属性，其成员索引为 0 至 length - 1。实际中此函数在 jQuery 中将自动使用而无需特意转换。
    <p>Many methods, both in jQuery and in JavaScript in general, return objects that are array-like. For example, the jQuery factory function <code>$()</code> returns a jQuery object that has many of the properties of an array (a length, the <code>[]</code> array access operator, etc.), but is not exactly the same as an array and lacks some of an array's built-in methods (such as <code>.pop()</code> and <code>.reverse()</code>).</p>

            <p>Note that after the conversion, any special features the object had (such as the jQuery methods in our example) will no longer be present. The object is now a plain array.</p>
         </longdesc>
         <example>
            <desc>Turn a collection of HTMLElements into an Array of them.</desc>
         </example>
         <example>
            <desc>Turn a jQuery object into an array</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery.grep">
         <desc>使用过滤函数过滤数组元素。Finds the elements of an array which satisfy a filter function. The original array is not affected.</desc>
         <signature>
            <argument name="array">
               <desc>The array to search through.</desc>
            </argument>
            <argument name="function(elementOfArray, indexInArray)">
               <desc>The function to process each item against.  The first argument to the function is the item, and the second argument is the index.  The function should return a Boolean value.  <code>this</code> will be the global window object.</desc>
            </argument>
            <argument name="invert">
               <desc>If "invert" is false, or not provided, then the function returns an array consisting of all elements for which "callback" returns true.  If "invert" is true, then the function returns an array consisting of all elements for which "callback" returns false.</desc>
            </argument>
         </signature>
         <longdesc>此函数至少传递两个参数：待过滤数组和过滤函数。过滤函数必须返回 true 以保留元素或 false 以删除元素。<p>The <code>$.grep()</code> method removes items from an array as necessary so that all remaining items pass a provided test. The test is a function that is passed an array item and the index of the item within the array. Only if the test returns true will the item be in the result array.</p>

            <p> The filter function will be passed two arguments: the current array item and its index. The filter function must return 'true' to include the item in the result array.</p>
         </longdesc>
         <example>
            <desc>Filters the original array of numbers leaving that are not 5 and have an index greater than 4.  Then it removes all 9s.</desc>
         </example>
         <example>
            <desc>Filter an array of numbers to include only numbers bigger then zero.</desc>
         </example>
         <example>
            <desc>Filter an array of numbers to include numbers that are not bigger than zero.</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery.extend">
         <desc>扩展jQuery对象本身。 用一个或多个其他对象来扩展一个对象，返回被扩展的对象。Merge the contents of two or more objects together into the first object.</desc>
         <signature>
            <argument name="target">
               <desc> An object that will receive the new properties if additional objects are passed in or that will extend the jQuery namespace if it is the sole argument.</desc>
            </argument>
            <argument name="object1">
               <desc>An object containing additional properties to merge in.</desc>
            </argument>
            <argument name="objectN">
               <desc>Additional objects containing properties to merge in.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="deep">
               <desc>If true, the merge becomes recursive (aka. deep copy).</desc>
            </argument>
            <argument name="target">
               <desc>The object to extend. It will receive the new properties.</desc>
            </argument>
            <argument name="object1">
               <desc>An object containing additional properties to merge in.</desc>
            </argument>
            <argument name="objectN">
               <desc>Additional objects containing properties to merge in.</desc>
            </argument>
         </signature>
         <longdesc>用来在jQuery命名空间上增加新函数。 查看 &lt;span title="Core/jQuery.fn.extend"&gt;'jQuery.fn.extend'&lt;/span&gt; 获取更多添加&lt;a href="http://docs.jquery.com/Plugins/Authoring" title="Plugins/Authoring"&gt;插件&lt;/a&gt;的信息。如果不指定target，则给jQuery命名空间本身进行扩展。这有助于插件作者为jQuery增加新方法。
		
		如果第一个参数设置为true，则jQuery返回一个深层次的副本，递归地复制找到的任何对象。否则的话，副本会与原对象共享结构。
		
		未定义的属性将不会被复制，然而从对象的原型继承的属性将会被复制。<p>When we supply two or more objects to <code>$.extend()</code>, properties from all of the objects are added to the target object.</p>
            <p>If only one argument is supplied to <code>$.extend()</code>, this means the target argument was omitted. In this case, the jQuery object itself is assumed to be the target. By doing this, we can add new functions to the jQuery namespace.  This can be useful for plugin authors wishing to add new methods to JQuery.</p>
            <p>Keep in mind that the target object (first argument) will be modified, and will also be returned from <code>$.extend()</code>. If, however, we want to preserve both of the original objects, we can do so by passing an empty object as the target:</p>
            <pre>var object = $.extend({}, object1, object2);</pre>

            <p>The merge performed by <code>$.extend()</code> is not recursive by default; if a property of the first object is itself an object or array, it will be completely overwritten by a property with the same key in the second object. The values are not merged. This can be seen in the example below by examining the value of banana. However, by passing <code>true</code> for the first function argument, objects will be recursively merged.</p>
            <p>Undefined properties are not copied. However, properties inherited from the object's prototype <em>will</em> be copied over.</p>
         </longdesc>
         <example>
            <desc>Merge two objects, modifying the first.</desc>
         </example>
         <example>
            <desc>Merge two objects recursively, modifying the first.</desc>
         </example>
         <example>
            <desc>Merge settings and options, modifying settings.</desc>
         </example>
         <example>
            <desc>Merge defaults and options, without modifying the defaults. This is a common plugin development pattern.</desc>
         </example>
      </entry>
      <entry type="method" name="jQuery.each">
         <desc>通用例遍方法，可用于例遍对象和数组。A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function's arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties.
  </desc>
         <signature>
            <argument name="collection">
               <desc>The object or array to iterate over.</desc>
            </argument>
            <argument name="callback(indexInArray, valueOfElement)">
               <desc>The function that will be executed on every object.</desc>
            </argument>
         </signature>
         <longdesc>不同于例遍 jQuery 对象的 $().each() 方法，此方法可用于例遍任何对象。回调函数拥有两个参数：第一个为对象的成员或数组的索引，第二个为对应变量或内容。如果需要退出 each 循环可使回调函数返回 false，其它返回值将被忽略。 

    <p>The <code>$.each()</code> function is not the same as <a href="/each/">.each()</a>, which is used to iterate, exclusively, over a jQuery object. The <code>$.each()</code> function can be used to iterate over any collection, whether it is a map (JavaScript object) or an array. In the case of an array, the callback is passed an array index and a corresponding array value each time. (The value can also be accessed through the <code>this</code> keyword.)</p>

            <pre>$.each([52, 97], function(index, value) { 
  alert(index + ': ' + value); 
});
</pre>
            <p>This produces two messages:</p>
            <p>
               <span class="output">0: 52</span>
               <br/>
               <span class="output">1: 97</span>
            </p>
            <p>If a map is used as the collection, the callback is passed a key-value pair each time:</p>
            <pre>var map = { 
  'flammable': 'inflammable', 
  'duh': 'no duh' 
}; 
$.each(map, function(key, value) { 
  alert(key + ': ' + value); 
});</pre>
            <p>Once again, this produces two messages:</p>
            <p>
               <span class="output">flammable: inflammable</span>
               <br/>
               <span class="output">duh: no duh</span>
            </p>
    
            <p>We can break the <code>$.each()</code> loop at a particular iteration by making the callback function return <code>false</code>. Returning <em>non-false</em> is the same as a <code>continue</code> statement in a for loop; it will skip immediately to the next iteration.</p>
         </longdesc>
         <example>
            <desc>Iterates through the array displaying each number as both a word and numeral</desc>
         </example>
         <example>
            <desc>Iterates over items in an array, accessing both the current item and its index.</desc>
         </example>
         <example>
            <desc>Iterates over the properties in an object, accessing both the current item and its key.</desc>
         </example>
      </entry>
      <entry type="property" name="jQuery.boxModel">
         <desc>在jQuery 1.3中不建议使用。当前页面中浏览器是否使用标准盒模型渲染页面。 建议使用 jQuery.support.boxModel 代替。W3C CSS 盒模型.<strong>Deprecated in jQuery 1.3 (see <a href="/jQuery.support">jQuery.support</a>)</strong>. States if the current page, in the user's browser, is being rendered using the <a href="http://www.w3.org/TR/REC-CSS2/box.html">W3C CSS Box Model</a>.</desc>
         <signature/>
         <longdesc/>
         <example>
            <desc>Returns the box model for the iframe.</desc>
         </example>
         <example>
            <desc>Returns false if the page is in Quirks Mode in Internet Explorer</desc>
         </example>
      </entry>
      <entry type="method" name="scrollTop">
         <desc>获取匹配元素相对滚动条顶部的偏移。 传递参数值时，设置垂直滚动条顶部偏移为该值。Get the current vertical position of the scroll bar for the first element in the set of matched elements.</desc>
         <signature/>
         <longdesc>此方法对可见和隐藏元素均有效。此方法对可见和隐藏元素均有效。<p>The vertical scroll position is the same as the number of pixels that are hidden from view above the scrollable area. If the scroll bar is at the very top, or if the element is not scrollable, this number will be <code>0</code>.</p>
         </longdesc>
         <example>
            <desc>Get the scrollTop of a paragraph.</desc>
         </example>
      </entry>
      <entry type="method" name="scrollTop">
         <desc>获取匹配元素相对滚动条顶部的偏移。 传递参数值时，设置垂直滚动条顶部偏移为该值。Set the current vertical position of the scroll bar for each of the set of matched elements.</desc>
         <signature>
            <argument name="value">
               <desc>An integer indicating the new position to set the scroll bar to.</desc>
            </argument>
         </signature>
         <longdesc>此方法对可见和隐藏元素均有效。此方法对可见和隐藏元素均有效。<p>The vertical scroll position is the same as the number of pixels that are hidden from view above the scrollable area. Setting the <code>scrollTop</code> positions the vertical scroll of each matched element.</p>
         </longdesc>
         <example>
            <desc>Set the scrollTop of a div.</desc>
         </example>
      </entry>
      <entry type="property" name="jQuery.support">
         <desc>jQuery 1.3 新增。一组用于展示不同浏览器各自特性和bug的属性集合。A collection of properties that represent the presence of different browser features or bugs.</desc>
         <signature/>
         <longdesc>jQuery提供了一系列属性，你也可以自由增加你自己的属性。其中许多属性是很低级的，所以很难说他们能否在日新月异的发展中一直保持有效，但这这些主要用于插件和内核开发者。

所有这些支持的属性值都通过特性检测来实现，而不是用任何浏览器检测。以下有一些非常棒的资源用于解释这些特性检测是如何工作的：&lt;ul&gt;&lt;li&gt;http://peter.michaux.ca/articles/feature-detection-state-of-the-art-browser-scripting&lt;/li&gt;&lt;li&gt;http://yura.thinkweb2.com/cft/&lt;/li&gt;&lt;li&gt;http://www.jibbering.com/faq/faq_notes/not_browser_detect.html&lt;/li&gt;&lt;/ul&gt;jQuery.support主要包括以下测试：

'''boxModel''': 如果这个页面和浏览器是以W3C CSS盒式模型来渲染的，则等于true。通常在IE 6和IE 7的怪癖模式中这个值是false。在document准备就绪前，这个值是null。

'''cssFloat''': 如果用cssFloat来访问CSS的float的值，则返回true。目前在IE中会返回false,他用styleFloat代替。

'''hrefNormalized''': 如果浏览器从getAttribute("href")返回的是原封不动的结果，则返回true。在IE中会返回false，因为他的URLs已经常规化了。

'''htmlSerialize''': 如果浏览器通过innerHTML插入链接元素的时候会序列化这些链接，则返回true，目前IE中返回false。

'''leadingWhitespace''': 如果在使用innerHTML的时候浏览器会保持前导空白字符，则返回true，目前在IE 6-8中返回false。

'''noCloneEvent''': 如果浏览器在克隆元素的时候不会连同事件处理函数一起复制，则返回true，目前在IE中返回false。

'''objectAll''': 如果在某个元素对象上执行getElementsByTagName("*")会返回所有子孙元素，则为true，目前在IE 7中为false。

'''opacity''': 如果浏览器能适当解释透明度样式属性，则返回true，目前在IE中返回false，因为他用alpha滤镜代替。

'''scriptEval''': 使用 appendChild/createTextNode 方法插入脚本代码时，浏览器是否执行脚本，目前在IE中返回false，IE使用 .text 方法插入脚本代码以执行。

'''style''': 如果getAttribute("style")返回元素的行内样式，则为true。目前IE中为false，因为他用cssText代替。

'''tbody''': 如果浏览器允许table元素不包含tbody元素，则返回true。目前在IE中会返回false，他会自动插入缺失的tbody。
    <p>Rather than using <code>$.browser</code> to detect the current user agent and alter the page presentation based on which browser is running, it is a good practice to perform <strong>feature detection</strong>. This means that prior to executing code which relies on a browser feature, we test to ensure that the feature works properly. To make this process simpler, jQuery performs many such tests and makes the results available to us as properties of the <code>jQuery.support</code> object.</p>
            <p>The values of all the support properties are determined using feature detection (and do not use any form of browser sniffing). </p>

            <blockquote>
               <p>Following are a few resources that explain how feature detection works:</p>
               <ul>
                  <li>
                     <a href="http://peter.michaux.ca/articles/feature-detection-state-of-the-art-browser-scripting">http://peter.michaux.ca/articles/feature-detection-state-of-the-art-browser-scripting</a>
                  </li>
                  <li>
                     <a href="http://www.jibbering.com/faq/faq_notes/not_browser_detect.html">http://www.jibbering.com/faq/faq_notes/not_browser_detect.html</a>
                  </li>
                  <li>
                     <a href="http://yura.thinkweb2.com/cft/">http://yura.thinkweb2.com/cft/</a>
                  </li>
               </ul>
            </blockquote>
            <p>While jQuery includes a number of properties, developers should feel free to add their own as their needs dictate. Many of the <code>jQuery.support</code> properties are rather low-level, so they are most useful for plugin and jQuery core development, rather than general day-to-day development.</p>

            <p>The tests included in <code>jQuery.support</code> are as follows:</p>
            <ul>
               <li>
                  <code>boxModel</code>: Is equal to true if the page is rendering according to the <a href="http://www.w3.org/TR/REC-CSS2/box.html">W3C CSS Box Model</a> (is currently false in IE 6 and 7 when they are in Quirks Mode). This property is null until document ready occurs.</li>
               <li>
                  <code>cssFloat</code>: Is equal to true if the name of the property containing the CSS float value is .cssFloat, as defined in the <a href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSS2Properties-cssFloat">CSS Spec</a>. (It is currently false in IE, it uses styleFloat instead).</li>
               <li>
                  <code>hrefNormalized</code>: Is equal to true if the <code>.getAttribute()</code> method retrieves the <code>href</code> attribute of elements unchanged, rather than normalizing it to a fully-qualified URL. (It is currently false in IE, the URLs are normalized). 
  <div>
                     <a href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-666EE0F9">DOM l3 spec</a>
                  </div>
               </li>
               <li>
                  <code>htmlSerialize</code>: Is equal to true  if the browser is able to serialize/insert <code>&lt;link&gt;</code> elements using the <code>.innerHTML</code> property of elements. (is currently false in IE). <div>
                     <a href="http://www.w3.org/TR/2008/WD-html5-20080610/serializing.html#html-fragment">HTML5 wd</a>
                  </div>
               </li>
               <li>
                  <code>leadingWhitespace</code>: Is equal to true if the browser inserts content with .innerHTML exactly as provided—specifically, if leading whitespace characters are preserved. (It is currently false in IE 6-8). <div>
                     <a href="http://www.w3.org/TR/2008/WD-html5-20080610/dom.html#innerhtml0">HTML5 wd</a>
                  </div>
               </li>
               <li>
                  <code>noCloneEvent</code>: Is equal to true  if cloned DOM elements are created without event handlers (that is, if the event handlers on the source element are not cloned). (It is currently false in IE). <div>
                     <a href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-Registration-interfaces-h3">DOM l2 spec</a>
                  </div>
               </li>
               <li>
                  <code>opacity</code>: Is equal to true if a browser can properly interpret the opacity style property. (It is currently false in IE, it uses alpha filters instead). <div>
                     <a href="http://www.w3.org/TR/css3-color/#transparency">CSS3 spec</a>
                  </div>
               </li>
               <li>
                  <code>scriptEval</code>: Is equal to true if inline scripts are automatically evaluated and executed when inserted to the document using standard DOM manipulation methods, such as <code>appendChild()</code> and <code>createTextNode()</code>. (It is currently false in IE, it uses <code>.text</code> to insert executable scripts). <div>
                     <a href="http://www.w3.org/TR/2008/WD-html5-20080610/tabular.html#script">HTML5 WD</a>
                  </div>
               </li>
               <li>
                  <code>style</code>: Is equal to true if inline styles for an element can be accessed through the DOM attribute called style, as required by the DOM Level 2 specification. In this case, <code>.getAttribute('style')</code> can retrieve this value; in Internet Explorer, <code>.cssText</code> is used for this purpose. <div>
                     <a href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-ElementCSSInlineStyle">DOM l2 Style spec</a>
                  </div>
               </li>
               <li>
                  <code>tbody</code>: Is equal to true if an empty <code>&lt;table&gt;</code> element can exist without a <code>&lt;tbody&gt;</code> element. According to the HTML specification, this sub-element is optional, so the property should be true in a fully-compliant browser. If false, we must account for the possibility of the browser injecting <code>&lt;tbody&gt;</code> tags implicitly. (It is currently false in IE, which automatically inserts <code>tbody</code> if it is not present in a string assigned to <code>innerHTML</code>). <div>
                     <a href="http://dev.w3.org/html5/spec/Overview.html#the-table-element">HTML5 spec</a>
                  </div>
               </li>
            </ul>
         </longdesc>
         <example>
            <desc>Returns the box model for the iframe.</desc>
         </example>
         <example>
            <desc>Returns false if the page is in QuirksMode in Internet Explorer</desc>
         </example>
      </entry>
      <entry type="method" name="position">
         <desc>获取匹配元素相对父元素的偏移。Get the current coordinates of the first element in the set of matched elements, relative to the offset parent.</desc>
         <signature/>
         <longdesc>返回的对象包含两个整型属性：top 和 left。为精确计算结果，请在补白、边框和填充属性上使用像素单位。此方法只对可见元素有效。<p>The <code>.position()</code> method allows us to retrieve the current position of an element <em>relative to the offset parent</em>. Contrast this with <code>
                  <a href="/offset">.offset()</a>
               </code>, which retrieves the current position <em>relative to the document</em>. When positioning a new element near another one and within the same containing DOM element, <code>.position()</code> is the more useful.</p>
            <p>Returns an object containing the properties <code>top</code> and <code>left</code>.</p>
         </longdesc>
         <example>
            <desc>Access the position of the second paragraph:</desc>
         </example>
      </entry>
      <entry type="method" name="offset">
         <desc>获取匹配元素在当前视口的相对偏移。 设置匹配元素相对于document对象的坐标。Get the current coordinates of the first element in the set of matched elements, relative to the document.</desc>
         <signature/>
         <longdesc>返回的对象包含两个整型属性：top 和 left。此方法只对可见元素有效。.offset()方法可以让我们重新设置元素的位置。这个元素的位置是相对于document对象的。如果对象原先的position样式属性是static的话，会被改成relative来实现重定位。<p>The <code>.offset()</code> method allows us to retrieve the current position of an element <em>relative to the document</em>. Contrast this with <code>.position()</code>, which retrieves the current position <em>relative to the offset parent</em>. When positioning a new element on top of an existing one for global manipulation (in particular, for implementing drag-and-drop), <code>.offset()</code> is the more useful.</p>

            <p>
               <code>.offset()</code> returns an object containing the properties <code>top</code> and <code>left</code>.</p>
            <blockquote>
               <p>
                  <strong>Note:</strong> jQuery does not support getting the offset coordinates of hidden elements.</p>
            </blockquote>    
         </longdesc>
         <example>
            <desc>Access the offset of the second paragraph:</desc>
         </example>
         <example>
            <desc>Click to see the offset.</desc>
         </example>
      </entry>
      <entry type="method" name="offset">
         <desc>获取匹配元素在当前视口的相对偏移。 设置匹配元素相对于document对象的坐标。Set the current coordinates of every element in the set of matched elements, relative to the document.</desc>
         <signature>
            <argument name="coordinates">
               <desc>An object containing the properties <code>top</code> and <code>left</code>, which are integers indicating the new top and left coordinates for the elements.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="function(index, coords)">
               <desc>A function to return the coordinates to set. Receives the index of the element in the collection as the first argument and the current coordinates as the second argument. The function should return an object with the new <code>top</code> and <code>left</code> properties.</desc>
            </argument>
         </signature>
         <longdesc>返回的对象包含两个整型属性：top 和 left。此方法只对可见元素有效。.offset()方法可以让我们重新设置元素的位置。这个元素的位置是相对于document对象的。如果对象原先的position样式属性是static的话，会被改成relative来实现重定位。<p>The <code>.offset()</code> setter method allows us to reposition an element. The element's position is specified <em>relative to the document</em>. If the element's <code>position</code> style property is currently <code>static</code>, it will be set to <code>relative</code> to allow for this repositioning.</p>
         </longdesc>
         <example>
            <desc>Set the offset of the second paragraph:</desc>
         </example>
      </entry>
      <entry type="method" name="css">
         <desc>访问第一个匹配元素的样式属性。 把一个“名/值对”对象设置为所有匹配元素的样式属性。 在所有匹配的元素中，设置一个样式属性的值。 在所有匹配的元素中，设置一个样式属性的值。Get the value of a style property for the first element in the set of matched elements.</desc>
         <signature>
            <argument name="propertyName">
               <desc>A CSS property.</desc>
            </argument>
         </signature>
         <longdesc>这是一种在所有匹配的元素上设置大量样式属性的最佳方式。数字将自动转化为像素值数字将自动转化为像素值<p>The <code>.css()</code> method is a convenient way to get a style property from the first matched element, especially in light of the different ways browsers access most of those properties (the <code>getComputedStyle()</code> method in standards-based browsers versus the <code>currentStyle</code> and <code>runtimeStyle</code> properties in Internet Explorer) and the different terms browsers use for certain properties. For example, Internet Explorer's DOM implementation refers to the <code>float</code> property as <code>styleFloat</code>, while W3C standards-compliant browsers refer to it as <code>cssFloat</code>. The <code>.css()</code> method accounts for such differences, producing the same result no matter which term we use. For example, an element that is floated left will return the string <code>left</code> for each of the following three lines:</p>
				        <ol>
					          <li>
                  <code>$('div.left').css('float');</code>
               </li>
					          <li>
                  <code>$('div.left').css('cssFloat');</code>
               </li>
					          <li>
                  <code>$('div.left').css('styleFloat');</code>
               </li>
				        </ol>
				        <p>Also, jQuery can equally interpret the CSS and DOM formatting of multiple-word properties. For example, jQuery understands and returns the correct value for both <code>.css('background-color')</code> and <code>.css('backgroundColor')</code>.</p>
				        <p>Shorthand CSS properties (e.g. margin, background, border) are not supported. For example, if you want to retrieve the rendered margin, use: <code>$(elem).css('marginTop')</code> and <code>$(elem).css('marginRight')</code>, and so on.</p>
         </longdesc>
         <example>
            <desc>To access the background color of a clicked div.</desc>
         </example>
      </entry>
      <entry type="method" name="css">
         <desc>访问第一个匹配元素的样式属性。 把一个“名/值对”对象设置为所有匹配元素的样式属性。 在所有匹配的元素中，设置一个样式属性的值。 在所有匹配的元素中，设置一个样式属性的值。Set one or more CSS properties for the  set of matched elements.</desc>
         <signature>
            <argument name="propertyName">
               <desc>A CSS property name.</desc>
            </argument>
            <argument name="value">
               <desc>A value to set for the property.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="propertyName">
               <desc>A CSS property name.</desc>
            </argument>
            <argument name="function(index, value)">
               <desc>A function returning the value to set. Receives the index position of the element in the set and the old value as arguments.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="map">
               <desc>A map of property-value pairs to set.</desc>
            </argument>
         </signature>
         <longdesc>这是一种在所有匹配的元素上设置大量样式属性的最佳方式。数字将自动转化为像素值数字将自动转化为像素值<p>As with the <code>.attr()</code> method, the <code>.css()</code> method makes setting properties of elements quick and easy. This method can take either a property name and value as separate parameters, or a single map of key-value pairs (JavaScript object notation).</p>
				        <p>Also, jQuery can equally interpret the CSS and DOM formatting of multiple-word properties. For example, jQuery understands and returns the correct value for both <code>.css({'background-color': '#ffe', 'border-left': '5px solid #ccc'})</code> and <code>.css({backgroundColor: '#ffe', borderLeft: '5px solid #ccc'})</code>. Notice that with the DOM notation, quotation marks around the property names are optional, but with CSS notation they're required due to the hyphen in the name.</p>
				        <p>As with <code>
                  <a href="/attr">.attr()</a>
               </code>, <code>.css()</code> allows us to pass a function as the property value:</p>
            <pre>$('div.example').css('width', function(index) {
  return index * 50;
});</pre>
            <p>This example sets the widths of the matched elements to incrementally larger values.</p>
         </longdesc>
         <example>
            <desc>To change the color of any paragraph to red on mouseover event.</desc>
         </example>
         <example>
            <desc>To highlight a clicked word in the paragraph.</desc>
         </example>
         <example>
            <desc>To set the color of all paragraphs to red and background to blue:</desc>
         </example>
         <example>
            <desc>Increase the size of a div when you click it:</desc>
         </example>
      </entry>
      <entry type="method" name="unwrap">
         <desc>这个方法将移出元素的父元素。这能快速取消 .wrap()方法的效果。匹配的元素（以及他们的同辈元素）会在DOM结构上替换他们的父元素。Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place.</desc>
         <signature/>
         <longdesc>
            <p>The <code>.unwrap()</code> method removes the element's parent. This is effectively the inverse of the <code>
                  <a href="/wrap">.wrap()</a>
               </code> method. The matched elements (and their siblings, if any) replace their parents within the DOM structure.</p>
         </longdesc>
         <example>
            <desc>Wrap/unwrap a div around each of the paragraphs.</desc>
         </example>
      </entry>
      <entry type="method" name="detach">
         <desc>从DOM中删除所有匹配的元素。Remove the set of matched elements from the DOM.</desc>
         <signature>
            <argument name="selector">
               <desc>A selector expression that filters the set of matched elements to be removed.</desc>
            </argument>
         </signature>
         <longdesc>这个方法不会把匹配的元素从jQuery对象中删除，因而可以在将来再使用这些匹配的元素。与remove()不同的是，所有绑定的事件、附加的数据等都会保留下来。<p>The <code>.detach()</code> method is the same as <code>
                  <a href="/remove">.remove()</a>
               </code>, except that <code>.detach()</code> keeps all jQuery data associated with the removed elements. This method is useful when removed elements are to be reinserted into the DOM at a later time.</p>
         </longdesc>
         <example>
            <desc>Detach all paragraphs from the DOM</desc>
         </example>
      </entry>
      <entry type="method" name="clone">
         <desc>克隆匹配的DOM元素并且选中这些克隆的副本。 元素以及其所有的事件处理并且选中这些克隆的副本Create a copy of the set of matched elements.</desc>
         <signature>
            <argument name="withDataAndEvents">
               <desc>A Boolean indicating whether event handlers should be copied along with the elements. As of jQuery 1.4 element data will be copied as well.</desc>
            </argument>
         </signature>
         <longdesc>在想把DOM文档中元素的副本添加到其他位置时这个函数非常有用。在想把DOM文档中元素的副本添加到其他位置时这个函数非常有用。<p>The <code>.clone()</code> method, when used in conjunction with one of the insertion methods, is a convenient way to duplicate elements on a page. Consider the following HTML:</p>
				        <pre>&lt;div class="container"&gt;
  &lt;div class="hello"&gt;Hello&lt;/div&gt;
  &lt;div class="goodbye"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre>
				        <p>As shown in the discussion for <code>
                  <a href="/append">.append()</a>
               </code>,  normally when we insert an element somewhere in the DOM, it is moved from its old location. So, given the code:</p>
				        <pre>$('.hello').appendTo('.goodbye');</pre>
				        <p>The resulting DOM structure would be:</p>
				        <pre>&lt;div class="container"&gt;
  &lt;div class="goodbye"&gt;
    Goodbye
    &lt;div class="hello"&gt;Hello&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</pre>
				        <p>To prevent this and instead create a copy of the element, we could write the following:</p>
				        <pre>$('.hello').clone().appendTo('.goodbye');</pre>
				        <p>This would produce:</p>
				        <pre>&lt;div class="container"&gt;
  &lt;div class="hello"&gt;Hello&lt;/div&gt;
  &lt;div class="goodbye"&gt;
    Goodbye
    &lt;div class="hello"&gt;Hello&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</pre>
				        <blockquote>
               <p>Note that when using the <code>.clone()</code> method, we can modify the cloned elements or their contents before (re-)inserting them into the document.</p>
            </blockquote>
				        <p>Normally, any event handlers bound to the original element are <em>not</em> copied to the clone. The optional <code>withDataAndEvents </code>parameter allows us to change this behavior, and to instead make copies of all of the event handlers as well, bound to the new copy of the element. As of jQuery 1.4, all element data (attached by the <code>.data()</code> method) is also copied to the new copy. </p>
         </longdesc>
         <example>
            <desc>Clones all b elements (and selects the clones) and prepends them to all paragraphs.</desc>
         </example>
      </entry>
      <entry type="method" name="remove">
         <desc>从DOM中删除所有匹配的元素。Remove the set of matched elements from the DOM.</desc>
         <signature>
            <argument name="selector">
               <desc>A selector expression that filters the set of matched elements to be removed.</desc>
            </argument>
         </signature>
         <longdesc>这个方法不会把匹配的元素从jQuery对象中删除，因而可以在将来再使用这些匹配的元素。但除了这个元素本身得以保留之外，其他的比如绑定的事件，附加的数据等都会被移除。<p>Similar to <code>
                  <a href="/empty">.empty()</a>
               </code>, the <code>.remove()</code> method takes elements out of the DOM. We use <code>.remove()</code> when we want to remove the element itself, as well as everything inside it. In addition to the elements themselves, all bound events and jQuery data  associated with the elements are removed.</p>
				        <p>Consider the following HTML:</p>
				        <pre>&lt;div class="container"&gt;
  &lt;div class="hello"&gt;Hello&lt;/div&gt;
  &lt;div class="goodbye"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre>
				        <p>We can target any element for removal:</p>
				        <pre>$('.hello').remove();</pre>
				        <p>This will result in a DOM structure with the <code>&lt;div&gt;</code> element deleted:</p>
				        <pre>&lt;div class="container"&gt;
  &lt;div class="goodbye"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre>
				        <p>If we had any number of nested elements inside <code>&lt;div class="hello"&gt;</code>, they would be removed, too. Other jQuery constructs such as data or event handlers are erased as well.</p>
				        <p>We can also include a selector as an optional parameter. For example, we could rewrite the previous DOM removal code as follows:</p>
				        <pre>$('div').remove('.hello');</pre>
				        <p>This would result in the same DOM structure:</p>
				        <pre>&lt;div class="container"&gt;
  &lt;div class="goodbye"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre>
         </longdesc>
         <example>
            <desc>Removes all paragraphs from the DOM</desc>
         </example>
         <example>
            <desc>Removes all paragraphs that contain "Hello" from the DOM</desc>
         </example>
      </entry>
      <entry type="method" name="empty">
         <desc>删除匹配的元素集合中所有的子节点。Remove all child nodes of the set of matched elements from the DOM.</desc>
         <signature/>
         <longdesc>
            <p>This method removes not only child (and other descendant) elements, but also any text within the set of matched elements. This is because, according to the DOM specification, any string of text within an element is considered a child node of that element. Consider the following HTML:</p>
            <pre>&lt;div class="container"&gt;
  &lt;div class="hello"&gt;Hello&lt;/div&gt;
  &lt;div class="goodbye"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre>
            <p>We can target any element for removal:</p>
            <pre>$('.hello').empty();</pre>
            <p>This will result in a DOM structure with the <code>Hello</code> text deleted:</p>
            <pre>&lt;div class="container"&gt;
  &lt;div class="hello"&gt;&lt;/div&gt;
  &lt;div class="goodbye"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre>
            <p>If we had any number of nested elements inside <code>&lt;div class="hello"&gt;</code>, they would be removed, too. </p>
            <p>To avoid memory leaks, jQuery removes other constructs such as data and event handlers from the child elements before removing the elements themselves.</p>
         </longdesc>
         <example>
            <desc>Removes all child nodes (including text nodes) from all paragraphs</desc>
         </example>
      </entry>
      <entry type="method" name="replaceAll">
         <desc>用匹配的元素替换掉所有 selector匹配到的元素。Replace each target element with the set of matched elements.</desc>
         <signature/>
         <longdesc>在jQuery 1.3.2中，appendTo, prependTo, insertBefore, insertAfter, 和 replaceAll这个几个方法成为一个破坏性操作，要选择先前选中的元素，需要使用end()方法，参见 appendTo 方法的例二。<p>The <code>.replaceAll()</code> method is corollary to <code>
                  <a href="/replaceWith">.replaceWith()</a>
               </code>, but with the source and target reversed. Consider this DOM structure:</p>
				        <pre>&lt;div class="container"&gt;
  &lt;div class="inner first"&gt;Hello&lt;/div&gt;
  &lt;div class="inner second"&gt;And&lt;/div&gt;
  &lt;div class="inner third"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre>
				        <p>We can create an element, then replace other elements with it:</p>
				        <pre>$('&lt;h2&gt;New heading&lt;/h2&gt;').replaceAll('.inner');</pre>
				        <p>This causes all of them to be replaced:</p>
				        <pre>&lt;div class="container"&gt;
  &lt;h2&gt;New heading&lt;/h2&gt;
  &lt;h2&gt;New heading&lt;/h2&gt;
  &lt;h2&gt;New heading&lt;/h2&gt;
&lt;/div&gt;</pre>
				        <p>Or, we could select an element to use as the replacement:</p>
				        <pre>$('.first').replaceAll('.third');</pre>
				        <p>This results in the DOM structure:</p>
				        <pre>&lt;div class="container"&gt;
  &lt;div class="inner second"&gt;And&lt;/div&gt;
  &lt;div class="inner first"&gt;Hello&lt;/div&gt;
&lt;/div&gt;</pre>
				        <p>From this example, we can see that the selected element replaces the target by being moved from its old location, not by being cloned.</p>
         </longdesc>
         <example>
            <desc>Replace all the paragraphs with bold words.</desc>
         </example>
      </entry>
      <entry type="method" name="replaceWith">
         <desc>将所有匹配的元素替换成指定的HTML或DOM元素。Replace each element in the set of matched elements with the provided new content.</desc>
         <signature>
            <argument name="newContent">
               <desc>The content to insert. May be an HTML string, DOM element, or jQuery object.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="function">
               <desc>A function that returns an HTML string to replace the set of matched elements with.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>The <code>.replaceWith()</code> method allows us to remove content from the DOM and insert new content in its place with a single call. Consider this DOM structure:</p>
				        <pre>&lt;div class="container"&gt;
  &lt;div class="inner first"&gt;Hello&lt;/div&gt;
  &lt;div class="inner second"&gt;And&lt;/div&gt;
  &lt;div class="inner third"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre>
				        <p>We can replace the second inner <code>&lt;div&gt;</code> with specified HTML:</p>
				        <pre>$('.second').replaceWith('&lt;h2&gt;New heading&lt;/h2&gt;');</pre>
				        <p>This results in the structure:</p>
				        <pre>&lt;div class="container"&gt;
  &lt;div class="inner first"&gt;Hello&lt;/div&gt;
  &lt;h2&gt;New heading&lt;/h2&gt;
  &lt;div class="inner third"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre>
				        <p>We could equally target all inner <code>&lt;div&gt;</code> elements at once:</p>
				        <pre>$('.inner').replaceWith('&lt;h2&gt;New heading&lt;/h2&gt;');</pre>
				        <p>This causes all of them to be replaced:</p>
				        <pre>&lt;div class="container"&gt;
  &lt;h2&gt;New heading&lt;/h2&gt;
  &lt;h2&gt;New heading&lt;/h2&gt;
  &lt;h2&gt;New heading&lt;/h2&gt;
&lt;/div&gt;</pre>
				        <p>Or, we could select an element to use as the replacement:</p>
				        <pre>$('.third').replaceWith($('.first'));</pre>
				        <p>This results in the DOM structure:</p>
				        <pre>&lt;div class="container"&gt;
  &lt;div class="inner second"&gt;And&lt;/div&gt;
  &lt;div class="inner first"&gt;Hello&lt;/div&gt;
&lt;/div&gt;</pre>
				        <p>From this example, we can see that the selected element replaces the target by being moved from its old location, not by being cloned.</p>
				        <p>The <code>.replaceWith()</code> method, like most jQuery methods, returns the jQuery object so that other methods can be chained onto it. However, it must be noted that the <emphasis role="italics">original</emphasis> jQuery object is returned. This object refers to the element that has been removed from the DOM, not the new element that has replaced it.</p>
            <p>In jQuery 1.4 <code>.replaceWith()</code>, <code>.before()</code>, and <code>.after()</code> can also work on disconnected DOM nodes. For example, with the following code:</p>
            <pre>$("&lt;div/&gt;").replaceWith("&lt;p&gt;&lt;/p&gt;");</pre>
            <p>The <code>.replaceWith()</code> method returns a jQuery set containing only a paragraph.</p>
         </longdesc>
         <example>
            <desc>On click, replace the button with a div containing the same word.</desc>
         </example>
         <example>
            <desc>Replace all the paragraphs with bold words.</desc>
         </example>
         <example>
            <desc>Replace all the paragraphs with empty div elements.</desc>
         </example>
         <example>
            <desc>On click, replace each paragraph with a jQuery div object that is already in the DOM.  Notice it doesn't clone the object but rather moves it to replace the paragraph.</desc>
         </example>
      </entry>
      <entry type="method" name="wrapInner">
         <desc>将每一个匹配的元素的子内容(包括文本节点)用一个HTML结构包裹起来 将每一个匹配的元素的子内容(包括文本节点)用DOM元素包裹起来 将每一个匹配的元素的子内容(包括文本节点)用DOM元素包裹起来Wrap an HTML structure around the content of each element in the set of matched elements.</desc>
         <signature>
            <argument name="wrappingElement">
               <desc>An HTML snippet, selector expression, jQuery object, or DOM element specifying the structure to wrap around the content of the matched elements.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="wrappingFunction">
               <desc>A callback function which generates a structure to wrap around the content of the matched elements.</desc>
            </argument>
         </signature>
         <longdesc>这个函数的原理是检查提供的第一个元素（它是由所提供的HTML标记代码动态生成的），并在它的代码结构中找到最上层的祖先元素－－这个祖先元素就是包装元素。<p>The <code>.wrapInner()</code> function can take any string or object that could be passed to the <code>$()</code> factory function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. The structure will be wrapped around the content of each of the elements in the set of matched elements.</p>
				        <p>Consider the following HTML:</p>
				        <pre>&lt;div class="container"&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre>
				        <p>Using <code>.wrapInner()</code>, we can insert an HTML structure around the content of each inner <code>&lt;div&gt;</code> elements like so:</p>
				        <pre>$('.inner').wrapInner('&lt;div class="new" /&gt;');</pre>
				        <p>The new <code>&lt;div&gt;</code> element is created on the fly and added to the DOM. The result is a new <code>&lt;div&gt;</code> wrapped around the content of each matched element:</p>
				        <pre>&lt;div class="container"&gt;
  &lt;div class="inner"&gt;
    &lt;div class="new"&gt;Hello&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="inner"&gt;
    &lt;div class="new"&gt;Goodbye&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</pre>
				        <p>The second version of this method allows us to instead specify a callback function. This callback function will be called once for every matched element; it should return a DOM element, jQuery object, or HTML snippet in which to wrap the content of the corresponding element. For example:</p>
				        <pre>$('.inner').wrapInner(function() {
  return '&lt;div class="' + this.nodeValue + '" /&gt;';
});</pre>
				        <p>This will cause each <code>&lt;div&gt;</code> to have a class corresponding to the text it wraps:</p>
				        <pre>&lt;div class="container"&gt;
  &lt;div class="inner"&gt;
    &lt;div class="Hello"&gt;Hello&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="inner"&gt;
    &lt;div class="Goodbye"&gt;Goodbye&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</pre>
         </longdesc>
         <example>
            <desc>Selects all paragraphs and wraps a bold tag around each of its contents.</desc>
         </example>
         <example>
            <desc>Wraps a newly created tree of objects around the inside of the body.</desc>
         </example>
         <example>
            <desc>Selects all paragraphs and wraps a bold tag around each of its contents.</desc>
         </example>
         <example>
            <desc>Selects all paragraphs and wraps a jQuery object around each of its contents.</desc>
         </example>
      </entry>
      <entry type="method" name="wrapAll">
         <desc>将所有匹配的元素用单个元素包裹起来 将所有匹配的元素用单个元素包裹起来Wrap an HTML structure around all elements in the set of matched elements.</desc>
         <signature>
            <argument name="wrappingElement">
               <desc>An HTML snippet, selector expression, jQuery object, or DOM element specifying the structure to wrap around the matched elements.</desc>
            </argument>
         </signature>
         <longdesc>这于 '.wrap()'&lt;a href="http://docs.jquery.com/Manipulation/wrap" title="Manipulation/wrap"&gt;&lt;/a&gt; 是不同的，'.wrap()'为每一个匹配的元素都包裹一次。这种包装对于在文档中插入额外的结构化标记最有用，而且它不会破坏原始文档的语义品质。这个函数的原理是检查提供的第一个元素并在它的代码结构中找到最上层的祖先元素－－这个祖先元素就是包装元素。这于 '.wrap()'&lt;a href="http://docs.jquery.com/Manipulation/wrap" title="Manipulation/wrap"&gt;&lt;/a&gt; 是不同的，'.wrap()'为每一个匹配的元素都包裹一次。<p>The <code>.wrapAll()</code> function can take any string or object that could be passed to the <code>$()</code> function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. The structure will be wrapped around all of the elements in the set of matched elements, as a single group.</p>
				        <p>Consider the following HTML:</p>
				        <pre>&lt;div class="container"&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre>
				        <p>Using <code>.wrapAll()</code>, we can insert an HTML structure around the inner <code>&lt;div&gt;</code> elements like so:</p>
				        <pre>$('.inner').wrapAll('&lt;div class="new" /&gt;');</pre>
				        <p>The new <code>&lt;div&gt;</code> element is created on the fly and added to the DOM. The result is a new <code>&lt;div&gt;</code> wrapped around all matched elements:</p>
				        <pre>&lt;div class="container"&gt;
  &lt;div class="new"&gt;
    &lt;div class="inner"&gt;Hello&lt;/div&gt;
    &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</pre>
         </longdesc>
         <example>
            <desc>Wrap a new div around all of the paragraphs.</desc>
         </example>
         <example>
            <desc>Wraps a newly created tree of objects around the spans.  Notice anything in between the spans gets left out like the &lt;strong&gt; (red text) in this example.  Even the white space between spans is left out.  Click View Source to see the original html.</desc>
         </example>
         <example>
            <desc>Wrap a new div around all of the paragraphs.</desc>
         </example>
         <example>
            <desc>Wrap a jQuery object double depth div around all of the paragraphs.  Notice it doesn't move the object but just clones it to wrap around its target.</desc>
         </example>
      </entry>
      <entry type="method" name="wrap">
         <desc>把所有匹配的元素用其他元素的结构化标记包裹起来。 把所有匹配的元素用其他元素的结构化标记包装起来。 把所有匹配的元素用其他元素的结构化标记包装起来。Wrap an HTML structure around each element in the set of matched elements.</desc>
         <signature>
            <argument name="wrappingElement">
               <desc>An HTML snippet, selector expression, jQuery object, or DOM element specifying the structure to wrap around the matched elements.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="wrappingFunction">
               <desc>A callback function which generates a structure to wrap around the matched elements.</desc>
            </argument>
         </signature>
         <longdesc>这种包装对于在文档中插入额外的结构化标记最有用，而且它不会破坏原始文档的语义品质。这个函数的原理是检查提供的第一个元素（它是由所提供的HTML标记代码动态生成的），并在它的代码结构中找到最上层的祖先元素－－这个祖先元素就是包裹元素。当HTML标记代码中的元素包含文本时无法使用这个函数。因此，如果要添加文本应该在包裹完成之后再行添加。<p>The <code>.wrap()</code> function can take any string or object that could be passed to the <code>$()</code> factory function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. The structure will be wrapped around each of the elements in the set of matched elements. This method returns the original set of elements for chaining purposes.</p>
            <p>Consider the following HTML:</p>
            <pre>&lt;div class="container"&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre>
				        <p>Using <code>.wrap()</code>, we can insert an HTML structure around the inner <code>&lt;div&gt;</code> elements like so:</p>
				        <pre>$('.inner').wrap('&lt;div class="new" /&gt;');</pre>
				        <p>The new <code>&lt;div&gt;</code> element is created on the fly and added to the DOM. The result is a new <code>&lt;div&gt;</code> wrapped around each matched element:</p>
				        <pre>&lt;div class="container"&gt;
  &lt;div class="new"&gt;
    &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="new"&gt;
    &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</pre>
            <p>The second version of this method allows us to instead specify a callback function. This callback function will be called once for every matched element; it should return a DOM element, jQuery object, or HTML snippet in which to wrap the corresponding element. For example:</p>
            <pre>$('.inner').wrap(function() {
  return '&lt;div class="' + $(this).text() + '" /&gt;';
});</pre>
            <p>This will cause each <code>&lt;div&gt;</code> to have a class corresponding to the text it wraps:</p>
            <pre>&lt;div class="container"&gt;
  &lt;div class="Hello"&gt;
    &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="Goodbye"&gt;
    &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</pre>
         </longdesc>
         <example>
            <desc>Wrap a new div around all of the paragraphs.</desc>
         </example>
         <example>
            <desc>Wraps a newly created tree of objects around the spans.  Notice anything in between the spans gets left out like the &lt;strong&gt; (red text) in this example.  Even the white space between spans is left out.  Click View Source to see the original html.</desc>
         </example>
         <example>
            <desc>Wrap a new div around all of the paragraphs.</desc>
         </example>
         <example>
            <desc>Wrap a jQuery object double depth div around all of the paragraphs.  Notice it doesn't move the object but just clones it to wrap around its target.</desc>
         </example>
      </entry>
      <entry type="method" name="insertBefore">
         <desc>把所有匹配的元素插入到另一个、指定的元素元素集合的前面。Insert every element in the set of matched elements before the target.</desc>
         <signature>
            <argument name="target">
               <desc>A selector, element, HTML string, or jQuery object; the matched set of elements will be inserted before the element(s) specified by this parameter.</desc>
            </argument>
         </signature>
         <longdesc>实际上，使用这个方法是颠倒了常规的$(A).before(B)的操作，即不是把B插入到A前面，而是把A插入到B前面。

		在jQuery 1.3.2中，appendTo, prependTo, insertBefore, insertAfter, 和 replaceAll这个几个方法成为一个破坏性操作，要选择先前选中的元素，需要使用end()方法，参见 appendTo 方法的例二。<p>The <code>
                  <a href="/before">.before()</a>
               </code> and <code>.insertBefore()</code> methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With<code> .before()</code>, the selector expression preceding the method is the container before which the content is inserted. With <code>.insertBefore()</code>, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted before the target container.</p>
				        <p>Consider the following HTML:</p>
				        <pre>&lt;div class="container"&gt;
  &lt;h2&gt;Greetings&lt;/h2&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre>
				        <p>We can create content and insert it before several elements at once:</p>
				        <pre>$('&lt;p&gt;Test&lt;/p&gt;').insertBefore('.inner');</pre>
				        <p>Each inner <code>&lt;div&gt;</code> element gets this new content:</p>
				        <pre>&lt;div class="container"&gt;
  &lt;h2&gt;Greetings&lt;/h2&gt;
  &lt;p&gt;Test&lt;/p&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;p&gt;Test&lt;/p&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre>
				        <p>We can also select an element on the page and insert it before another:</p>
				        <pre>$('h2').insertBefore($('.container'));</pre>
				        <p>If an element selected this way is inserted elsewhere, it will be moved before the target (not cloned):</p>
				        <pre>&lt;h2&gt;Greetings&lt;/h2&gt;
&lt;div class="container"&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre>
				        <p>If there is more than one target element, however, cloned copies of the inserted element will be created for each target after the first.</p>
         </longdesc>
         <example>
            <desc>Inserts all paragraphs before an element with id of "foo". Same as $("#foo").before("p")</desc>
         </example>
      </entry>
      <entry type="method" name="before">
         <desc>在每个匹配的元素之前插入内容。 在每个匹配的元素之前插入内容。Insert content, specified by the parameter, before each element in the set of matched elements.</desc>
         <signature>
            <argument name="content">
               <desc>An element, HTML string, or jQuery object to insert before each element in the set of matched elements.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="function">
               <desc>A function that returns an HTML string to insert before each element in the set of matched elements.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>The <code>.before()</code> and <code>
                  <a href="/insertBefore">.insertBefore()</a>
               </code> methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With<code> .before()</code>, the selector expression preceding the method is the container before which the content is inserted. With <code>.insertBefore()</code>, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted before the target container.</p>
				        <p>Consider the following HTML:</p>
				        <pre>&lt;div class="container"&gt;
  &lt;h2&gt;Greetings&lt;/h2&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre>
				        <p>We can create content and insert it before several elements at once:</p>
				        <pre>$('.inner').before('&lt;p&gt;Test&lt;/p&gt;');</pre>
				        <p>Each inner <code>&lt;div&gt;</code> element gets this new content:</p>
            <pre>&lt;div class="container"&gt;
  &lt;h2&gt;Greetings&lt;/h2&gt;
  &lt;p&gt;Test&lt;/p&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;p&gt;Test&lt;/p&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre>
            <p>We can also select an element on the page and insert it before another:</p>
				        <pre>$('.container').before($('h2'));</pre>
				        <p>If an element selected this way is inserted elsewhere, it will be moved before the target (not cloned):</p>
				        <pre>&lt;h2&gt;Greetings&lt;/h2&gt;
&lt;div class="container"&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre>
				        <p>If there is more than one target element, however, cloned copies of the inserted element will be created for each target after the first.</p>
            <p>In jQuery 1.4, <code>.before()</code> and <code>.after()</code> will also work on disconnected DOM nodes:</p>
            <pre>$("&lt;div/&gt;").before("&lt;p&gt;&lt;/p&gt;");</pre>
            <p>The result is a jQuery set that contains a paragraph and a div (in that order).</p>
         </longdesc>
         <example>
            <desc>Inserts some HTML before all paragraphs.</desc>
         </example>
         <example>
            <desc>Inserts a DOM element before all paragraphs.</desc>
         </example>
         <example>
            <desc>Inserts a jQuery object (similar to an Array of DOM Elements) before all paragraphs.</desc>
         </example>
      </entry>
      <entry type="method" name="insertAfter">
         <desc>把所有匹配的元素插入到另一个、指定的元素元素集合的后面。Insert every element in the set of matched elements after the target.</desc>
         <signature>
            <argument name="target">
               <desc>A selector, element, HTML string, or jQuery object; the matched set of elements will be inserted after the element(s) specified by this parameter.</desc>
            </argument>
         </signature>
         <longdesc>实际上，使用这个方法是颠倒了常规的$(A).after(B)的操作，即不是把B插入到A后面，而是把A插入到B后面。

		在jQuery 1.3.2中，appendTo, prependTo, insertBefore, insertAfter, 和 replaceAll这个几个方法成为一个破坏性操作，要选择先前选中的元素，需要使用end()方法，参见 appendTo 方法的例二。<p>The <code>
                  <a href="/after">.after()</a>
               </code> and <code>.insertAfter()</code> methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With<code> .after()</code>, the selector expression preceding the method is the container after which the content is inserted. With <code>.insertAfter()</code>, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted after the target container.</p>
				        <p>Consider the following HTML:</p>
				        <pre>&lt;div class="container"&gt;
  &lt;h2&gt;Greetings&lt;/h2&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre>
				        <p>We can create content and insert it after several elements at once:</p>
				        <pre>$('&lt;p&gt;Test&lt;/p&gt;').insertAfter('.inner');</pre>
				        <p>Each inner <code>&lt;div&gt;</code> element gets this new content:</p>
				        <pre>&lt;div class="container"&gt;
  &lt;h2&gt;Greetings&lt;/h2&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;p&gt;Test&lt;/p&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
  &lt;p&gt;Test&lt;/p&gt;
&lt;/div&gt;</pre>
				        <p>We can also select an element on the page and insert it after another:</p>
				        <pre>$('h2').insertAfter($('.container'));</pre>
				        <p>If an element selected this way is inserted elsewhere, it will be moved after the target (not cloned):</p>
				        <pre>&lt;div class="container"&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Greetings&lt;/h2&gt;</pre>
				        <p>If there is more than one target element, however, cloned copies of the inserted element will be created for each target after the first.</p>
         </longdesc>
         <example>
            <desc>Inserts all paragraphs after an element with id of "foo". Same as $("#foo").after("p")</desc>
         </example>
      </entry>
      <entry type="method" name="after">
         <desc>在每个匹配的元素之后插入内容。 在每个匹配的元素之后插入内容。Insert content, specified by the parameter, after each element in the set of matched elements.</desc>
         <signature>
            <argument name="content">
               <desc>An element, HTML string, or jQuery object to insert after each element in the set of matched elements.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="function(index)">
               <desc>A function that returns an HTML string to insert after each element in the set of matched elements.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>The <code>.after()</code> and <code>
                  <a href="/insertAfter">.insertAfter()</a>
               </code> methods perform the same task. The major difference is in the syntax—specifically, in the placement of the content and target. With<code> .after()</code>, the selector expression preceding the method is the container after which the content is inserted. With <code>.insertAfter()</code>, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted after the target container.</p>
				        <p>Consider the following HTML:</p>
				        <pre>&lt;div class="container"&gt;
  &lt;h2&gt;Greetings&lt;/h2&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre>
				        <p>We can create content and insert it after several elements at once:</p>
				        <pre>$('.inner').after('&lt;p&gt;Test&lt;/p&gt;');</pre>
				        <p>Each inner <code>&lt;div&gt;</code> element gets this new content:</p>
				        <pre>&lt;div class="container"&gt;
  &lt;h2&gt;Greetings&lt;/h2&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;p&gt;Test&lt;/p&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
  &lt;p&gt;Test&lt;/p&gt;
&lt;/div&gt;</pre>
				        <p>We can also select an element on the page and insert it after another:</p>
				        <pre>$('.container').after($('h2'));</pre>
				        <p>If an element selected this way is inserted elsewhere, it will be moved after the target (not cloned):</p>
				        <pre>&lt;div class="container"&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Greetings&lt;/h2&gt;</pre>
				        <p>If there is more than one target element, however, cloned copies of the inserted element will be created for each target after the first.</p>
            <h4 id="disconnected-dom-nodes">Inserting Disconnected DOM nodes</h4>
            <p>As of jQuery 1.4, <code>.before()</code> and <code>.after()</code> will also work on disconnected DOM nodes. For example, given the following code:</p>
            <pre>$('&lt;div/&gt;').after('&lt;p&gt;&lt;/p&gt;');</pre>
            <p>The result is a jQuery set containing a div and a paragraph, in that order. We can further manipulate that set, even before inserting it in the document.</p>
            <pre>$('&lt;div/&gt;').after('&lt;p&gt;&lt;/p&gt;').addClass('foo')
  .filter('p').attr('id', 'bar').html('hello')
.end()
.appendTo('body');</pre>
            <p>This results in the following elements inserted just before the closing <code>&lt;/body&gt;</code> tag:</p>
            <pre>
&lt;div class="foo"&gt;&lt;/div&gt;
&lt;p class="foo" id="bar"&gt;hello&lt;/p&gt;
</pre>
            <p>As of jQuery 1.4, <code>.after()</code> allows us to pass a function that returns the elements to insert.</p>
            <pre>$('p').after(function() {
  return '&lt;div&gt;' + this.className + '&lt;/div&gt;';
});</pre>
            <p>This inserts a <code>&lt;div&gt;</code> after each paragraph, containing the class name(s) of each paragraph in turn.</p>
         </longdesc>
         <example>
            <desc>Inserts some HTML after all paragraphs.</desc>
         </example>
         <example>
            <desc>Inserts a DOM element after all paragraphs.</desc>
         </example>
         <example>
            <desc>Inserts a jQuery object (similar to an Array of DOM Elements) after all paragraphs.</desc>
         </example>
      </entry>
      <entry type="method" name="prependTo">
         <desc>把所有匹配的元素前置到另一个、指定的元素元素集合中。Insert every element in the set of matched elements to the beginning of the target.</desc>
         <signature>
            <argument name="target">
               <desc>A selector, element, HTML string, or jQuery object; the matched set of elements will be inserted at the beginning of the element(s) specified by this parameter.</desc>
            </argument>
         </signature>
         <longdesc>实际上，使用这个方法是颠倒了常规的$(A).prepend(B)的操作，即不是把B前置到A中，而是把A前置到B中。

		在jQuery 1.3.2中，appendTo, prependTo, insertBefore, insertAfter, 和 replaceAll这个几个方法成为一个破坏性操作，要选择先前选中的元素，需要使用end()方法，参见 appendTo 方法的例二。<p>The <code>
                  <a href="/prepend">.prepend()</a>
               </code> and <code>.prependTo()</code> methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With<code> .prepend()</code>, the selector expression preceding the method is the container into which the content is inserted. With <code>.prependTo()</code>, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.</p>
				        <p>Consider the following HTML:</p>
				        <pre>&lt;h2&gt;Greetings&lt;/h2&gt;
&lt;div class="container"&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre>
				        <p>We can create content and insert it into several elements at once:</p>
				        <pre>$('&lt;p&gt;Test&lt;/p&gt;').prependTo('.inner');</pre>
				        <p>Each inner <code>&lt;div&gt;</code> element gets this new content:</p>
				        <pre>&lt;h2&gt;Greetings&lt;/h2&gt;
&lt;div class="container"&gt;
  &lt;div class="inner"&gt;
    &lt;p&gt;Test&lt;/p&gt;
    Hello
  &lt;/div&gt;
  &lt;div class="inner"&gt;
    &lt;p&gt;Test&lt;/p&gt;
    Goodbye
  &lt;/div&gt;
&lt;/div&gt;</pre>
				        <p>We can also select an element on the page and insert it into another:</p>
				        <pre>$('h2').prependTo($('.container'));</pre>
				        <p>If an element selected this way is inserted elsewhere, it will be moved into the target (not cloned):</p>
				        <pre>&lt;div class="container"&gt;
  &lt;h2&gt;Greetings&lt;/h2&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre>
				        <p>If there is more than one target element, however, cloned copies of the inserted element will be created for each target after the first.</p>
         </longdesc>
         <example>
            <desc>Prepends all spans to the element with the ID "foo"</desc>
         </example>
      </entry>
      <entry type="method" name="prepend">
         <desc>向每个匹配的元素内部前置内容。 jQuery 1.4 新增。向每个匹配的元素内部最前面追加内容。Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.</desc>
         <signature>
            <argument name="content">
               <desc>An element, HTML string, or jQuery object to insert at the beginning of each element in the set of matched elements.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="function(index, html)">
               <desc>A function that returns an HTML string to insert at the beginning of each element in the set of matched elements. Receives the index position of the element in the set and the old HTML value of the element as arguments.</desc>
            </argument>
         </signature>
         <longdesc>这是向所有匹配元素内部的开始处插入内容的最佳方式。这个操作与对指定的元素执行appendChild方法，将它们添加到文档中的情况类似。<p>The <code>.prepend()</code> method inserts the specified content as the first child of each element in the jQuery collection (To insert it as the <em>last</em> child, use <a href="http://api.jquery.com/append/">
                  <code>.append()</code>
               </a>). </p>
            <p>The <code>.prepend()</code> and <code>
                  <a href="/prependTo">.prependTo()</a>
               </code> methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With<code> .prepend()</code>, the selector expression preceding the method is the container into which the content is inserted. With <code>.prependTo()</code>, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.</p>
				        <p>Consider the following HTML:</p>
				        <pre>&lt;h2&gt;Greetings&lt;/h2&gt;
&lt;div class="container"&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre>
				        <p>We can create content and insert it into several elements at once:</p>
				        <pre>$('.inner').prepend('&lt;p&gt;Test&lt;/p&gt;');</pre>
				        <p>Each <code>&lt;div class="inner"&gt;</code> element gets this new content:</p>
				        <pre>&lt;h2&gt;Greetings&lt;/h2&gt;
&lt;div class="container"&gt;
  &lt;div class="inner"&gt;
    &lt;p&gt;Test&lt;/p&gt;
    Hello
  &lt;/div&gt;
  &lt;div class="inner"&gt;
    &lt;p&gt;Test&lt;/p&gt;
    Goodbye
  &lt;/div&gt;
&lt;/div&gt;</pre>
				        <p>We can also select an element on the page and insert it into another:</p>
				        <pre>$('.container').prepend($('h2'));</pre>
				        <p>If an element selected this way is inserted elsewhere, it will be moved into the target (not cloned):</p>
				        <pre>&lt;div class="container"&gt;
  &lt;h2&gt;Greetings&lt;/h2&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre>
				        <p>If there is more than one target element, however, cloned copies of the inserted element will be created for each target after the first.</p>
         </longdesc>
         <example>
            <desc>Prepends some HTML to all paragraphs.</desc>
         </example>
         <example>
            <desc>Prepends a DOM Element to all paragraphs.</desc>
         </example>
         <example>
            <desc>Prepends a jQuery object (similar to an Array of DOM Elements) to all paragraphs.</desc>
         </example>
      </entry>
      <entry type="method" name="appendTo">
         <desc>把所有匹配的元素追加到另一个指定的元素元素集合中。Insert every element in the set of matched elements to the end of the target.</desc>
         <signature>
            <argument name="target">
               <desc>A selector, element, HTML string, or jQuery object; the matched set of elements will be inserted at the end of the element(s) specified by this parameter.</desc>
            </argument>
         </signature>
         <longdesc>实际上，使用这个方法是颠倒了常规的$(A).append(B)的操作，即不是把B追加到A中，而是把A追加到B中。
		
		在jQuery 1.3.2中，appendTo, prependTo, insertBefore, insertAfter, 和 replaceAll这个几个方法成为一个破坏性操作，返回值是所有被追加的内容，而不仅仅是先前所选中的元素。所以，要选择先前选中的元素，需要使用end()方法，参见例二。<p>The <code>
                  <a href="/append">.append()</a>
               </code> and <code>.appendTo()</code> methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With<code> .append()</code>, the selector expression preceding the method is the container into which the content is inserted. With <code>.appendTo()</code>, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.</p>
				        <p>Consider the following HTML:</p>
				        <pre>&lt;h2&gt;Greetings&lt;/h2&gt;
&lt;div class="container"&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;
</pre>
				        <p>We can create content and insert it into several elements at once:</p>
				        <pre>$('&lt;p&gt;Test&lt;/p&gt;').appendTo('.inner');
</pre>
				        <p>Each inner <code>&lt;div&gt;</code> element gets this new content:</p>
				        <pre>&lt;h2&gt;Greetings&lt;/h2&gt;
&lt;div class="container"&gt;
  &lt;div class="inner"&gt;
    Hello
    &lt;p&gt;Test&lt;/p&gt;
  &lt;/div&gt;
  &lt;div class="inner"&gt;
    Goodbye
    &lt;p&gt;Test&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</pre>
				        <p>We can also select an element on the page and insert it into another:</p>
				        <pre>$('h2').appendTo($('.container'));
</pre>
				        <p>If an element selected this way is inserted elsewhere, it will be moved into the target (not cloned):</p>
				        <pre>&lt;div class="container"&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
  &lt;h2&gt;Greetings&lt;/h2&gt;
&lt;/div&gt;
</pre>
				        <p>If there is more than one target element, however, cloned copies of the inserted element will be created for each target after the first.</p>
         </longdesc>
         <example>
            <desc>Appends all spans to the element with the ID "foo"</desc>
         </example>
      </entry>
      <entry type="method" name="append">
         <desc>向每个匹配的元素内部追加内容。 jQuery 1.4 新增。向每个匹配的元素内部追加内容。Insert content, specified by the parameter, to the end of each element in the set of matched elements.</desc>
         <signature>
            <argument name="content">
               <desc>An element, HTML string, or jQuery object to insert at the end of each element in the set of matched elements.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="function(index, html)">
               <desc>A function that returns an HTML string to insert at the end of each element in the set of matched elements. Receives the index position of the element in the set and the old HTML value of the element as arguments.</desc>
            </argument>
         </signature>
         <longdesc>这个操作与对指定的元素执行appendChild方法，将它们添加到文档中的情况类似。这个操作与对指定的元素执行appendChild方法，将它们添加到文档中的情况类似。<p>The <code>.append()</code> method inserts the  specified content as the last child of each element in the jQuery collection (To insert it as the <em>first</em> child, use <a href="http://api.jquery.com/prepend/">
                  <code>.prepend()</code>
               </a>). </p>
            <p>The <code>.append()</code> and <code>
                  <a href="/appendTo">.appendTo()</a>
               </code> methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With<code> .append()</code>, the selector expression preceding the method is the container into which the content is inserted. With <code>.appendTo()</code>, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.</p>
            <p>Consider the following HTML:</p>
            <pre>&lt;h2&gt;Greetings&lt;/h2&gt;
&lt;div class="container"&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;
</pre>
            <p>We can create content and insert it into several elements at once:</p>
            <pre>$('.inner').append('&lt;p&gt;Test&lt;/p&gt;');
</pre>
            <p>Each inner <code>&lt;div&gt;</code> element gets this new content:</p>
            <pre>&lt;h2&gt;Greetings&lt;/h2&gt;
&lt;div class="container"&gt;
  &lt;div class="inner"&gt;
    Hello
    &lt;p&gt;Test&lt;/p&gt;
  &lt;/div&gt;
  &lt;div class="inner"&gt;
    Goodbye
    &lt;p&gt;Test&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</pre>
            <p>We can also select an element on the page and insert it into another:</p>
            <pre>$('.container').append($('h2'));
</pre>
            <p>If an element selected this way is inserted elsewhere, it will be moved into the target (not cloned):</p>
            <pre>&lt;div class="container"&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
  &lt;h2&gt;Greetings&lt;/h2&gt;
&lt;/div&gt;
</pre>
            <p>If there is more than one target element, however, cloned copies of the inserted element will be created for each target after the first.</p>
         </longdesc>
         <example>
            <desc>Appends some HTML to all paragraphs.</desc>
         </example>
         <example>
            <desc>Appends an Element to all paragraphs.</desc>
         </example>
         <example>
            <desc>Appends a jQuery object (similar to an Array of DOM Elements) to all paragraphs.</desc>
         </example>
      </entry>
      <entry type="method" name="val">
         <desc>获得第一个匹配元素的当前值。 设置每一个匹配元素的值。 check,select,radio等都能使用为之赋值 设置每一个匹配元素的值。Get the current value of the first element in the set of matched elements.</desc>
         <signature/>
         <longdesc>在 jQuery 1.2 中,可以返回任意元素的值了。包括select。如果多选，将返回一个数组，其包含所选的值。在 jQuery 1.2, 这也可以为select元件赋值在 jQuery 1.2, 这也可以为select元件赋值
      <p>The <code>.val()</code> method is primarily used to get the values of form elements. In the case of <code>&lt;select multiple="multiple"&gt;</code> elements, the <code>.val()</code> method returns an array containing each selected option.</p>

            <p>For selects and checkboxes, you can also use the <a href="/selected">:selected</a> and <a href="/checked">:checked</a> selectors to get at values, for example:</p>
            <pre>$('select.foo option:selected').val();    // get the value from a dropdown select
$('select.foo').val();                    // get the value from a dropdown select even easier
$('input:checkbox:checked').val();        // get the value from a checked checkbox
$('input:radio[name=bar]:checked').val(); // get the value from a set of radio buttons</pre>
         </longdesc>
         <example>
            <desc>Get the single value from a single select and an array of values from a multiple select and display their values.</desc>
         </example>
         <example>
            <desc>Find the value of an input box.</desc>
         </example>
      </entry>
      <entry type="method" name="val">
         <desc>获得第一个匹配元素的当前值。 设置每一个匹配元素的值。 check,select,radio等都能使用为之赋值 设置每一个匹配元素的值。Set the value of each element in the set of matched elements.</desc>
         <signature>
            <argument name="value">
               <desc>A string of text or an array of strings to set as the value property of each matched element.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="function(index, value)">
               <desc>A function returning the value to set.</desc>
            </argument>
         </signature>
         <longdesc>在 jQuery 1.2 中,可以返回任意元素的值了。包括select。如果多选，将返回一个数组，其包含所选的值。在 jQuery 1.2, 这也可以为select元件赋值在 jQuery 1.2, 这也可以为select元件赋值<p>This method is typically used to set the values of form fields. For <code>&lt;select multiple="multiple"&gt;</code> elements, multiple <code>&lt;option&gt;</code>s can be selected by passing in an array.</p>
            <p>The <code>.val()</code> method allows us to set the value by passing in a function. As of jQuery 1.4, the function is passed two arguments, the current element's index and its current value: </p>
            <pre>$('input:text.items').val(function(index, value) {
  return value + ' ' + this.className;
});
</pre>
            <p>This example appends the string " items" to the text inputs' values.</p>
         </longdesc>
         <example>
            <desc>Set the value of an input box.</desc>
         </example>
         <example>
            <desc>Set a single select and a multiple select .</desc>
         </example>
      </entry>
      <entry type="method" name="text">
         <desc>取得所有匹配元素的内容。 设置所有匹配元素的文本内容 设置所有匹配元素的文本内容Get the combined text contents of each element in the set of matched elements, including their descendants.</desc>
         <signature/>
         <longdesc>结果是由所有匹配元素包含的文本内容组合起来的文本。这个方法对HTML和XML文档都有效。与 html() 类似, 但将编码 HTML (将 "&lt;" 和 "&gt;" 替换成相应的HTML实体).与 html() 类似, 但将编码 HTML (将 "&lt;" 和 "&gt;" 替换成相应的HTML实体).<p>Unlike the <code>.html()</code> method, <code>.text()</code> can be used in both XML and HTML documents. The result of the <code>.text()</code> method is a string containing the combined text of all matched elements. (Due to variations in the HTML parsers in different browsers, the text returned may vary in newlines and other white space.) Consider the following HTML:</p>
            <pre>&lt;div class="demo-container"&gt;
  &lt;div class="demo-box"&gt;Demonstration Box&lt;/div&gt;
  &lt;ul&gt;
  &lt;li&gt;list item 1&lt;/li&gt;
  &lt;li&gt;list &lt;strong&gt;item&lt;/strong&gt; 2&lt;/li&gt;
  &lt;/ul&gt;
  &lt;/div&gt;
</pre>
            <p>The code <code>$('div.demo-container').text()</code> would produce the following result:</p>
            <p>
               <code>Demonstration Box list item 1 list item 2</code>
            </p>
            <p>The <code>.text()</code> method cannot be used on input elements.  For input field text, use the <a href="/val">.val()</a> method.</p>
            <p>As of jQuery 1.4, the <code>.text()</code> method returns the value of text and CDATA nodes as well as element nodes.</p>
         </longdesc>
         <example>
            <desc>Find the text in the first paragraph (stripping out the html), then set the html of the last paragraph to show it is just text (the red bold is gone).</desc>
         </example>
      </entry>
      <entry type="method" name="text">
         <desc>取得所有匹配元素的内容。 设置所有匹配元素的文本内容 设置所有匹配元素的文本内容Set the content of each element in the set of matched elements to the specified text.</desc>
         <signature>
            <argument name="textString">
               <desc>A string of text to set as the content of each matched element.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="function(index, text)">
               <desc>A function returning the text content to set. Receives the index position of the element in the set and the old text value as arguments.</desc>
            </argument>
         </signature>
         <longdesc>结果是由所有匹配元素包含的文本内容组合起来的文本。这个方法对HTML和XML文档都有效。与 html() 类似, 但将编码 HTML (将 "&lt;" 和 "&gt;" 替换成相应的HTML实体).与 html() 类似, 但将编码 HTML (将 "&lt;" 和 "&gt;" 替换成相应的HTML实体).<p>Unlike the <code>.html()</code> method, <code>.text()</code> can be used in both XML and HTML documents. </p>
            <p>We need to be aware that this method escapes the string provided as necessary so that it will render correctly in HTML. To do so, it calls the DOM method <code>.createTextNode()</code>, which replaces special characters with their HTML entity equivalents (such as <code>&amp;lt;</code> for <code>&lt;</code>).  Consider the following HTML:</p>
				        <pre>&lt;div class="demo-container"&gt;
  &lt;div class="demo-box"&gt;Demonstration Box&lt;/div&gt;
  &lt;ul&gt;
    &lt;li&gt;list item 1&lt;/li&gt;
    &lt;li&gt;list &lt;strong&gt;item&lt;/strong&gt; 2&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</pre>
	           <p>The code <code>$('div.demo-container').text('&lt;p&gt;This is a test.&lt;/p&gt;');</code> will produce the following DOM output:</p>
	           <pre>&lt;div class="demo-container"&gt;
&amp;lt;p&amp;gt;This is a test.&amp;lt;/p&amp;gt;
&lt;/div&gt;</pre>
	           <p>It will appear on a rendered page as though the tags were exposed, like this:</p>
	           <pre>&lt;p&gt;This is a test&lt;/p&gt;</pre>
	           <p>The <code>.text()</code> method cannot be used on input elements.  For input field text, use the <a href="/val">.val()</a> method.</p>
            <p>As of jQuery 1.4, the <code>.text()</code> method allows us to set the text content by passing in a function.</p>
            <pre>$('ul li').text(function(index) {
  return 'item number ' + (index + 1);
});</pre>
            <p>Given an unordered list with three <code>&lt;li&gt;</code> elements, this example will produce the following DOM output:</p>
            <pre>&lt;ul&gt;
  &lt;li&gt;item number 1&lt;/li&gt;
  &lt;li&gt;item number 2&lt;/li&gt;
  &lt;li&gt;item number 3&lt;/li&gt;
&lt;/ul&gt;
</pre>
         </longdesc>
         <example>
            <desc>Add text to the paragraph (notice the bold tag is escaped).</desc>
         </example>
      </entry>
      <entry type="method" name="html">
         <desc>取得第一个匹配元素的html内容。这个函数不能用于XML文档。但可以用于XHTML文档。 设置每一个匹配元素的html内容。这个函数不能用于XML文档。但可以用于XHTML文档。 设置每一个匹配元素的html内容。这个函数不能用于XML文档。但可以用于XHTML文档。Get the HTML contents of the first element in the set of matched elements.</desc>
         <signature/>
         <longdesc>
            <p>This method is not available on XML documents.</p>
            <p>In an HTML document, we can use <code>.html()</code> to get the contents of any element. If the selector expression matches more than one element, only the first one's HTML content is returned. Consider this code:</p>
            <pre>$('div.demo-container').html();</pre>
            <p>In order for the following <code>&lt;div&gt;</code>'s content to be retrieved, it would have to be the first one with <code>class="demo-container"</code> in the document:</p>
            <pre>&lt;div class="demo-container"&gt;
  &lt;div class="demo-box"&gt;Demonstration Box&lt;/div&gt;
&lt;/div&gt;</pre>
            <p>The result would look like this:</p>
            <pre>&lt;div class="demo-box"&gt;Demonstration Box&lt;/div&gt;</pre>
            <p>This method uses the browser's <code>innerHTML</code> property. Some browsers may not return HTML that exactly replicates the HTML source in an original document. For example, Internet Explorer sometimes leaves off the quotes around attribute values if they contain only alphanumeric characters.</p>
         </longdesc>
         <example>
            <desc>Click a paragraph to convert it from html to text.</desc>
         </example>
      </entry>
      <entry type="method" name="html">
         <desc>取得第一个匹配元素的html内容。这个函数不能用于XML文档。但可以用于XHTML文档。 设置每一个匹配元素的html内容。这个函数不能用于XML文档。但可以用于XHTML文档。 设置每一个匹配元素的html内容。这个函数不能用于XML文档。但可以用于XHTML文档。Set the HTML contents of each element in the set of matched elements.</desc>
         <signature>
            <argument name="htmlString">
               <desc>A string of HTML to set as the content of each matched element.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="function(index, oldhtml)">
               <desc>A function returning the HTML content to set. Receives the index position of the element in the set and the old HTML value as arguments. jQuery empties the element before calling the function; use the oldhtml argument to reference the previous content.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>The <code>.html()</code> method is not available in XML documents. </p>
				        <p>When we use <code>.html()</code> to set elements' contents, any contents that were in those elements is completely replaced by the new contents. Consider the following HTML:</p>
				        <pre>&lt;div class="demo-container"&gt;
  &lt;div class="demo-box"&gt;Demonstration Box&lt;/div&gt;
&lt;/div&gt;</pre>
				        <p>We can set the HTML contents of <code>&lt;div class="demo-container"&gt;</code> like so:</p>
				        <pre>$('div.demo-container')
  .html('&lt;p&gt;All new content. &lt;em&gt;You bet!&lt;/em&gt;&lt;/p&gt;');</pre>
				        <p>That line of code will replace everything inside <code>&lt;div class="demo-container"&gt;</code>:</p>
				        <pre>&lt;div class="demo-container"&gt;
  &lt;p&gt;All new content. &lt;em&gt;You bet!&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;</pre>
            <p>As of jQuery 1.4, the <code>.html()</code> method allows us to set the HTML content by passing in a function.</p>
            <pre>$('div.demo-container').html(function() {
  var emph = '&lt;em&gt;' + $('p').length + ' paragraphs!&lt;/em&gt;';
  return '&lt;p&gt;All new content for ' + emph + '&lt;/p&gt;';
});</pre>
            <p>Given a document with six paragraphs, this example will set the HTML of <code>&lt;div class="demo-container"&gt;</code> to <code>&lt;p&gt;All new content for &lt;em&gt;6 paragraphs!&lt;/em&gt;&lt;/p&gt;</code>.</p>

         </longdesc>
         <example>
            <desc>Add some html to each div.</desc>
         </example>
         <example>
            <desc>Add some html to each div then immediately do further manipulations to the inserted html.</desc>
         </example>
      </entry>
      <entry type="method" name="map">
         <desc>将一组元素转换成其他数组（不论是否是元素数组）Pass each element in the current matched set through a function, producing a new jQuery object containing the return values.</desc>
         <signature>
            <argument name="callback(index, domElement)">
               <desc>A function object that will be invoked for each element in the current set.</desc>
            </argument>
         </signature>
         <longdesc>你可以用这个函数来建立一个列表，不论是值、属性还是CSS样式，或者其他特别形式。这都可以用'$.map()'来方便的建立。<p>As the return value is a jQuery-wrapped array, it's very common to <code>get()</code> the returned object to work with a basic array.</p>
            <p>The <code>.map()</code> method is particularly useful for getting or setting the value of a collection of elements. Consider a form with a set of checkboxes in it:</p>
            <pre>
&lt;form method="post" action=""&gt;
  &lt;fieldset&gt;
    &lt;div&gt;
      &lt;label for="two"&gt;2&lt;/label&gt;
      &lt;input type="checkbox" value="2" id="two" name="number[]"&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;label for="four"&gt;4&lt;/label&gt;
      &lt;input type="checkbox" value="4" id="four" name="number[]"&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;label for="six"&gt;6&lt;/label&gt;
      &lt;input type="checkbox" value="6" id="six" name="number[]"&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;label for="eight"&gt;8&lt;/label&gt;
      &lt;input type="checkbox" value="8" id="eight" name="number[]"&gt;
    &lt;/div&gt;
  &lt;/fieldset&gt;
&lt;/form&gt;
</pre>
            <p>We can get a comma-separated list of checkbox <code>ID</code>s:</p>
            <pre>$(':checkbox').map(function() {
  return this.id;
}).get().join(',');</pre>
            <p>The result of this call is the string, <code>"two,four,six,eight"</code>.</p>
            <p>Within the callback function, <code>this</code> refers to the current DOM element for each iteration. The function can return an individual data item or an array of data items to be inserted into the resulting set. If an array is returned, the elements inside the array are inserted into the set. If the function returns <code>null</code> or <code>undefined</code>, no element will be inserted.</p>
         </longdesc>
         <example>
            <desc>Build a list of all the values within a form.</desc>
         </example>
         <example>
            <desc>A contrived example to show some functionality.</desc>
         </example>
         <example>
            <desc>Equalize the heights of the divs.</desc>
         </example>
      </entry>
      <entry type="method" name="is">
         <desc>用一个表达式来检查当前选择的元素集合，如果其中至少有一个元素符合这个给定的表达式就返回true。Check the current matched set of elements against a selector and return true if at least one of these elements matches the selector.</desc>
         <signature>
            <argument name="selector">
               <desc>A string containing a selector expression to match elements against.</desc>
            </argument>
         </signature>
         <longdesc>如果没有元素符合，或者表达式无效，都返回'false'。

'''注意：'''在jQuery 1.3中才对所有表达式提供了支持。在先前版本中，如果提供了复杂的表达式，比如层级选择器（比如 + , ~ 和 &gt; ），始终会返回true<p>Unlike the other filtering and traversal methods, <code>.is()</code> does not create a new jQuery object. Instead, it allows us to test the contents of a jQuery object without modification. This is often useful inside callbacks, such as event handlers.</p>
            <p>Suppose we have a list, with two of its items containing a child element:</p>
            <pre>
&lt;ul&gt;
  &lt;li&gt;list &lt;strong&gt;item 1&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;span&gt;list item 2&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;list item 3&lt;/li&gt;
&lt;/ul&gt;
</pre>
            <p>We can attach a click handler to the &lt;ul&gt; element, and then limit the code to be triggered only when a list item itself, not one of its children, is clicked:</p>
            <pre>$('ul').click(function(event) {
  if ($(event.target).is('li') ) {
    $(event.target).css('background-color', 'red');
  }
});</pre>
            <p>Now, when the user clicks on the word list in the first item or anywhere in the third item, the clicked list item will be given a red background. However, when the user clicks on item 1 in the first item or anywhere in the second item, nothing will occur, because in those cases the target of the event would be <code>&lt;strong&gt;</code> or <code>&lt;span&gt;</code>, respectively.
</p>
         </longdesc>
         <example>
            <desc>Shows a few ways is() can be used inside an event handler.</desc>
         </example>
         <example>
            <desc>Returns true, because the parent of the input is a form element</desc>
         </example>
         <example>
            <desc>Returns false, because the parent of the input is a p element</desc>
         </example>
      </entry>
      <entry type="method" name="eq">
         <desc>获取第N个元素Reduce the set of matched elements to the one at the specified index.</desc>
         <signature>
            <argument name="index">
               <desc>An integer indicating the 0-based position of the element. </desc>
            </argument>
         </signature>
         <signature>
            <argument name="-index">
               <desc>An integer indicating the position of the element, counting backwards  from the last element in the set. </desc>
            </argument>
         </signature>
         <longdesc>这个元素的位置是从0算起。<p>Given a jQuery object that represents a set of DOM elements, the <code>.eq()</code> method constructs a new jQuery object from one of the matching elements. The supplied index identifies the position of this element in the set.</p>
            <p>Consider a page with a simple list on it:</p>
            <pre>
  &lt;ul&gt;
    &lt;li&gt;list item 1&lt;/li&gt;
    &lt;li&gt;list item 2&lt;/li&gt;
    &lt;li&gt;list item 3&lt;/li&gt;
    &lt;li&gt;list item 4&lt;/li&gt;
    &lt;li&gt;list item 5&lt;/li&gt;
  &lt;/ul&gt;
</pre>
            <p>We can apply this method to the set of list items:</p>
            <pre>
  $('li').eq(2).css('background-color', 'red');
</pre>
            <p>The result of this call is a red background for item 3. Note that the supplied index is zero-based, and refers to the position of the element within the jQuery object, not within the DOM tree.</p>
            <p>If a negative number is provided, this indicates a position starting from the end of the set, rather than the beginning. For example:</p>
            <pre>
  $('li').eq(-2).css('background-color', 'red');
</pre>
            <p>This time list item 4 is turned red, since it is two from the end of the set.</p>
         </longdesc>
         <example>
            <desc>Turn the div with index 2 blue by adding an appropriate class.</desc>
         </example>
      </entry>
      <entry type="method" name="filter">
         <desc>筛选出与指定表达式匹配的元素集合。 筛选出与指定函数返回值匹配的元素集合Reduce the set of matched elements to those that match the selector or pass the function's test. </desc>
         <signature>
            <argument name="selector">
               <desc>A string containing a selector expression to match elements against.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="function(index)">
               <desc>A function used as a test for each element in the set. <code>this</code> is the current DOM element.</desc>
            </argument>
         </signature>
         <longdesc>这个方法用于缩小匹配的范围。用逗号分隔多个表达式这个函数内部将对每个对象计算一次 (正如 '$.each'). 如果调用的函数返回false则这个元素被删除，否则就会保留。<p>Given a jQuery object that represents a set of DOM elements, the <code>.filter()</code> method constructs a new jQuery object from a subset of the matching elements. The supplied selector is tested against each element; all elements matching the selector will be included in the result.</p>
            <p>Consider a page with a simple list on it:</p>
&lt;ul&gt;
  &lt;li&gt;list item 1&lt;/li&gt;
  &lt;li&gt;list item 2&lt;/li&gt;
  &lt;li&gt;list item 3&lt;/li&gt;
  &lt;li&gt;list item 4&lt;/li&gt;
  &lt;li&gt;list item 5&lt;/li&gt;
  &lt;li&gt;list item 6&lt;/li&gt;
&lt;/ul&gt;
<p>We can apply this method to the set of list items:</p>
            <pre>
  $('li').filter(':even').css('background-color', 'red');
</pre>
            <p>The result of this call is a red background for items 1, 3, and 5, as they match the selector (recall that <code>:even</code> and <code>:odd</code> use 0-based indexing).</p>
            <h4 id="using-filter-function">Using a Filter Function</h4>
            <p>The second form of this method allows us to filter elements against a function rather than a selector. For each element, if the function returns <code>true</code>, the element will be included in the filtered set; otherwise, it will be excluded. Suppose we have a somewhat more involved HTML snippet:</p>
            <pre>
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;list&lt;/strong&gt; item 1 -
    one strong tag&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;list&lt;/strong&gt; item &lt;strong&gt;2&lt;/strong&gt; -
    two &lt;span&gt;strong tags&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;list item 3&lt;/li&gt;
  &lt;li&gt;list item 4&lt;/li&gt;
  &lt;li&gt;list item 5&lt;/li&gt;
  &lt;li&gt;list item 6&lt;/li&gt;
&lt;/ul&gt;
</pre>
            <p>We can select the list items, then filter them based on their contents:</p>
            <pre>
$('li').filter(function(index) {
  return $('strong', this).length == 1;
}).css('background-color', 'red');
</pre>
            <p>This code will alter the first list item only, as it contains exactly one <code>&lt;strong&gt;</code> tag. Within the filter function, <code>this</code> refers to each DOM element in turn. The parameter passed to the function tells us the index of that DOM element within the set matched by the jQuery object.</p>
            <p>We can also take advantage of the <code>index</code> passed through the function, which indicates the 0-based position of the element within the unfiltered set of matched elements:</p>
            <pre>
$('li').filter(function(index) {
  return index % 3 == 2;
}).css('background-color', 'red');
</pre>
            <p>This alteration to the code will cause the third and sixth list items to be highlighted, as it uses the modulus operator (<code>%</code>) to select every item with an <code>index</code> value that, when divided by 3, has a remainder of <code>2</code>.</p>
         </longdesc>
         <example>
            <desc>Change the color of all divs then put a border around only some of them.</desc>
         </example>
         <example>
            <desc>Selects all paragraphs and removes those without a class "selected".</desc>
         </example>
         <example>
            <desc>Selects all paragraphs and removes those that aren't of class "selected" or the first one.</desc>
         </example>
         <example>
            <desc>Change the color of all divs then put a border to specific ones.</desc>
         </example>
         <example>
            <desc>Remove all elements that have a descendant ol element</desc>
         </example>
      </entry>
      <entry type="method" name="toggleClass">
         <desc>如果存在（不存在）就删除（添加）一个类。 如果开关switch参数为true则加上对应的class，否则就删除。 如果开关switch参数为true则加上对应的class，否则就删除。Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument.</desc>
         <signature>
            <argument name="className">
               <desc>One or more class names (separated by spaces) to be toggled for each element in the matched set.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="className">
               <desc>One or more class names (separated by spaces) to be toggled for each element in the matched set.</desc>
            </argument>
            <argument name="switch">
               <desc>A boolean value to determine whether the class should be added or removed.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="function(index, class)">
               <desc>A function that returns class names to be toggled in the class attribute of each element in the matched set. Receives the index position of the element in the set and the old class value as arguments.</desc>
            </argument>
            <argument name="switch">
               <desc>A boolean value to determine whether the class should be added or removed.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>This method takes one or more class names as its parameter. In the first version, if an element in the matched set of elements already has the class, then it is removed; if an element does not have the class, then it is added. For example, we can apply <code>.toggleClass()</code> to a simple <code>&lt;div&gt;</code>: </p>
            <pre>&lt;div class="tumble"&gt;Some text.&lt;/div&gt;
      </pre>
            <p>The first time we apply <code>$('div.tumble').toggleClass('bounce')</code>, we get the following:</p>
            <pre>&lt;div class="tumble bounce"&gt;Some text.&lt;/div&gt;
      </pre>
            <p>The second time we apply <code>$('div.tumble').toggleClass('bounce')</code>, the <code>&lt;div&gt;</code> class is returned to the single <code>tumble</code> value:</p>
            <pre>&lt;div class="tumble"&gt;Some text.&lt;/div&gt;</pre>
            <p>Applying <code>.toggleClass('bounce spin')</code> to the same <code>&lt;div&gt;</code> alternates between <code>&lt;div class="tumble bounce spin"&gt;</code> and <code>&lt;div class="tumble"&gt;</code>.</p>
            <p>The second version of <code>.toggleClass()</code> uses the second parameter for determining whether the class should be added or removed. If this parameter's value is <code>true</code>, then the class is added; if <code>false</code>, the class is removed. In essence, the statement:</p>
            <pre>$('#foo').toggleClass(className, addOrRemove);</pre>
            <p>is equivalent to:</p>
            <pre>if (addOrRemove) {
    $('#foo').addClass(className);
  }
  else {
    $('#foo').removeClass(className);
  }
  </pre>
            <p>As of jQuery 1.4, the <code>.toggleClass()</code> method allows us to indicate the class name to be toggled by passing in a function.</p>
            <pre>$('div.foo').toggleClass(function() {
  if ($(this).parent().is('.bar')) {
    return 'happy';
  } else {
    return 'sad';
  }
});</pre>
            <p>This example will toggle the <code>happy</code> class for <code>&lt;div class="foo"&gt;</code> elements if their parent element has a class of <code>bar</code>; otherwise, it will toggle the <code>sad</code> class.</p>
  
         </longdesc>
         <example>
            <desc>Toggle the class 'highlight' when a paragraph is clicked.</desc>
         </example>
         <example>
            <desc>Add the "highlight" class to the clicked paragraph on every third click of that paragraph, remove it every first and second click.</desc>
         </example>
      </entry>
      <entry type="method" name="removeClass">
         <desc>从所有匹配的元素中删除全部或者指定的类。 从所有匹配的元素中删除全部或者指定的类。Remove a single class, multiple classes, or all classes from each element in the set of matched elements.</desc>
         <signature>
            <argument name="className">
               <desc>A class name to be removed from the class attribute of each matched element.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="function(index, class)">
               <desc>A function returning one or more space-separated class names to be removed. Receives the index position of the element in the set and the old class value as arguments.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>If a class name is included as a parameter, then only that class will be removed from the set of matched elements. If no class names are specified in the parameter, all classes will be removed.</p>
				        <p>More than one class may be removed at a time, separated by a space, from the set of matched elements, like so:</p>
				        <pre>$('p').removeClass('myClass yourClass')
</pre>
				        <p>This method is often used with <code>.addClass()</code> to switch elements' classes from one to another, like so:</p>
				        <pre>$('p').removeClass('myClass noClass').addClass('yourClass');
</pre>
				        <p>Here, the <code>myClass</code> and <code>noClass</code> classes are removed from all paragraphs, while <code>yourClass</code> is added.</p>
				        <p>To replace all existing classes with another class, we can use <code>.attr('class', 'newClass')</code> instead.</p>
            <p>As of jQuery 1.4, the <code>.removeClass()</code> method allows us to indicate the class to be removed by passing in a function.</p>
            <pre>$('li:last').removeClass(function() {
          return $(this).prev().attr('class');
        });</pre>
            <p>This example removes the class name of the penultimate <code>&lt;li&gt;</code> from the last <code>&lt;li&gt;</code>.</p>
         </longdesc>
         <example>
            <desc>Remove the class 'blue' from the matched elements.</desc>
         </example>
         <example>
            <desc>Remove the class 'blue' and 'under' from the matched elements.</desc>
         </example>
         <example>
            <desc>Remove all the classes from the matched elements.</desc>
         </example>
      </entry>
      <entry type="method" name="hasClass">
         <desc>检查当前的元素是否含有某个特定的类，如果有，则返回true。Determine whether any of the matched elements are assigned the given class.</desc>
         <signature>
            <argument name="className">
               <desc>The class name to search for.</desc>
            </argument>
         </signature>
         <longdesc>这其实就是 is("." + class)。<p>Elements may have more than one class assigned to them. In HTML, this is represented by separating the class names with a space:</p>
		          <pre>&lt;div id="mydiv" class="foo bar"&gt;&lt;/div&gt;</pre>
		          <p>The <code>.hasClass()</code> method will return <code>true</code> if the class is assigned to an element, even if other classes also are. For example, given the HTML above, the following will return <code>true</code>:</p>
		          <pre>$('#mydiv').hasClass('foo')</pre>
		          <p>as would:</p>
		          <pre>$('#mydiv').hasClass('bar')</pre>
         </longdesc>
         <example>
            <desc>Looks for the class 'selected' on the matched elements.</desc>
         </example>
      </entry>
      <entry type="method" name="removeAttr">
         <desc>从每一个匹配的元素中删除一个属性Remove an attribute from each element in the set of matched elements.</desc>
         <signature>
            <argument name="attributeName">
               <desc>An attribute to remove.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>The <code>.removeAttr()</code> method uses the JavaScript <code>removeAttribute()</code> function, but it has the advantage of being able to be called directly on a jQuery object and it accounts for different attribute naming across browsers.</p>
         </longdesc>
         <example>
            <desc>Clicking the button enables the input next to it.</desc>
         </example>
      </entry>
      <entry type="method" name="attr">
         <desc>取得第一个匹配元素的属性值。通过这个方法可以方便地从第一个匹配元素中获取一个属性的值。如果元素没有相应属性，则返回 undefined 。 将一个“名/值”形式的对象设置为所有匹配元素的属性。 为所有匹配的元素设置一个属性值。 为所有匹配的元素设置一个计算的属性值。Get the value of an attribute for the first element in the set of matched elements.</desc>
         <signature>
            <argument name="attributeName">
               <desc>The name of the attribute to get.</desc>
            </argument>
         </signature>
         <longdesc>这是一种在所有匹配元素中批量设置很多属性的最佳方式。 注意，如果你要设置对象的class属性，你必须使用'className' 作为属性名。或者你可以直接使用.addClass( class ) 和 .removeClass( class ).不提供值，而是提供一个函数，由这个函数计算的值作为属性值。<p>It's important to note that the <code>.attr()</code> method gets the attribute value for only the <em>first</em> element in the matched set. To get the value for each element individually, we need to rely on a looping construct such as jQuery's <code>.each()</code> or <code>.map()</code> method.</p>
            <p>Using jQuery's <code>.attr()</code> method to get the value of an element's attribute has two main benefits:</p>
            <ol>
               <li>
                  <strong>Convenience</strong>: It can be called directly on a jQuery object and chained to other jQuery methods.</li>
               <li>
                  <strong>Cross-browser consistency</strong>: Some attributes have inconsistent naming from browser to browser. Furthermore, the values of some attributes are reported inconsistently across browsers, and even across versions of a single browser. The <code>.attr()</code> method reduces such inconsistencies. </li>
            </ol>
            <p>If we try to get the value of an attribute that has not been set, the <code>.attr()</code> method returns <code>undefined</code>.</p>
         </longdesc>
         <example>
            <desc>Finds the title attribute of the first &lt;em&gt; in the page.</desc>
         </example>
      </entry>
      <entry type="method" name="attr">
         <desc>取得第一个匹配元素的属性值。通过这个方法可以方便地从第一个匹配元素中获取一个属性的值。如果元素没有相应属性，则返回 undefined 。 将一个“名/值”形式的对象设置为所有匹配元素的属性。 为所有匹配的元素设置一个属性值。 为所有匹配的元素设置一个计算的属性值。Set one or more attributes for the set of matched elements.</desc>
         <signature>
            <argument name="attributeName">
               <desc>The name of the attribute to set.</desc>
            </argument>
            <argument name="value">
               <desc>A value to set for the attribute.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="map">
               <desc>A map of attribute-value pairs to set.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="attributeName">
               <desc>The name of the attribute to set.</desc>
            </argument>
            <argument name="function(index, attr)">
               <desc>A function returning the value to set. <code>this</code> is the current element. Receives the index position of the element in the set and the old attribute value as arguments.</desc>
            </argument>
         </signature>
         <longdesc>这是一种在所有匹配元素中批量设置很多属性的最佳方式。 注意，如果你要设置对象的class属性，你必须使用'className' 作为属性名。或者你可以直接使用.addClass( class ) 和 .removeClass( class ).不提供值，而是提供一个函数，由这个函数计算的值作为属性值。<p>The <code>.attr()</code> method is a convenient and powerful way to set the value of attributes—especially when setting multiple attributes or using values returned by a function. Let's consider the following image:</p>
					       <pre>&lt;img id="greatphoto" src="brush-seller.jpg" alt="brush seller" /&gt;</pre>
					       <h4>Setting a simple attribute</h4>
					       <p>We can change the <code>alt</code> attribute by simply passing the name of the attribute and its new value to the <code>.attr()</code> method:</p>
					       <pre>$('#greatphoto').attr('alt', 'Beijing Brush Seller');</pre>
					       <p>We can <em>add</em> an attribute the same way:</p>
					       <pre>$('#greatphoto')
  .attr('title', 'Photo by Kelly Clark');</pre>
				
					       <h4>Setting several attributes at once</h4>
					       <p>To change the <code>alt</code> attribute and add the <code>title</code> attribute at the same time, we can pass both sets of names and values into the method at once using a map (JavaScript object literal). Each key-value pair in the map adds or modifies an attribute:</p>
					       <pre>$('#greatphoto').attr({
  alt: 'Beijing Brush Seller',
  title: 'photo by Kelly Clark'
});</pre>
					       <p>When setting multiple attributes, the quotes around attribute names are optional.</p>
					       <p>
               <strong>WARNING</strong> When setting the 'class' attribute, you must always use quotes!</p>

				
				
					       <h4>Computed attribute values</h4>
					       <p>By using a function to set attributes, we can compute the value based on other properties of the element. For example, we could concatenate a new value with an existing value:</p>
					       <pre>$('#greatphoto').attr('title', function() {
  return this.alt + ' - photo by Kelly Clark'
});</pre>
					       <p>This use of a function to compute attribute values can be particularly useful when we modify the attributes of multiple elements at once.</p>
         </longdesc>
         <example>
            <desc>Set some attributes for all &lt;img&gt;s in the page.</desc>
         </example>
         <example>
            <desc>Disables buttons greater than the 1st button.</desc>
         </example>
         <example>
            <desc>Sets id for divs based on the position in the page.</desc>
         </example>
         <example>
            <desc>Sets src attribute from title attribute on the image.</desc>
         </example>
      </entry>
      <entry type="method" name="addClass">
         <desc>为每个匹配的元素添加指定的类名。 为每个匹配的元素添加指定的类名。Adds the specified class(es) to each of the set of matched elements.</desc>
         <signature>
            <argument name="className">
               <desc>One or more class names to be added to the class attribute of each matched element.</desc>
            </argument>
         </signature>
         <signature>
            <argument name="function(index, class)">
               <desc>A function returning one or more space-separated class names to be added. Receives the index position of the element in the set and the old class value as arguments.</desc>
            </argument>
         </signature>
         <longdesc>
            <p>It's important to note that this method does not replace a class. It simply adds the class, appending it to any which may already be assigned to the elements.</p>
            <p>More than one class may be added at a time, separated by a space, to the set of matched elements, like so:</p>
            <pre>$('p').addClass('myClass yourClass');</pre>
            <p>This method is often used with <code>.removeClass()</code> to switch elements' classes from one to another, like so:</p>
            <pre>$('p').removeClass('myClass noClass').addClass('yourClass');</pre>
            <p>Here, the <code>myClass</code> and <code>noClass</code> classes are removed from all paragraphs, while <code>yourClass</code> is added.</p>
            <p>As of jQuery 1.4, the <code>.addClass()</code> method allows us to set the class name by passing in a function.</p>
            <pre>$('ul li:last').addClass(function() {
  return 'item-' + $(this).index();
});</pre>
            <p>Given an unordered list with five <code>&lt;li&gt;</code> elements, this example adds the class "item-4" to the last <code>&lt;li&gt;</code>.</p>


         </longdesc>
         <example>
            <desc>Adds the class 'selected' to the matched elements.</desc>
         </example>
         <example>
            <desc>Adds the classes 'selected' and 'highlight' to the matched elements.</desc>
         </example>
      </entry>
   </entries>
</api>